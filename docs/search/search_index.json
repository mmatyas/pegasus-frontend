{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Pegasus is an experimental emulator frontend, focusing on customizability, cross platform support (including embedded) and high performance. Here you can find the related documentation, development notes and guides. >> Back to pegasus-frontend.org User guide Getting started! Default controls Portable mode Config directories Plaform notes Windows Android Android example setup Linux Raspberry MacOS How to add games Metadata files Asset files Other sources (Steam, GOG, etc.) Frequently asked questions Installing themes Scripting Breaking changes Theme development Overview Special features QML tutorials Available QML modules Step-by-step: Simple theme Step-by-step: Flixnet theme API reference Core development Translations Metadata syntax Building Pegasus Installing Qt on desktop Cross compiling Qt for embedded Deployment","title":"Home"},{"location":"#home","text":"Pegasus is an experimental emulator frontend, focusing on customizability, cross platform support (including embedded) and high performance. Here you can find the related documentation, development notes and guides. >> Back to pegasus-frontend.org","title":"Home"},{"location":"#user-guide","text":"Getting started! Default controls Portable mode Config directories Plaform notes Windows Android Android example setup Linux Raspberry MacOS How to add games Metadata files Asset files Other sources (Steam, GOG, etc.) Frequently asked questions Installing themes Scripting Breaking changes","title":"User guide"},{"location":"#theme-development","text":"Overview Special features QML tutorials Available QML modules Step-by-step: Simple theme Step-by-step: Flixnet theme API reference","title":"Theme development"},{"location":"#core-development","text":"Translations Metadata syntax Building Pegasus Installing Qt on desktop Cross compiling Qt for embedded Deployment","title":"Core development"},{"location":"dev/build/","text":"Building Pegasus Pegasus is a cross-platform native application written in C++ and built mainly on top of the Qt libraries. Manually building has the following requirements: C++11 -supporting compiler (eg. G++ 4.9 or Visual Studio 2017) Qt 5.15 or later, with the following modules: QML module Qt Quick 2 module Multimedia module Svg module Gamepad module, optional 1 SDL 2.0.4 or later, optional 1 Git , optional 2 CMake 3.16 or later, optional 3 Info You can use either Qt or SDL2 for gamepad handling. SDL2 has better compatibility, but may not be readily available on as many platforms as Qt. If available, Git will be used to determine the version number shown in the program. You can either build with QMake or CMake. When building with CMake, at least Qt 5.15 is required. To install Qt , you can follow the guide on this page . To install SDL2 , you can use your platform's package manager or you can download the library directly from its official site . To install Git , use your platform's package manager, or the official installer , and make sure it's available in your PATH . To install CMake , use your platform's package manager, or the official release , and make sure it's available in your PATH . Get the source code You can find the sources at https://github.com/mmatyas/pegasus-frontend . Download it using your favorite Git client, or as a zip file from the webpage. If you are using the command line, make sure you also get the submodules: git clone --recursive https://github.com/mmatyas/pegasus-frontend In case you forgot, you can do it after clone too: git submodule update --init Build Pegasus is a Qt project. Qt provides a graphical IDE, called Qt Creator , which you can use building such projects, or you can call Qt's qmake tool directly from the command line. Alternatively, if you have Qt 5.15 or later, you can also use CMake, of which at least version 3.16 is required. You can find the official CMake releases here . Using Qt Creator Open Qt Creator and open the project file ( pegasus.pro ) Qt Creator will ask you which Qt setup (\"kit\") you want to use (in case you've installed multiple versions), and where you want to place the generated build files. If everything's OK, click Configure Project. (optional) Change the configuration (see below ) In the bottom left corner, on the sidebar of Qt Creator, you can find 4 buttons: with the button that looks like a desktop monitor, you can change the build type (optimized Release build or development-friendly but slower Debug build) the green arrow will build and run the program the green arrow with a bug will also open several debug toolbars the hammer will build the project but won't start the application Change the build type to Release, and press the green arrow to build and run the project. Using qmake Create a build directory somewhere, and step into it Call qmake like this: /path/to/qmake path/to/pegasus [options] . If you have multiple Qt versions installed, make sure you call the right qmake . If you've installed using the official release from the Qt site, you can find it in [qt-installdir]/Qt5/[version]/gcc_64/bin . You can add it to your PATH if you want, but it's not necessary. You can also change some configuration options, which you can find below . Call make (optional) Call make check to run tests. (optional) Call make install Using CMake This section assumes you have some experience with CMake, as you can build Pegasus just like any other CMake project: Create a build directory somewhere, and step into it Call cmake like this: /path/to/cmake path/to/pegasus [options] , or use the CMake GUI for configuration; you can find the details below Call your build tool (eg. make ) to build the project (optional) Call ctest to run tests (optional) Call the install/strip target of your build tool for deployment Configuration options Using qmake For qmake, the Qt configuration tool, you can change build parameters by appending KEY=VALUE pairs to its command line call. If you're using Qt Creator, you can find these settings on the Projects -> Build settings tab, where you can modify the Additional arguments option (see here ). The following parameters are supported: Option Description SDL_LIBS A space-separated list of linker flags (ie. -l and -L ) for linking SDL (but you should not link to SDL2main ) SDL_INCLUDES A space-separated list of include directories for SDL; one of them must contain the file SDL.h USE_SDL_GAMEPAD By default, the build will use Qt's built-in gamepad support; to improve compatibility, you can use SDL2 instead, by setting this to 1 (default: OFF) USE_SDL_POWER Except on Android, by default Pegasus has no information about the battery satatus of the device; setting this to 1 will enable an SDL-based implementation (default: OFF) ENABLE_APNG Enable support for animated PNG files; this requires a Qt version that was built with an APNG-patched libpng (default: OFF) If SDL_LIBS and SDL_INCLUDES are both empty, but an SDL-option is enabled (eg. USE_SDL_GAMEPAD ), then pkg-config will be used to find it, on platforms where it is available. Note that only the gamepad module is used from SDL, so if you're building it on your own, you can turn off many of its features during configuration. You should not link to SDL2main . Deployment Some platforms optionally support installing and deploying builds. In practice, this means preparing the final executable and copying it to a particular location. The behaviour can be controlled through the following parameters: Option Description INSTALLDIR The general installation directory used by make install . Defaults to /opt/pegasus-frontend on Linux, /usr/local/pegasus-frontend on Mac and C:\\pegasus-frontend on Windows. INSTALL_BINDIR The installation directory of the executable. Defaults to INSTALLDIR . On most distros /usr/bin is a good value. INSTALL_DOCDIR If set, make install will copy the license and readme files there. On most distros /usr/share/doc/pegasus-frontend is a good value. INSTALL_DESKTOPDIR Linux only. If set, make install will create an XDG desktop file there (making Pegasus appear in the main menu). Unset by default, on most distros /usr/share/applications is a good value. INSTALL_ICONDIR Linux only. If set, make install will create an XDG icon file there (making Pegasus have an icon on the tray and the menu). Unset by default, on most distros /usr/share/pixmaps or /usr/share/icons/hicolor is a good value. INSTALL_APPSTREAMDIR Linux only. If set, make install will create an AppStream XML entry there (making Pegasus appear in certain app store applications). Unset by default, on most distros /app/share/metainfo is a good value. Example qmake path/to/sources \\ USE_SDL_GAMEPAD = 1 \\ SDL_LIBS = \"-L/path/to/sdl/lib/ -lSDL2 -Wl,--no-undefined\" \\ SDL_INCLUDES = /path/to/sdl/include/SDL2/ INSTALL_BINDIR = /usr/bin \\ INSTALL_DOCDIR = /usr/share/doc/pegasus-frontend \\ INSTALL_ICONDIR = /usr/share/icons/hicolor \\ INSTALL_DESKTOPDIR = /app/share/applications \\ INSTALL_APPSTREAMDIR = /app/share/metainfo Using CMake For CMake, you can either use its GUI, or add -Dkey=value option to the command line call. In addition to the standard CMake parameters, the following Pegasus-specific options are supported: Option Description PEGASUS_USE_SDL2_GAMEPAD Use SDL2 for gamepad support (default: ON) PEGASUS_USE_SDL2_POWER Use SDL2 for battery info support (default: ON) PEGASUS_ENABLE_APNG Enable animated PNG support; this requires a Qt version that was built with an APNG-patched libpng (default: OFF) PEGASUS_STATIC_CXX Link stdc++ statically (default: OFF) PEGASUS_ENABLE_LTO Allow link-time optimizations, if the compiler supports this (but increasing build time) (default: ON) To explicitly tell where Qt and SDL is located, you can use CMAKE_PREFIX_PATH , which is a semicolon-separated list of search paths. For deployment, the standard GNUInstallDirs module is used, ie. on Linux most paths should have a correct default value. You can use CMAKE_INSTALL_PREFIX to set the root deployment directory. If you wish to customize the paths, use the following parameters: Option Description PEGASUS_INSTALLDIR The general deployment directory PEGASUS_INSTALL_BINDIR The deployment directory of the executable PEGASUS_INSTALL_DOCDIR The deployment directory of the license and readme files PEGASUS_INSTALL_DESKTOPDIR Linux only, the deployment directory of the XDG desktop file (making Pegasus appear in the main menu) PEGASUS_INSTALL_ICONDIR Linux only, the deployment directory of the XDG icon file there (making Pegasus have an icon on the tray and the menu) PEGASUS_INSTALL_APPSTREAMDIR Linux only, the deployment directory of the AppStream XML entry there (making Pegasus appear in certain app store applications) Example cmake path/to/sources \\ -DCMAKE_PREFIX_PATH = \"/opt/Qt5;/opt/SDL2\" \\ -DCMAKE_INSTALL_PREFIX = /usr/ \\ -DPEGASUS_ENABLE_APNG = ON \\ -DPEGASUS_ENABLE_LTO = OFF","title":"Building"},{"location":"dev/build/#building-pegasus","text":"Pegasus is a cross-platform native application written in C++ and built mainly on top of the Qt libraries. Manually building has the following requirements: C++11 -supporting compiler (eg. G++ 4.9 or Visual Studio 2017) Qt 5.15 or later, with the following modules: QML module Qt Quick 2 module Multimedia module Svg module Gamepad module, optional 1 SDL 2.0.4 or later, optional 1 Git , optional 2 CMake 3.16 or later, optional 3 Info You can use either Qt or SDL2 for gamepad handling. SDL2 has better compatibility, but may not be readily available on as many platforms as Qt. If available, Git will be used to determine the version number shown in the program. You can either build with QMake or CMake. When building with CMake, at least Qt 5.15 is required. To install Qt , you can follow the guide on this page . To install SDL2 , you can use your platform's package manager or you can download the library directly from its official site . To install Git , use your platform's package manager, or the official installer , and make sure it's available in your PATH . To install CMake , use your platform's package manager, or the official release , and make sure it's available in your PATH .","title":"Building Pegasus"},{"location":"dev/build/#get-the-source-code","text":"You can find the sources at https://github.com/mmatyas/pegasus-frontend . Download it using your favorite Git client, or as a zip file from the webpage. If you are using the command line, make sure you also get the submodules: git clone --recursive https://github.com/mmatyas/pegasus-frontend In case you forgot, you can do it after clone too: git submodule update --init","title":"Get the source code"},{"location":"dev/build/#build","text":"Pegasus is a Qt project. Qt provides a graphical IDE, called Qt Creator , which you can use building such projects, or you can call Qt's qmake tool directly from the command line. Alternatively, if you have Qt 5.15 or later, you can also use CMake, of which at least version 3.16 is required. You can find the official CMake releases here .","title":"Build"},{"location":"dev/build/#using-qt-creator","text":"Open Qt Creator and open the project file ( pegasus.pro ) Qt Creator will ask you which Qt setup (\"kit\") you want to use (in case you've installed multiple versions), and where you want to place the generated build files. If everything's OK, click Configure Project. (optional) Change the configuration (see below ) In the bottom left corner, on the sidebar of Qt Creator, you can find 4 buttons: with the button that looks like a desktop monitor, you can change the build type (optimized Release build or development-friendly but slower Debug build) the green arrow will build and run the program the green arrow with a bug will also open several debug toolbars the hammer will build the project but won't start the application Change the build type to Release, and press the green arrow to build and run the project.","title":"Using Qt Creator"},{"location":"dev/build/#using-qmake","text":"Create a build directory somewhere, and step into it Call qmake like this: /path/to/qmake path/to/pegasus [options] . If you have multiple Qt versions installed, make sure you call the right qmake . If you've installed using the official release from the Qt site, you can find it in [qt-installdir]/Qt5/[version]/gcc_64/bin . You can add it to your PATH if you want, but it's not necessary. You can also change some configuration options, which you can find below . Call make (optional) Call make check to run tests. (optional) Call make install","title":"Using qmake"},{"location":"dev/build/#using-cmake","text":"This section assumes you have some experience with CMake, as you can build Pegasus just like any other CMake project: Create a build directory somewhere, and step into it Call cmake like this: /path/to/cmake path/to/pegasus [options] , or use the CMake GUI for configuration; you can find the details below Call your build tool (eg. make ) to build the project (optional) Call ctest to run tests (optional) Call the install/strip target of your build tool for deployment","title":"Using CMake"},{"location":"dev/build/#configuration-options","text":"","title":"Configuration options"},{"location":"dev/build/#using-qmake_1","text":"For qmake, the Qt configuration tool, you can change build parameters by appending KEY=VALUE pairs to its command line call. If you're using Qt Creator, you can find these settings on the Projects -> Build settings tab, where you can modify the Additional arguments option (see here ). The following parameters are supported: Option Description SDL_LIBS A space-separated list of linker flags (ie. -l and -L ) for linking SDL (but you should not link to SDL2main ) SDL_INCLUDES A space-separated list of include directories for SDL; one of them must contain the file SDL.h USE_SDL_GAMEPAD By default, the build will use Qt's built-in gamepad support; to improve compatibility, you can use SDL2 instead, by setting this to 1 (default: OFF) USE_SDL_POWER Except on Android, by default Pegasus has no information about the battery satatus of the device; setting this to 1 will enable an SDL-based implementation (default: OFF) ENABLE_APNG Enable support for animated PNG files; this requires a Qt version that was built with an APNG-patched libpng (default: OFF) If SDL_LIBS and SDL_INCLUDES are both empty, but an SDL-option is enabled (eg. USE_SDL_GAMEPAD ), then pkg-config will be used to find it, on platforms where it is available. Note that only the gamepad module is used from SDL, so if you're building it on your own, you can turn off many of its features during configuration. You should not link to SDL2main .","title":"Using qmake"},{"location":"dev/build/#deployment","text":"Some platforms optionally support installing and deploying builds. In practice, this means preparing the final executable and copying it to a particular location. The behaviour can be controlled through the following parameters: Option Description INSTALLDIR The general installation directory used by make install . Defaults to /opt/pegasus-frontend on Linux, /usr/local/pegasus-frontend on Mac and C:\\pegasus-frontend on Windows. INSTALL_BINDIR The installation directory of the executable. Defaults to INSTALLDIR . On most distros /usr/bin is a good value. INSTALL_DOCDIR If set, make install will copy the license and readme files there. On most distros /usr/share/doc/pegasus-frontend is a good value. INSTALL_DESKTOPDIR Linux only. If set, make install will create an XDG desktop file there (making Pegasus appear in the main menu). Unset by default, on most distros /usr/share/applications is a good value. INSTALL_ICONDIR Linux only. If set, make install will create an XDG icon file there (making Pegasus have an icon on the tray and the menu). Unset by default, on most distros /usr/share/pixmaps or /usr/share/icons/hicolor is a good value. INSTALL_APPSTREAMDIR Linux only. If set, make install will create an AppStream XML entry there (making Pegasus appear in certain app store applications). Unset by default, on most distros /app/share/metainfo is a good value.","title":"Deployment"},{"location":"dev/build/#example","text":"qmake path/to/sources \\ USE_SDL_GAMEPAD = 1 \\ SDL_LIBS = \"-L/path/to/sdl/lib/ -lSDL2 -Wl,--no-undefined\" \\ SDL_INCLUDES = /path/to/sdl/include/SDL2/ INSTALL_BINDIR = /usr/bin \\ INSTALL_DOCDIR = /usr/share/doc/pegasus-frontend \\ INSTALL_ICONDIR = /usr/share/icons/hicolor \\ INSTALL_DESKTOPDIR = /app/share/applications \\ INSTALL_APPSTREAMDIR = /app/share/metainfo","title":"Example"},{"location":"dev/build/#using-cmake_1","text":"For CMake, you can either use its GUI, or add -Dkey=value option to the command line call. In addition to the standard CMake parameters, the following Pegasus-specific options are supported: Option Description PEGASUS_USE_SDL2_GAMEPAD Use SDL2 for gamepad support (default: ON) PEGASUS_USE_SDL2_POWER Use SDL2 for battery info support (default: ON) PEGASUS_ENABLE_APNG Enable animated PNG support; this requires a Qt version that was built with an APNG-patched libpng (default: OFF) PEGASUS_STATIC_CXX Link stdc++ statically (default: OFF) PEGASUS_ENABLE_LTO Allow link-time optimizations, if the compiler supports this (but increasing build time) (default: ON) To explicitly tell where Qt and SDL is located, you can use CMAKE_PREFIX_PATH , which is a semicolon-separated list of search paths. For deployment, the standard GNUInstallDirs module is used, ie. on Linux most paths should have a correct default value. You can use CMAKE_INSTALL_PREFIX to set the root deployment directory. If you wish to customize the paths, use the following parameters: Option Description PEGASUS_INSTALLDIR The general deployment directory PEGASUS_INSTALL_BINDIR The deployment directory of the executable PEGASUS_INSTALL_DOCDIR The deployment directory of the license and readme files PEGASUS_INSTALL_DESKTOPDIR Linux only, the deployment directory of the XDG desktop file (making Pegasus appear in the main menu) PEGASUS_INSTALL_ICONDIR Linux only, the deployment directory of the XDG icon file there (making Pegasus have an icon on the tray and the menu) PEGASUS_INSTALL_APPSTREAMDIR Linux only, the deployment directory of the AppStream XML entry there (making Pegasus appear in certain app store applications)","title":"Using CMake"},{"location":"dev/build/#example_1","text":"cmake path/to/sources \\ -DCMAKE_PREFIX_PATH = \"/opt/Qt5;/opt/SDL2\" \\ -DCMAKE_INSTALL_PREFIX = /usr/ \\ -DPEGASUS_ENABLE_APNG = ON \\ -DPEGASUS_ENABLE_LTO = OFF","title":"Example"},{"location":"dev/cross-compile-qt/","text":"Cross compiling Qt for embedded platforms Danger Cross compiling Qt is not trivial, you'll need some experience setting it all up. If you'd just like to make Pegasus run on a new device, consider opening a new issue ! This documentation lists the configurations I personally use when building Qt. If the latest Qt is not available for your platform, or you're not pleased with it (eg. hardware acceleration is disabled), you'll need to build it manually. You can get the latest officially released source code from the Qt website, from here (select open source, click 'All downloads' on the bottom, then search for 'Source packages'). The general steps and requirements are described in the Qt documentation . Building Qt takes significant time, about 30-60 minutes on a good desktop PC, depending on the selected components. It requires at least 2 GB of RAM and 6.5 GB free space. Do not try to build it on your $5 board computer. Instead, you can cross compile Qt. Cross compilation means the program or library you build will run on a different architecture or platform than your own PC. For example, if you're on Linux, you can build programs that will run on Windows, or on a phone or embedded device. For this, you'll need a toolchain , a compiler that generates code for a certain platform, and a sysroot , a collection of libraries from the target device. Getting a toolchain and sysroot is different for every platform; you can find cross compilers for the popular targets, eg. ARMv7-Linux, while for others you might need to build a whole custom GCC. You'll have look around for them for your platform. For the Raspberry Pi cross compilation, this guide was very helpful: https://wiki.qt.io/RaspberryPi2EGLFS . This also shows how you can set up Qt Creator for testing and such. The configurations below are mainly based on the Debian automatic builds, and the guide mentioned above. If you haven't read the official Qt docs yet, do it now. The configure step produces a detailed status report; make sure everything looks correct. You'll need everything under QML and Qt Quick (except maybe DirectX 12), and depending on your platform, 'EGLFS' under 'QPA backends' and at least one of the 'EGLFS details', that matches your device (eg. EGLFS Rasberry Pi). You might also want the X11 options off, if you won't use it. See configure --help or the documentation for the available options. Raspbian sysroot The sysroot used for compilation is based on Raspbian, with the following additional packages installed: apt-get build-dep -y qt4-x11 libqt5gui5 apt-get install -y libudev-dev libinput-dev libts-dev libxcb-xinerama0-dev libxcb-xinerama0 apt-get install -y libopenal-dev libsqlite3-dev libfontconfig-dev apt-get install -y libglib2.0-dev gstreamer1.0-omx libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev apt-get install -y libsmbclient-dev libssh-dev libsdl2-dev Raspberry Pi 1 / Zero (ARMv6) toolchain: https://github.com/raspberrypi/tools , cloned to /opt/raspberrypi-tools sysroot: see Raspbian sysroot ../configure \\ -opensource \\ -confirm-license \\ -release \\ -strip \\ -no-rpath \\ -make libs \\ -skip qtwebengine \\ -skip wayland \\ -device linux-rasp-pi-g++ \\ -opengl es2 \\ -device-option CROSS_COMPILE=/opt/raspberrypi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf- \\ -sysroot /opt/rpi-sysroot \\ -prefix /opt/qt58-rpi1 \\ -extprefix /opt/qt58-rpi1 \\ -hostprefix /opt/qt58-rpi1_hosttools \\ -no-use-gold-linker \\ -openssl \\ -fontconfig \\ -gstreamer 1.0 \\ -no-xcb \\ -no-dbus \\ -no-glib \\ -no-icu \\ -system-zlib \\ -system-libpng \\ -system-libjpeg \\ -system-sqlite \\ -verbose Raspberry Pi 2 (ARMv7) / 3 (ARMv8, but v7 compatible) NOTE: The difference is the -device parameter and the output paths. toolchain: https://github.com/raspberrypi/tools , cloned to /opt/raspberrypi-tools sysroot: see Raspbian sysroot ../configure \\ -opensource \\ -confirm-license \\ -release \\ -strip \\ -no-rpath \\ -make libs \\ -skip qtwebengine \\ -skip wayland \\ -device linux-rasp-pi2-g++ \\ -opengl es2 \\ -device-option CROSS_COMPILE = /opt/raspberrypi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf- \\ -sysroot /opt/rpi-sysroot \\ -prefix /opt/qt58-rpi2 \\ -extprefix /opt/qt58-rpi2 \\ -hostprefix /opt/qt58-rpi2_hosttools \\ -no-use-gold-linker \\ -openssl \\ -fontconfig \\ -gstreamer 1 .0 \\ -no-xcb \\ -no-dbus \\ -no-glib \\ -no-icu \\ -system-zlib \\ -system-libpng \\ -system-libjpeg \\ -system-sqlite \\ -verbose X11 static build This was actually a native build, so the cross compilation options aren't needed. ../configure -opensource -confirm-license -release -strip -no-rpath -static -c++std c++11 -make libs -skip qtwebengine -skip wayland -prefix /opt/qt58-x11-static -openssl -gstreamer 1.0 -fontconfig -no-dbus -verbose -no-glib -qt-zlib -platform linux-g++ -no-icu -qpa xcb -xcb","title":"Cross compiling Qt"},{"location":"dev/cross-compile-qt/#cross-compiling-qt-for-embedded-platforms","text":"Danger Cross compiling Qt is not trivial, you'll need some experience setting it all up. If you'd just like to make Pegasus run on a new device, consider opening a new issue ! This documentation lists the configurations I personally use when building Qt. If the latest Qt is not available for your platform, or you're not pleased with it (eg. hardware acceleration is disabled), you'll need to build it manually. You can get the latest officially released source code from the Qt website, from here (select open source, click 'All downloads' on the bottom, then search for 'Source packages'). The general steps and requirements are described in the Qt documentation . Building Qt takes significant time, about 30-60 minutes on a good desktop PC, depending on the selected components. It requires at least 2 GB of RAM and 6.5 GB free space. Do not try to build it on your $5 board computer. Instead, you can cross compile Qt. Cross compilation means the program or library you build will run on a different architecture or platform than your own PC. For example, if you're on Linux, you can build programs that will run on Windows, or on a phone or embedded device. For this, you'll need a toolchain , a compiler that generates code for a certain platform, and a sysroot , a collection of libraries from the target device. Getting a toolchain and sysroot is different for every platform; you can find cross compilers for the popular targets, eg. ARMv7-Linux, while for others you might need to build a whole custom GCC. You'll have look around for them for your platform. For the Raspberry Pi cross compilation, this guide was very helpful: https://wiki.qt.io/RaspberryPi2EGLFS . This also shows how you can set up Qt Creator for testing and such. The configurations below are mainly based on the Debian automatic builds, and the guide mentioned above. If you haven't read the official Qt docs yet, do it now. The configure step produces a detailed status report; make sure everything looks correct. You'll need everything under QML and Qt Quick (except maybe DirectX 12), and depending on your platform, 'EGLFS' under 'QPA backends' and at least one of the 'EGLFS details', that matches your device (eg. EGLFS Rasberry Pi). You might also want the X11 options off, if you won't use it. See configure --help or the documentation for the available options.","title":"Cross compiling Qt for embedded platforms"},{"location":"dev/cross-compile-qt/#raspbian-sysroot","text":"The sysroot used for compilation is based on Raspbian, with the following additional packages installed: apt-get build-dep -y qt4-x11 libqt5gui5 apt-get install -y libudev-dev libinput-dev libts-dev libxcb-xinerama0-dev libxcb-xinerama0 apt-get install -y libopenal-dev libsqlite3-dev libfontconfig-dev apt-get install -y libglib2.0-dev gstreamer1.0-omx libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev apt-get install -y libsmbclient-dev libssh-dev libsdl2-dev","title":"Raspbian sysroot"},{"location":"dev/cross-compile-qt/#raspberry-pi-1-zero-armv6","text":"toolchain: https://github.com/raspberrypi/tools , cloned to /opt/raspberrypi-tools sysroot: see Raspbian sysroot ../configure \\ -opensource \\ -confirm-license \\ -release \\ -strip \\ -no-rpath \\ -make libs \\ -skip qtwebengine \\ -skip wayland \\ -device linux-rasp-pi-g++ \\ -opengl es2 \\ -device-option CROSS_COMPILE=/opt/raspberrypi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf- \\ -sysroot /opt/rpi-sysroot \\ -prefix /opt/qt58-rpi1 \\ -extprefix /opt/qt58-rpi1 \\ -hostprefix /opt/qt58-rpi1_hosttools \\ -no-use-gold-linker \\ -openssl \\ -fontconfig \\ -gstreamer 1.0 \\ -no-xcb \\ -no-dbus \\ -no-glib \\ -no-icu \\ -system-zlib \\ -system-libpng \\ -system-libjpeg \\ -system-sqlite \\ -verbose","title":"Raspberry Pi 1 / Zero (ARMv6)"},{"location":"dev/cross-compile-qt/#raspberry-pi-2-armv7-3-armv8-but-v7-compatible","text":"NOTE: The difference is the -device parameter and the output paths. toolchain: https://github.com/raspberrypi/tools , cloned to /opt/raspberrypi-tools sysroot: see Raspbian sysroot ../configure \\ -opensource \\ -confirm-license \\ -release \\ -strip \\ -no-rpath \\ -make libs \\ -skip qtwebengine \\ -skip wayland \\ -device linux-rasp-pi2-g++ \\ -opengl es2 \\ -device-option CROSS_COMPILE = /opt/raspberrypi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf- \\ -sysroot /opt/rpi-sysroot \\ -prefix /opt/qt58-rpi2 \\ -extprefix /opt/qt58-rpi2 \\ -hostprefix /opt/qt58-rpi2_hosttools \\ -no-use-gold-linker \\ -openssl \\ -fontconfig \\ -gstreamer 1 .0 \\ -no-xcb \\ -no-dbus \\ -no-glib \\ -no-icu \\ -system-zlib \\ -system-libpng \\ -system-libjpeg \\ -system-sqlite \\ -verbose","title":"Raspberry Pi 2 (ARMv7) / 3 (ARMv8, but v7 compatible)"},{"location":"dev/cross-compile-qt/#x11-static-build","text":"This was actually a native build, so the cross compilation options aren't needed. ../configure -opensource -confirm-license -release -strip -no-rpath -static -c++std c++11 -make libs -skip qtwebengine -skip wayland -prefix /opt/qt58-x11-static -openssl -gstreamer 1.0 -fontconfig -no-dbus -verbose -no-glib -qt-zlib -platform linux-g++ -no-icu -qpa xcb -xcb","title":"X11 static build"},{"location":"dev/deploy/","text":"Deployment Qt uses lots of modules, plugins and QML files, which may make it somewhat hard to create deployable packages manually. Fortunately, there are tools that can collect the necessary files for you. See the general Qt documentation here , especially the platform-specific notes. Since most of the details are described there, I'll just list the commands I usually use. Linux Static builds If you've manually built Qt as a static library, a simple make install will likely be enough. You can use linuxdeployqt to create AppImages: ./linuxdeployqt-continuous-x86_64.AppImage \\ -qmldir <build dir> \\ -bundle-non-qt-libs \\ <install dir> cp /path/to/libQt5Svg.so.5 ./lib/ ./linuxdeployqt-continuous-x86_64.AppImage \\ -appimage \\ <install dir> Windows windeployqt --release --qmldir <build dir> --no-translations --no-opengl-sw <installation dir> macOS make creates a regular .app release. Similarly to Linux, you can use it as-is for static builds, or use macdeployqt to collect the libraries and optionally generate a DMG file.","title":"Deployment"},{"location":"dev/deploy/#deployment","text":"Qt uses lots of modules, plugins and QML files, which may make it somewhat hard to create deployable packages manually. Fortunately, there are tools that can collect the necessary files for you. See the general Qt documentation here , especially the platform-specific notes. Since most of the details are described there, I'll just list the commands I usually use.","title":"Deployment"},{"location":"dev/deploy/#linux","text":"Static builds If you've manually built Qt as a static library, a simple make install will likely be enough. You can use linuxdeployqt to create AppImages: ./linuxdeployqt-continuous-x86_64.AppImage \\ -qmldir <build dir> \\ -bundle-non-qt-libs \\ <install dir> cp /path/to/libQt5Svg.so.5 ./lib/ ./linuxdeployqt-continuous-x86_64.AppImage \\ -appimage \\ <install dir>","title":"Linux"},{"location":"dev/deploy/#windows","text":"windeployqt --release --qmldir <build dir> --no-translations --no-opengl-sw <installation dir>","title":"Windows"},{"location":"dev/deploy/#macos","text":"make creates a regular .app release. Similarly to Linux, you can use it as-is for static builds, or use macdeployqt to collect the libraries and optionally generate a DMG file.","title":"macOS"},{"location":"dev/install-qt/","text":"Installing Qt for desktop Qt is a cross-platform application framework used by Pegasus. At least Qt 5.9 is required, with 5.12 or later recommended for better performance on embedded platforms. For desktop platforms you can get the Qt tools using their installer: Download the Qt installer Then walk through the installation, and select the component \"Desktop gcc\" (on Linux), \"MinGW\" (on Windows) or \"macOS\" (on macOS): Now you have the Qt libraries and the Qt Creator IDE installed. Components on Windows On Windows you can choose between MinGW and MSVC compiler packages. If you're planning to use Visual Studio and edit the source code, you can select the matching MSVC component instead of MinGW. Embedded These instructions are for desktop platforms. For embedded devices, you have to compile Qt manually, or use the prebuilt libraries available on Pegasus' GitHub page. See the cross compiling Qt page for more information. Alternative installations Linux On many Linux distros, the Qt libraries in the official repositories are often several years old (as a trade-off between stability and access to the latest software), or miss some components. Ubuntu, Debian Debian 10 (buster) and Ubuntu 19.04 or later contains up-to-date Qt releases, so building Pegasus should be possible using the following packages: libqt5gamepad5-dev libqt5svg5-dev qml-module-qtgraphicaleffects qml-module-qtmultimedia qtdeclarative5-dev qtmultimedia5-dev qttools5-dev-tools Earlier releases contain an up-to-date Qt release, but miss a few necessary packages. You can either use the Qt installer (see above), or use the following PPA: sudo add-apt-repository ppa:beineri/opt-qt-5.11.1-bionic sudo apt-get update sudo apt-get install \\ qt59declarative \\ qt59graphicaleffects \\ qt59gamepad \\ qt59imageformats \\ qt59multimedia \\ qt59svg \\ qt59tools source /opt/qt511/bin/qt511-env.sh To use this installation, you will need to call /opt/qt511/bin/qt511-env.sh (or /opt/qt59/bin/qt59-env.sh on 14.x/16.x) every time you open a new terminal. You can do this by adding the source ... line above to your ~/.bashrc file (or whatever shell you use). 16.04 and 14.04 On older Ubuntu releases, you can use ppa:beineri/opt-qt596-xenial and ppa:beineri/opt-qt596-trusty . Arch If you're using Arch , you can get Qt from AUR; here's the relevant wiki page . Windows MSYS2 Qt is available in the MSYS2 repos. See https://wiki.qt.io/MSYS2 . vcpkg At the time of writing, Qt 5.9 is available in vcpkg as a port. macOS Homebrew Qt is available in the Homebrew repos, but may not be up to date. See http://brewformulas.org/qt5 .","title":"Installing Qt"},{"location":"dev/install-qt/#installing-qt-for-desktop","text":"Qt is a cross-platform application framework used by Pegasus. At least Qt 5.9 is required, with 5.12 or later recommended for better performance on embedded platforms. For desktop platforms you can get the Qt tools using their installer: Download the Qt installer Then walk through the installation, and select the component \"Desktop gcc\" (on Linux), \"MinGW\" (on Windows) or \"macOS\" (on macOS): Now you have the Qt libraries and the Qt Creator IDE installed. Components on Windows On Windows you can choose between MinGW and MSVC compiler packages. If you're planning to use Visual Studio and edit the source code, you can select the matching MSVC component instead of MinGW. Embedded These instructions are for desktop platforms. For embedded devices, you have to compile Qt manually, or use the prebuilt libraries available on Pegasus' GitHub page. See the cross compiling Qt page for more information.","title":"Installing Qt for desktop"},{"location":"dev/install-qt/#alternative-installations","text":"","title":"Alternative installations"},{"location":"dev/install-qt/#linux","text":"On many Linux distros, the Qt libraries in the official repositories are often several years old (as a trade-off between stability and access to the latest software), or miss some components.","title":"Linux"},{"location":"dev/install-qt/#ubuntu-debian","text":"Debian 10 (buster) and Ubuntu 19.04 or later contains up-to-date Qt releases, so building Pegasus should be possible using the following packages: libqt5gamepad5-dev libqt5svg5-dev qml-module-qtgraphicaleffects qml-module-qtmultimedia qtdeclarative5-dev qtmultimedia5-dev qttools5-dev-tools Earlier releases contain an up-to-date Qt release, but miss a few necessary packages. You can either use the Qt installer (see above), or use the following PPA: sudo add-apt-repository ppa:beineri/opt-qt-5.11.1-bionic sudo apt-get update sudo apt-get install \\ qt59declarative \\ qt59graphicaleffects \\ qt59gamepad \\ qt59imageformats \\ qt59multimedia \\ qt59svg \\ qt59tools source /opt/qt511/bin/qt511-env.sh To use this installation, you will need to call /opt/qt511/bin/qt511-env.sh (or /opt/qt59/bin/qt59-env.sh on 14.x/16.x) every time you open a new terminal. You can do this by adding the source ... line above to your ~/.bashrc file (or whatever shell you use). 16.04 and 14.04 On older Ubuntu releases, you can use ppa:beineri/opt-qt596-xenial and ppa:beineri/opt-qt596-trusty .","title":"Ubuntu, Debian"},{"location":"dev/install-qt/#arch","text":"If you're using Arch , you can get Qt from AUR; here's the relevant wiki page .","title":"Arch"},{"location":"dev/install-qt/#windows","text":"","title":"Windows"},{"location":"dev/install-qt/#msys2","text":"Qt is available in the MSYS2 repos. See https://wiki.qt.io/MSYS2 .","title":"MSYS2"},{"location":"dev/install-qt/#vcpkg","text":"At the time of writing, Qt 5.9 is available in vcpkg as a port.","title":"vcpkg"},{"location":"dev/install-qt/#macos","text":"","title":"macOS"},{"location":"dev/install-qt/#homebrew","text":"Qt is available in the Homebrew repos, but may not be up to date. See http://brewformulas.org/qt5 .","title":"Homebrew"},{"location":"dev/meta-syntax/","text":"Metadata file format A metadata file is a human-readable text file based on the Debian control file format . The preferred file name is metadata.pegasus.txt , the preferred encoding is UTF-8 and the preferred line ending sequence is the standard line feed character (U+000A, \" \\n \"). The file contains a list of entries , where each entry has a name and one or more lines of values . For example the following file produces 3 entries: the first one has 1 value, the second has 2 and the third one has 3. name : single value name : value line 1 value line 2 name : value line 1 value line 2 value line 3 Syntax The metadata file is read line by line, and each line is expected to match one of the following four cases: If the line starts with # , the line is ignored If the line is empty or contains only whitespace characters, the line is ignored If the line starts with a non-whitespace character, it is expected to be in name: value format, which defines a new entry. The line is split at the very first : character found on the line, and any leading and trailing whitespace characters are ignored on both sides. The left side will be the name of the newly created entry: it must not be empty and must not contain the : character. The right side, if exists and not empty, will be the first value of the entry, otherwise the entry has no values at the moment. If the line starts with whitespace, value is added to the last defined entry after removing any leading or trailing whitespace. The cleaned value must not be empty. Note: key and value must not be empty after removing any leading and trailing whitespace characters Text merging After reading the file successfully, you will have a list of entries, each with a name and a list of values with at least one item in it. These entries can be used as-is to represent single values or list of values. However in case the values represent the lines of a flowing text, you might want to merge them together; if such text is expected to be a long text intended for display, this should be done with regards to the following rules: All lines should have no leading or trailing whitespace If a line consists of only a single dot . character, the line should be treated as a paragraph break (ie. an \"empty line\") The character sequence \\n should be replaced with a single line break Lines should be joined with a single space between them, unless one of them already has a whitespace character (ie. line or paragraph break) at the point of connection","title":"Metadata syntax"},{"location":"dev/meta-syntax/#metadata-file-format","text":"A metadata file is a human-readable text file based on the Debian control file format . The preferred file name is metadata.pegasus.txt , the preferred encoding is UTF-8 and the preferred line ending sequence is the standard line feed character (U+000A, \" \\n \"). The file contains a list of entries , where each entry has a name and one or more lines of values . For example the following file produces 3 entries: the first one has 1 value, the second has 2 and the third one has 3. name : single value name : value line 1 value line 2 name : value line 1 value line 2 value line 3","title":"Metadata file format"},{"location":"dev/meta-syntax/#syntax","text":"The metadata file is read line by line, and each line is expected to match one of the following four cases: If the line starts with # , the line is ignored If the line is empty or contains only whitespace characters, the line is ignored If the line starts with a non-whitespace character, it is expected to be in name: value format, which defines a new entry. The line is split at the very first : character found on the line, and any leading and trailing whitespace characters are ignored on both sides. The left side will be the name of the newly created entry: it must not be empty and must not contain the : character. The right side, if exists and not empty, will be the first value of the entry, otherwise the entry has no values at the moment. If the line starts with whitespace, value is added to the last defined entry after removing any leading or trailing whitespace. The cleaned value must not be empty. Note: key and value must not be empty after removing any leading and trailing whitespace characters","title":"Syntax"},{"location":"dev/meta-syntax/#text-merging","text":"After reading the file successfully, you will have a list of entries, each with a name and a list of values with at least one item in it. These entries can be used as-is to represent single values or list of values. However in case the values represent the lines of a flowing text, you might want to merge them together; if such text is expected to be a long text intended for display, this should be done with regards to the following rules: All lines should have no leading or trailing whitespace If a line consists of only a single dot . character, the line should be treated as a paragraph break (ie. an \"empty line\") The character sequence \\n should be replaced with a single line break Lines should be joined with a single space between them, unless one of them already has a whitespace character (ie. line or paragraph break) at the point of connection","title":"Text merging"},{"location":"dev/translate/","text":"Translations Pegasus supports most languages in use, and you can easily add new translations for any locale. The translations are stored in simple text files in XML format, so the only thing you need is a text editor. There's also a graphical tool to make things easier (see below). The translations themselves are collected in a separate repository here , which is also included as a Git submodule in the main Pegasus repo. In short (optional) download the Qt tools download the translation repo create a copy of pegasus_en.ts for your language open the new file in Qt Linguist or your editor of choice, and translate the strings open a new issue in the translation repo and attach your TS file Todo In the future, there'll be likely some kind of online site for managing translations. File format and name The translation files are text files in XML format, encoded in UTF-8. Their file name includes the BCP47 language tag of the locale the they're made for. Usually this means the following structure: pegasus_[language][-script][-country].ts where language is the language code, mentioned above. Two- or rarely three letters, lowercase. optionally, script defines the writing system, like simplified/traditional chinese or Old German Runes. Four letters, title case. optionally, country defines regional settings, which affects things like date format, usually. Two letters, uppercase. for example, hi-Deva-IN means Hindi language, Devanagari script, and the regional settings of India. Usually though the two letter language code is enough for most locales. Two letter language codes can be found here , and four letter script codes here . 1. Preparing the tools You can use any decent text editor to edit the files. There's also a graphical translation tool called Qt Linguist : Qt Linguist is included with Qt, see here . After installation, search for linguist in the installation directory of Qt (Linux) or the Start menu (Windows). 2. Prepare the translation files You can find the translation files in this repository . If you have no experience with Git, just click on the green Clone or download button, then Download ZIP . Then, create a copy of pegasus_en.ts , and change en to your locale's code (see above). Developer note You can create this file with lupdate ../src -ts pegasus_en.ts -no-obsolete . 3. Translate the file Open your new file in a text editor or in Qt Linguist. If you're using a text editor , the translatable strings are inside <message> tags: you can see the original text in the <source> tag, and you can provide your translation in <translation> . Also change the language tag on the top of the file ( <TS ...> ). If you're using Qt Linguist , first set your language in Edit -> Translation file settings -> Target language . After that, you can select a \"module\" (group of texts) on the left, then see the relevant strings in the upper-middle panel. You can add the translation in the center panel (marked with \"1\" on the picture above). Then press the green checkmark on the top toolbar (or press Ctrl+Enter) to jump to the next untranslated line. A detailed guide for Qt Linguist can be found here . Help %1 , %2 , ... in the text is a placeholder for additional values, such as numbers, file names, etc. screenshots for most of the translatable text can be found here 4. (optional) Rebuild Pegasus and test the translation At the moment, all translation files must be built into Pegasus. See the build documentation about how to rebuild the program. There's also a file called translations.qrc.in in the translations repository which lists the language files. It's another XML file that you can open in a text editor; simply add a new <file>pegasus_LOCALECODE.qm</file> entry (note the QM extension!). Note This step is only required for trying out the translation in-app. You can safely skip it if you don't want to deal with building Pegasus. 5. Open a pull request If you know Git, open a pull request in the translations repository . Alternatively, open a new issue and attach your translation (TS) file.","title":"Translations"},{"location":"dev/translate/#translations","text":"Pegasus supports most languages in use, and you can easily add new translations for any locale. The translations are stored in simple text files in XML format, so the only thing you need is a text editor. There's also a graphical tool to make things easier (see below). The translations themselves are collected in a separate repository here , which is also included as a Git submodule in the main Pegasus repo. In short (optional) download the Qt tools download the translation repo create a copy of pegasus_en.ts for your language open the new file in Qt Linguist or your editor of choice, and translate the strings open a new issue in the translation repo and attach your TS file Todo In the future, there'll be likely some kind of online site for managing translations.","title":"Translations"},{"location":"dev/translate/#file-format-and-name","text":"The translation files are text files in XML format, encoded in UTF-8. Their file name includes the BCP47 language tag of the locale the they're made for. Usually this means the following structure: pegasus_[language][-script][-country].ts where language is the language code, mentioned above. Two- or rarely three letters, lowercase. optionally, script defines the writing system, like simplified/traditional chinese or Old German Runes. Four letters, title case. optionally, country defines regional settings, which affects things like date format, usually. Two letters, uppercase. for example, hi-Deva-IN means Hindi language, Devanagari script, and the regional settings of India. Usually though the two letter language code is enough for most locales. Two letter language codes can be found here , and four letter script codes here .","title":"File format and name"},{"location":"dev/translate/#1-preparing-the-tools","text":"You can use any decent text editor to edit the files. There's also a graphical translation tool called Qt Linguist : Qt Linguist is included with Qt, see here . After installation, search for linguist in the installation directory of Qt (Linux) or the Start menu (Windows).","title":"1. Preparing the tools"},{"location":"dev/translate/#2-prepare-the-translation-files","text":"You can find the translation files in this repository . If you have no experience with Git, just click on the green Clone or download button, then Download ZIP . Then, create a copy of pegasus_en.ts , and change en to your locale's code (see above). Developer note You can create this file with lupdate ../src -ts pegasus_en.ts -no-obsolete .","title":"2. Prepare the translation files"},{"location":"dev/translate/#3-translate-the-file","text":"Open your new file in a text editor or in Qt Linguist. If you're using a text editor , the translatable strings are inside <message> tags: you can see the original text in the <source> tag, and you can provide your translation in <translation> . Also change the language tag on the top of the file ( <TS ...> ). If you're using Qt Linguist , first set your language in Edit -> Translation file settings -> Target language . After that, you can select a \"module\" (group of texts) on the left, then see the relevant strings in the upper-middle panel. You can add the translation in the center panel (marked with \"1\" on the picture above). Then press the green checkmark on the top toolbar (or press Ctrl+Enter) to jump to the next untranslated line. A detailed guide for Qt Linguist can be found here . Help %1 , %2 , ... in the text is a placeholder for additional values, such as numbers, file names, etc. screenshots for most of the translatable text can be found here","title":"3. Translate the file"},{"location":"dev/translate/#4-optional-rebuild-pegasus-and-test-the-translation","text":"At the moment, all translation files must be built into Pegasus. See the build documentation about how to rebuild the program. There's also a file called translations.qrc.in in the translations repository which lists the language files. It's another XML file that you can open in a text editor; simply add a new <file>pegasus_LOCALECODE.qm</file> entry (note the QM extension!). Note This step is only required for trying out the translation in-app. You can safely skip it if you don't want to deal with building Pegasus.","title":"4. (optional) Rebuild Pegasus and test the translation"},{"location":"dev/translate/#5-open-a-pull-request","text":"If you know Git, open a pull request in the translations repository . Alternatively, open a new issue and attach your translation (TS) file.","title":"5. Open a pull request"},{"location":"themes/api/","text":"API reference (alpha) All data provided by Pegasus can be accessed using a global QML object called api . It has the following main components: api.collections : the list of all collections api.allGames : the list of all games api.keys : the keyboard/gamepad configuration of the user api.memory : an object that can store theme specific settings api.device : information about the user's device Collections Games found by Pegasus are organized in collections, and one game may be present in multiple collections. The collections can be accessed trough api.collections , which is an item model (in short, a list of items). Each collection in it has the following properties: Property Description name The unique name of the collection, eg. \"Nintendo Entertainment System\", \"Mario Cartridges\", etc. sortBy A variation of the collections' name that should be used for sorting. By default, it's the same as name . shortName A short name for the collection, often an abbreviation like nes , mame , etc. Always in lowercase. If not set, defaults to the value of name . summary Short description (typically 2-3 sentences). description Longer description. games The list of games belonging to this collection; see \"Games\" below. All available collections are guaranteed to have at least one game. assets An object containing the default assets (see later). extra An object containing any extra properties (ie. x- ) set in metadata files. For example, if the game has x-something: Some cool text , you can reach the value by game.extra.something as JS string. Properties marked as \"optional\" might have no value (eg. empty string or empty array). All fields are read-only. Games Games can have metadata and various kinds of assets. The list of games belonging to a collection can be accessed using a collection's games field (see above). The list of all available games can be accessed through api.allGames . Both are item models . Each game in them has the following properties: Property Description title The game's title. sortBy A variation of the game's title that should be used for sorting. By default, it's the same as title . developer Developer(s) as a string. If there are more than one, they are separated with , . publisher Publisher(s) as a string. If there are more than one, they are separated with , . genre Genre(s) as a string. If there are more than one, they are separated with , . developerList The list of developers as an array. publisherList The list of publishers as an array. genreList The list of genres as an array. tagList The list of tags as an array. summary Short description (typically 2-3 sentences). description Longer description. release Release date as QML date . If not set, defaults to an invalid date. releaseYear Release year as integer. Defaults to 0. releaseMonth Release month as integer. Defaults to 0. releaseDay Release day as integer. Defaults to 0. players Maximum number of players. If not set, defaults to 1. rating Floating-point value between and including 0.0 and 1.0 (ie. 0% and 100%). If not set, defaults to 0.0 . favorite Boolean (true/false) value. If not set, defaults to false. This field is writable . playCount The number of times this games was launched. Defaults to 0. lastPlayed The last time this game was launched. A QML date value with time information. Defaults to an invalid date. playTime Play time in seconds, as a positive integer value. Defaults to 0. missing Boolean (true/false) value. Only set if 'Show Missing Games' is enabled. If not set, defaults to false. collections An item model , the list of Collection objects (see above) to which this Game belongs. Every Game belongs to at least one Collection, so this list is never empty. files An object containing the game's launchable files (see below). assets An object containing the game's assets (see later). extra An object containing any extra properties (ie. x- ) set in metadata files. For example, if the game has x-something: Some cool text , you can reach the value by game.extra.something as JS string. Properties marked as \"optional\" might have no value (eg. empty string or empty array). Unless otherwise noted, all fields are read-only. In addition, games have the following callable methods: Method Description launch() Launch this game. If the game has more than one launchable file, the default file selector of Pegasus will appear. Game files Experimental This section is experimental and may change in the future. Games can have more than one file to launch (disks, clones, mods, etc). Every game has a files object that contains the files belonging to the game. It has the following properties: Property Description name The pretty name of this file. path The path to this file. playCount The number of times this file was launched. Defaults to 0. lastPlayed The last time this file was launched. A QML date value with time information. Defaults to an invalid date. playTime Play time in seconds, as a positive integer value. Defaults to 0. Note At the moment name comes from the filename of the file. In the future, this could be set in the metadata format. In addition, games have the following callable methods: Method Description launch() Launch this game file. Launching a game file may fail, in which case the reason is logged (and in the future, will be shown to the user). If the game starts up successfully, Pegasus minimizes its resource usage and goes to the background while the game runs. On return, the theme will be reloaded -- if you wish it to remember something, you can use api.memory (see later on this page). Assets Every game and collection has an asset object that contains the assets that may belong to a game. It has the following properties. All of them are (local or remote) URLs as string, and all of them can be empty. Property Description boxFront The front of the game box boxBack The back of the game box boxSpine The spine (side) of the game box boxFull Full size box art (front + back + spine) cartridge Image of the game medium (cartridge, floppy, disk, etc.) logo The game's logo, usually the title art over a transparent background Property Description marquee A wide (often over 3:1) artwork on the top of arcade machines bezel Decoration around a game's screen on an arcade machine or emulator panel Control panel of the arcade machine cabinetLeft Left side of the arcade machine cabinetRight Right side of the arcade machine Property Description tile A square-sized image ( not the desktop icon) banner An image in 16:9 aspect ratio steam Steam grid icon, 460:215 ratio (most often 460x215, some people use 920x430) poster Advertisement poster, usually with 2:3 aspect ratio (in general a portrait-aligned image) background A background image, eg. artwork or selected screenshot music Background music screenshot A screenshot from the game titlescreen A screenshot of the game's title screen or main menu video A gameplay video or advertisement movie Multiple assets are also supported for all asset types. For each of the fields above, there is also a field with the suffix List under the asset object (eg. boxFront -> boxFrontList ). These are arrays of strings, and as such are usable as eg. model sources. Like the single-value fields, they can also be empty (ie. empty arrays). Tip In fact, the single-value variants just return the first value from their array variant, if there is anything in them, or an empty string if they are empty. Keys Controls configuration can be queried using the api.keys object, with the functions and members below. For each UI functionality (eg. \"accept\"), you can check whether a particular key/button is registered to that event, or get all of the registered keys as an array. Purpose Check function Array accept/select isAccept(keyevent) accept cancel/back isCancel(keyevent) cancel details isDetails(keyevent) details filters isFilters(keyevent) filters next page isNextPage(keyevent) nextPage previous page isPrevPage(keyevent) prevPage page up isPageUp(keyevent) pageUp page down isPageDown(keyevent) pageDown In themes, you typically handle keyboard and gamepad key presses/releases using Keys.onPressed and Keys.onReleased (see the Qt documentation ). The event object you receive there can be used as the parameter for the functions above. As for the key list querying, the returned array contains simple objects that have key and modifiers fields, like the real QML KeyEvent object (but nothing else). Example: Keys.onPressed: { if ( api . keys . isAccept ( event )) { event . accepted = true ; // do something } } Warning For regular navigation (ie. up/down/left/right), the QML KeyNavigation can be used (documentation here ). Navigation keys (arrows/dpad/left stick) cannot be changed at the moment. Memory Themes often want to remember data like custom options or the index of the last launched game or collection. To store the settings belonging to your theme, you can use api.memory . This is an object that contains key-value pairs (like a Map), and can be modified using the following methods: Method Description set(key, value) Sets the value belonging to key . If key already exists, its value will be overwritten. get(key) Returns the value belonging to key , if there is any, otherwise returns undefined . has(key) Returns true if key is set (has value), otherwise returns false. unset(key) Removes key and its value. key must be a string in all methods above, while value can be any JSON-compatible JavaScript type. Good places to use api.memory for example is when your theme loads ( Component.onCompleted ), unloads ( Component.onDestruction ) or the user starts a game. For example: ListView { id: mygamelist model: api . allGames delegate: Rectangle { MouseArea { anchors.fill: parent onClicked: launchGame ( modelData ) } } } Component.onCompleted: { mygamelist . currentIndex = api . memory . get ( 'gameIndex' ) || 0 ; } function launchGame ( game ) { api . memory . set ( 'gameIndex' , mygamelist . currentIndex ); game . launch (); } Device Some themes might want to display information about the real world, like current time or battery status. The api.device object provides some fields for that. However, as Pegasus is available for a number of various devices, note that not all features may be available on all platforms. Property Description batteryCharging A boolean (true/false) value, telling whether the device is currently charging its battery. If there's no battery, or the device doesn't support this property, the value will be false . batteryPercent The percentage of battery life left, as a fractional value between 0.0 (0%) and 1.0 (100%). If there's no battery, or the device doesn't support this property, the value will be NaN (not-a-number). You can use isNaN to check this. batterySeconds The remaining battery time, in seconds. If the device is charging, there's no battery, or the device doesn't support this property, the value will be 0 or negative. Battery update rate Battery information is updated in a slow rate, to reduce power consumption. Your theme should probably not depend on the values, but you can use them for informational purposes. Time For date and time you can use the the regular JavaScript features, like Date . There's also the QML date type for storing them as QML properties. Theme utilities Item models Item models are list of objects that support custom sorting and filtering, and can be used as the model property of QML Views (eg. ListView or PathView). See the Qt documentation for more details. For convenience, the modelData role is also provided for all item models mentioned in this documentation. Sometimes you may want to access the items of an item model manually, in which case you can use the following members: Field Description count Returns the number of items in the model (eg. api.allGames.count ). get(index) Returns a single item from the model located at index (eg. api.allGames.get(5) ). If index is not inside the model, null is returned. toVarArray() Returns a new array, containing the items of the model, in the same order. Sorting and filtering Item models can be sorted and filtered using SortFilterProxyModel . Please see the samples in the linked documentation for usage tips. The list of all available sorters and filters can be found here . For example, to get the list of all games ordered by play time, you could write a code similar to this: import SortFilterProxyModel 0.2 ... SortFilterProxyModel { id: mysorter sourceModel: api . allGames sorters: RoleSorter { roleName: \"playTime\" } } ListView { model: mysorter ... } Fonts Pegasus comes with a sans-serif and a sans-serif condensed font face, which are used in the main menu. If you want to use the same font families in your theme, you can access them using a global QML object called global.fonts . This has the following properties: Property Description sans The font family name of the sans-serif font condensed The font family name of the sans-serif condensed font You can use them as the value for font.family members of Text items, eg. font.family: global.fonts.sans . The default fonts currently in use are Roboto and Roboto Condensed .","title":"API reference"},{"location":"themes/api/#api-reference-alpha","text":"All data provided by Pegasus can be accessed using a global QML object called api . It has the following main components: api.collections : the list of all collections api.allGames : the list of all games api.keys : the keyboard/gamepad configuration of the user api.memory : an object that can store theme specific settings api.device : information about the user's device","title":"API reference (alpha)"},{"location":"themes/api/#collections","text":"Games found by Pegasus are organized in collections, and one game may be present in multiple collections. The collections can be accessed trough api.collections , which is an item model (in short, a list of items). Each collection in it has the following properties: Property Description name The unique name of the collection, eg. \"Nintendo Entertainment System\", \"Mario Cartridges\", etc. sortBy A variation of the collections' name that should be used for sorting. By default, it's the same as name . shortName A short name for the collection, often an abbreviation like nes , mame , etc. Always in lowercase. If not set, defaults to the value of name . summary Short description (typically 2-3 sentences). description Longer description. games The list of games belonging to this collection; see \"Games\" below. All available collections are guaranteed to have at least one game. assets An object containing the default assets (see later). extra An object containing any extra properties (ie. x- ) set in metadata files. For example, if the game has x-something: Some cool text , you can reach the value by game.extra.something as JS string. Properties marked as \"optional\" might have no value (eg. empty string or empty array). All fields are read-only.","title":"Collections"},{"location":"themes/api/#games","text":"Games can have metadata and various kinds of assets. The list of games belonging to a collection can be accessed using a collection's games field (see above). The list of all available games can be accessed through api.allGames . Both are item models . Each game in them has the following properties: Property Description title The game's title. sortBy A variation of the game's title that should be used for sorting. By default, it's the same as title . developer Developer(s) as a string. If there are more than one, they are separated with , . publisher Publisher(s) as a string. If there are more than one, they are separated with , . genre Genre(s) as a string. If there are more than one, they are separated with , . developerList The list of developers as an array. publisherList The list of publishers as an array. genreList The list of genres as an array. tagList The list of tags as an array. summary Short description (typically 2-3 sentences). description Longer description. release Release date as QML date . If not set, defaults to an invalid date. releaseYear Release year as integer. Defaults to 0. releaseMonth Release month as integer. Defaults to 0. releaseDay Release day as integer. Defaults to 0. players Maximum number of players. If not set, defaults to 1. rating Floating-point value between and including 0.0 and 1.0 (ie. 0% and 100%). If not set, defaults to 0.0 . favorite Boolean (true/false) value. If not set, defaults to false. This field is writable . playCount The number of times this games was launched. Defaults to 0. lastPlayed The last time this game was launched. A QML date value with time information. Defaults to an invalid date. playTime Play time in seconds, as a positive integer value. Defaults to 0. missing Boolean (true/false) value. Only set if 'Show Missing Games' is enabled. If not set, defaults to false. collections An item model , the list of Collection objects (see above) to which this Game belongs. Every Game belongs to at least one Collection, so this list is never empty. files An object containing the game's launchable files (see below). assets An object containing the game's assets (see later). extra An object containing any extra properties (ie. x- ) set in metadata files. For example, if the game has x-something: Some cool text , you can reach the value by game.extra.something as JS string. Properties marked as \"optional\" might have no value (eg. empty string or empty array). Unless otherwise noted, all fields are read-only. In addition, games have the following callable methods: Method Description launch() Launch this game. If the game has more than one launchable file, the default file selector of Pegasus will appear.","title":"Games"},{"location":"themes/api/#game-files","text":"Experimental This section is experimental and may change in the future. Games can have more than one file to launch (disks, clones, mods, etc). Every game has a files object that contains the files belonging to the game. It has the following properties: Property Description name The pretty name of this file. path The path to this file. playCount The number of times this file was launched. Defaults to 0. lastPlayed The last time this file was launched. A QML date value with time information. Defaults to an invalid date. playTime Play time in seconds, as a positive integer value. Defaults to 0. Note At the moment name comes from the filename of the file. In the future, this could be set in the metadata format. In addition, games have the following callable methods: Method Description launch() Launch this game file. Launching a game file may fail, in which case the reason is logged (and in the future, will be shown to the user). If the game starts up successfully, Pegasus minimizes its resource usage and goes to the background while the game runs. On return, the theme will be reloaded -- if you wish it to remember something, you can use api.memory (see later on this page).","title":"Game files"},{"location":"themes/api/#assets","text":"Every game and collection has an asset object that contains the assets that may belong to a game. It has the following properties. All of them are (local or remote) URLs as string, and all of them can be empty. Property Description boxFront The front of the game box boxBack The back of the game box boxSpine The spine (side) of the game box boxFull Full size box art (front + back + spine) cartridge Image of the game medium (cartridge, floppy, disk, etc.) logo The game's logo, usually the title art over a transparent background Property Description marquee A wide (often over 3:1) artwork on the top of arcade machines bezel Decoration around a game's screen on an arcade machine or emulator panel Control panel of the arcade machine cabinetLeft Left side of the arcade machine cabinetRight Right side of the arcade machine Property Description tile A square-sized image ( not the desktop icon) banner An image in 16:9 aspect ratio steam Steam grid icon, 460:215 ratio (most often 460x215, some people use 920x430) poster Advertisement poster, usually with 2:3 aspect ratio (in general a portrait-aligned image) background A background image, eg. artwork or selected screenshot music Background music screenshot A screenshot from the game titlescreen A screenshot of the game's title screen or main menu video A gameplay video or advertisement movie Multiple assets are also supported for all asset types. For each of the fields above, there is also a field with the suffix List under the asset object (eg. boxFront -> boxFrontList ). These are arrays of strings, and as such are usable as eg. model sources. Like the single-value fields, they can also be empty (ie. empty arrays). Tip In fact, the single-value variants just return the first value from their array variant, if there is anything in them, or an empty string if they are empty.","title":"Assets"},{"location":"themes/api/#keys","text":"Controls configuration can be queried using the api.keys object, with the functions and members below. For each UI functionality (eg. \"accept\"), you can check whether a particular key/button is registered to that event, or get all of the registered keys as an array. Purpose Check function Array accept/select isAccept(keyevent) accept cancel/back isCancel(keyevent) cancel details isDetails(keyevent) details filters isFilters(keyevent) filters next page isNextPage(keyevent) nextPage previous page isPrevPage(keyevent) prevPage page up isPageUp(keyevent) pageUp page down isPageDown(keyevent) pageDown In themes, you typically handle keyboard and gamepad key presses/releases using Keys.onPressed and Keys.onReleased (see the Qt documentation ). The event object you receive there can be used as the parameter for the functions above. As for the key list querying, the returned array contains simple objects that have key and modifiers fields, like the real QML KeyEvent object (but nothing else). Example: Keys.onPressed: { if ( api . keys . isAccept ( event )) { event . accepted = true ; // do something } } Warning For regular navigation (ie. up/down/left/right), the QML KeyNavigation can be used (documentation here ). Navigation keys (arrows/dpad/left stick) cannot be changed at the moment.","title":"Keys"},{"location":"themes/api/#memory","text":"Themes often want to remember data like custom options or the index of the last launched game or collection. To store the settings belonging to your theme, you can use api.memory . This is an object that contains key-value pairs (like a Map), and can be modified using the following methods: Method Description set(key, value) Sets the value belonging to key . If key already exists, its value will be overwritten. get(key) Returns the value belonging to key , if there is any, otherwise returns undefined . has(key) Returns true if key is set (has value), otherwise returns false. unset(key) Removes key and its value. key must be a string in all methods above, while value can be any JSON-compatible JavaScript type. Good places to use api.memory for example is when your theme loads ( Component.onCompleted ), unloads ( Component.onDestruction ) or the user starts a game. For example: ListView { id: mygamelist model: api . allGames delegate: Rectangle { MouseArea { anchors.fill: parent onClicked: launchGame ( modelData ) } } } Component.onCompleted: { mygamelist . currentIndex = api . memory . get ( 'gameIndex' ) || 0 ; } function launchGame ( game ) { api . memory . set ( 'gameIndex' , mygamelist . currentIndex ); game . launch (); }","title":"Memory"},{"location":"themes/api/#device","text":"Some themes might want to display information about the real world, like current time or battery status. The api.device object provides some fields for that. However, as Pegasus is available for a number of various devices, note that not all features may be available on all platforms. Property Description batteryCharging A boolean (true/false) value, telling whether the device is currently charging its battery. If there's no battery, or the device doesn't support this property, the value will be false . batteryPercent The percentage of battery life left, as a fractional value between 0.0 (0%) and 1.0 (100%). If there's no battery, or the device doesn't support this property, the value will be NaN (not-a-number). You can use isNaN to check this. batterySeconds The remaining battery time, in seconds. If the device is charging, there's no battery, or the device doesn't support this property, the value will be 0 or negative. Battery update rate Battery information is updated in a slow rate, to reduce power consumption. Your theme should probably not depend on the values, but you can use them for informational purposes. Time For date and time you can use the the regular JavaScript features, like Date . There's also the QML date type for storing them as QML properties.","title":"Device"},{"location":"themes/api/#theme-utilities","text":"","title":"Theme utilities"},{"location":"themes/api/#item-models","text":"Item models are list of objects that support custom sorting and filtering, and can be used as the model property of QML Views (eg. ListView or PathView). See the Qt documentation for more details. For convenience, the modelData role is also provided for all item models mentioned in this documentation. Sometimes you may want to access the items of an item model manually, in which case you can use the following members: Field Description count Returns the number of items in the model (eg. api.allGames.count ). get(index) Returns a single item from the model located at index (eg. api.allGames.get(5) ). If index is not inside the model, null is returned. toVarArray() Returns a new array, containing the items of the model, in the same order.","title":"Item models"},{"location":"themes/api/#sorting-and-filtering","text":"Item models can be sorted and filtered using SortFilterProxyModel . Please see the samples in the linked documentation for usage tips. The list of all available sorters and filters can be found here . For example, to get the list of all games ordered by play time, you could write a code similar to this: import SortFilterProxyModel 0.2 ... SortFilterProxyModel { id: mysorter sourceModel: api . allGames sorters: RoleSorter { roleName: \"playTime\" } } ListView { model: mysorter ... }","title":"Sorting and filtering"},{"location":"themes/api/#fonts","text":"Pegasus comes with a sans-serif and a sans-serif condensed font face, which are used in the main menu. If you want to use the same font families in your theme, you can access them using a global QML object called global.fonts . This has the following properties: Property Description sans The font family name of the sans-serif font condensed The font family name of the sans-serif condensed font You can use them as the value for font.family members of Text items, eg. font.family: global.fonts.sans . The default fonts currently in use are Roboto and Roboto Condensed .","title":"Fonts"},{"location":"themes/example-flixnet-ch1/","text":"Flixnet theme, Part 1: Base layout In this part we'll create the required theme files, plan out how the layout should look like and implement it in QML. Initial files I'm on Linux, so my theme directory is at ~/.config/pegasus-frontend/themes . I'm creating a new directory called flixnet-tutorial , and in it my theme.cfg , like this: name : Flixnet tutorial author : M\u00e1ty\u00e1s Mustoha and the basic theme.qml : import QtQuick 2.0 FocusScope { } Now I open Pegasus and select this theme on the Settings screen. I'll keep Pegasus open during the development, and refresh the theme with the F5 key. I also open the main log file ~/.config/pegasus-frontend/lastrun.log which will tell me if I've made any errors in the QML file. Tip You can use whatever text editor you like. Qt Creator is cross platform, has good auto-complete and syntax highlight features. For a more lightweight editor, Sublime Text with the QML package, Atom or Notepad++ could be used, among others. Note You might see .qmlc files popping up in your theme's directory. These are cache files, generated for faster loading. When copying the theme to a different machine, you don't have to bring them, they'll automatically get generated the next time you launch Pegasus. Some planning If we simplify it a bit, here's how its structure and navigation looks like: As you can see, there are two main axes of motion: a horizontal game axis for each collection's games a vertical collection axis for selecting a collection Each row can be individually scrolled, and the currently selected game is the topmost row's first (fully visible) item. Furthermore, the rows themselves can also be scrolled vertically. This kind of layout makes the theme a bit complex, but other than these axes the rest of the theme seems to be simple enough. The game selection layout will take the whole lower half of the screen. On a standard 16:9 screen I want to show 2 rows of games to appear, and incrementally more on screens with smaller aspect ratios. Using Pegasus' virtual pixel values, I can design the theme for a screen with at least 720px height, and the values will scale appropriately for other resolutions. Based on that, if the height of the list is half the screen's height, I'll have 360px at least if I want to show two rows, one row's full height in the list will be 180px I'll use 18px font size for the collection's name to have some space around the text, I'll use 250% line height; that's 45px out of the 180px so far I'm left with 135px height to use for the game boxes the game boxes will have a 16:9 aspect ratio, so their width will be 240px Ok, let's start coding! Initial layout Let's start with the hard part, the layout on the bottom half. This is a vertically scrollable list of horizontally scrollable lists, each containing boxes for the games. Because collections are what contain the games, I'll first start making the vertical axis that selects the collection, and then add the horizontal game selection after that. I'll write a rough initial structure first, as once you have the basic layout done, you can tweak the elements as much as you want. Vertical axis A simple type for laying out a variable amount of items with one of them being selected is ListView . I set it up so it takes the whole lower half of the screen: import QtQuick 2.0 FocusScope { ListView { id: collectionAxis anchors.left: parent . left anchors.right: parent . right anchors.top: parent . verticalCenter anchors.bottom: parent . bottom } } One element of this collection axis will have 180px height and the width is the whole width of the screen. I'll create a placeholder for now and add a fake model (a series of numbers) for testing (so you can see that they indeed come in order, and the ListView has the correct amount of items): import QtQuick 2.0 FocusScope { ListView { id: collectionAxis anchors.left: parent . left anchors.right: parent . right anchors.top: parent . verticalCenter anchors.bottom: parent . bottom model: 10 // just some random number delegate: Rectangle { width: ListView . view . width height: vpx ( 180 ) color: \"blue\" } } } If you now refresh Pegasus, you'll see the lower half of the screen turned blue. Yay! vpx The function vpx is what you can use for virtual pixel values. It scales up or down the pixel value you put into it depending on the actual screen resolution. delegate The visual element of a list is called delegate . For every data item of the model (in this case, for every number between 0 and 9), a delegate will be created. The code looks good so far, I'll just make a small change: the delegate will likely get more complex later, so to make it easier to read, I'll move it out into a separate Component : import QtQuick 2.0 FocusScope { ListView { id: collectionAxis anchors.left: parent . left anchors.right: parent . right anchors.top: parent . verticalCenter anchors.bottom: parent . bottom model: 10 delegate: collectionAxisDelegate } Component { id: collectionAxisDelegate Rectangle { width: ListView . view . width height: vpx ( 180 ) color: \"blue\" } } } Tip Component is a special element that defines a QML document. Actually, you could even move the Rectangle to a new file (eg. CollectionAxisDelegate.qml ) and use the file's name to set the delegate (eg. delegate: CollectionAxisDelegate { } ). Horizontal axis The rows of the collection axis will consist of two things: a Text label that shows the collection's name and a ListView that shows its games. Because a Component can have only one child, I'll turn the Rectangle into an Item (an otherwise invisible container), and put a Text and a ListView into it. Note Just as individual QML files can have only one root element, Component can have only one child. First I'll add the collection label: import QtQuick 2.0 FocusScope { ListView { id: collectionAxis // ... } Component { id: collectionAxisDelegate Item { width: ListView . view . width height: vpx ( 180 ) Text { id: label // `modelData` is the item in the list's model // for which this delegate is created for; // in this case a number between 0-9 text: modelData // white, bold 18px font, using Pegasus' default font family color: \"white\" font.pixelSize: vpx ( 18 ) font.family: globalFonts . sans font.bold: true // make the line height 45px high // and center the text vertically in it height: vpx ( 45 ) verticalAlignment: Text . AlignVCenter } } } } If you refresh the theme in Pegasus, you'll now see the numbers \"0\" and \"1\" at where we'd expect the labels. I'll now add the horizontal ListView : Component { id: collectionAxisDelegate Item { width: ListView . view . width height: vpx ( 180 ) Text { id: label // ... } ListView { id: gameAxis // span from left to right, from the label's bottom to the row's bottom anchors.left: parent . left anchors.right: parent . right anchors.top: label . bottom anchors.bottom: parent . bottom // this one goes horizontal! orientation: ListView . Horizontal } } } We'll need a model and a delegate item to actually see something. Let's create some dummy items: import QtQuick 2.0 FocusScope { // ... Component { id: collectionAxisDelegate Item { // ... ListView { id: gameAxis anchors.left: parent . left anchors.right: parent . right anchors.top: label . bottom anchors.bottom: parent . bottom orientation: ListView . Horizontal model: 20 delegate: gameAxisDelegate spacing: vpx ( 10 ) // some spacing to make it look fancy } } } // this is one item of the horizontal axis, ie. a \"game box\" Component { id: gameAxisDelegate Rectangle { // as we calculated previously width: vpx ( 240 ) height: vpx ( 135 ) color: \"green\" Text { // will become a number between 0-19 text: modelData } } } } And here's how it should look so far: Not the most beautiful yet, however with this we're done with the basics of the main layout. From now on we'll just have tweak these lists and delegates, then add some simple components for the metadata. The code so far #1 Here's the whole code so far (without comments to save space): The code so far #1 import QtQuick 2.0 FocusScope { ListView { id: collectionAxis anchors.left: parent . left anchors.right: parent . right anchors.top: parent . verticalCenter anchors.bottom: parent . bottom model: 10 delegate: collectionAxisDelegate } Component { id: collectionAxisDelegate Item { width: ListView . view . width height: vpx ( 180 ) Text { id: label text: modelData color: \"white\" font.pixelSize: vpx ( 18 ) font.family: globalFonts . sans height: vpx ( 45 ) verticalAlignment: Text . AlignVCenter } ListView { id: gameAxis anchors.left: parent . left anchors.right: parent . right anchors.top: label . bottom anchors.bottom: parent . bottom orientation: ListView . Horizontal model: 20 delegate: gameAxisDelegate spacing: vpx ( 10 ) } } } Component { id: gameAxisDelegate Rectangle { width: vpx ( 240 ) height: vpx ( 135 ) color: \"green\" Text { text: modelData } } } }","title":"Part 1"},{"location":"themes/example-flixnet-ch1/#flixnet-theme-part-1-base-layout","text":"In this part we'll create the required theme files, plan out how the layout should look like and implement it in QML.","title":"Flixnet theme, Part 1: Base layout"},{"location":"themes/example-flixnet-ch1/#initial-files","text":"I'm on Linux, so my theme directory is at ~/.config/pegasus-frontend/themes . I'm creating a new directory called flixnet-tutorial , and in it my theme.cfg , like this: name : Flixnet tutorial author : M\u00e1ty\u00e1s Mustoha and the basic theme.qml : import QtQuick 2.0 FocusScope { } Now I open Pegasus and select this theme on the Settings screen. I'll keep Pegasus open during the development, and refresh the theme with the F5 key. I also open the main log file ~/.config/pegasus-frontend/lastrun.log which will tell me if I've made any errors in the QML file. Tip You can use whatever text editor you like. Qt Creator is cross platform, has good auto-complete and syntax highlight features. For a more lightweight editor, Sublime Text with the QML package, Atom or Notepad++ could be used, among others. Note You might see .qmlc files popping up in your theme's directory. These are cache files, generated for faster loading. When copying the theme to a different machine, you don't have to bring them, they'll automatically get generated the next time you launch Pegasus.","title":"Initial files"},{"location":"themes/example-flixnet-ch1/#some-planning","text":"If we simplify it a bit, here's how its structure and navigation looks like: As you can see, there are two main axes of motion: a horizontal game axis for each collection's games a vertical collection axis for selecting a collection Each row can be individually scrolled, and the currently selected game is the topmost row's first (fully visible) item. Furthermore, the rows themselves can also be scrolled vertically. This kind of layout makes the theme a bit complex, but other than these axes the rest of the theme seems to be simple enough. The game selection layout will take the whole lower half of the screen. On a standard 16:9 screen I want to show 2 rows of games to appear, and incrementally more on screens with smaller aspect ratios. Using Pegasus' virtual pixel values, I can design the theme for a screen with at least 720px height, and the values will scale appropriately for other resolutions. Based on that, if the height of the list is half the screen's height, I'll have 360px at least if I want to show two rows, one row's full height in the list will be 180px I'll use 18px font size for the collection's name to have some space around the text, I'll use 250% line height; that's 45px out of the 180px so far I'm left with 135px height to use for the game boxes the game boxes will have a 16:9 aspect ratio, so their width will be 240px Ok, let's start coding!","title":"Some planning"},{"location":"themes/example-flixnet-ch1/#initial-layout","text":"Let's start with the hard part, the layout on the bottom half. This is a vertically scrollable list of horizontally scrollable lists, each containing boxes for the games. Because collections are what contain the games, I'll first start making the vertical axis that selects the collection, and then add the horizontal game selection after that. I'll write a rough initial structure first, as once you have the basic layout done, you can tweak the elements as much as you want.","title":"Initial layout"},{"location":"themes/example-flixnet-ch1/#vertical-axis","text":"A simple type for laying out a variable amount of items with one of them being selected is ListView . I set it up so it takes the whole lower half of the screen: import QtQuick 2.0 FocusScope { ListView { id: collectionAxis anchors.left: parent . left anchors.right: parent . right anchors.top: parent . verticalCenter anchors.bottom: parent . bottom } } One element of this collection axis will have 180px height and the width is the whole width of the screen. I'll create a placeholder for now and add a fake model (a series of numbers) for testing (so you can see that they indeed come in order, and the ListView has the correct amount of items): import QtQuick 2.0 FocusScope { ListView { id: collectionAxis anchors.left: parent . left anchors.right: parent . right anchors.top: parent . verticalCenter anchors.bottom: parent . bottom model: 10 // just some random number delegate: Rectangle { width: ListView . view . width height: vpx ( 180 ) color: \"blue\" } } } If you now refresh Pegasus, you'll see the lower half of the screen turned blue. Yay! vpx The function vpx is what you can use for virtual pixel values. It scales up or down the pixel value you put into it depending on the actual screen resolution. delegate The visual element of a list is called delegate . For every data item of the model (in this case, for every number between 0 and 9), a delegate will be created. The code looks good so far, I'll just make a small change: the delegate will likely get more complex later, so to make it easier to read, I'll move it out into a separate Component : import QtQuick 2.0 FocusScope { ListView { id: collectionAxis anchors.left: parent . left anchors.right: parent . right anchors.top: parent . verticalCenter anchors.bottom: parent . bottom model: 10 delegate: collectionAxisDelegate } Component { id: collectionAxisDelegate Rectangle { width: ListView . view . width height: vpx ( 180 ) color: \"blue\" } } } Tip Component is a special element that defines a QML document. Actually, you could even move the Rectangle to a new file (eg. CollectionAxisDelegate.qml ) and use the file's name to set the delegate (eg. delegate: CollectionAxisDelegate { } ).","title":"Vertical axis"},{"location":"themes/example-flixnet-ch1/#horizontal-axis","text":"The rows of the collection axis will consist of two things: a Text label that shows the collection's name and a ListView that shows its games. Because a Component can have only one child, I'll turn the Rectangle into an Item (an otherwise invisible container), and put a Text and a ListView into it. Note Just as individual QML files can have only one root element, Component can have only one child. First I'll add the collection label: import QtQuick 2.0 FocusScope { ListView { id: collectionAxis // ... } Component { id: collectionAxisDelegate Item { width: ListView . view . width height: vpx ( 180 ) Text { id: label // `modelData` is the item in the list's model // for which this delegate is created for; // in this case a number between 0-9 text: modelData // white, bold 18px font, using Pegasus' default font family color: \"white\" font.pixelSize: vpx ( 18 ) font.family: globalFonts . sans font.bold: true // make the line height 45px high // and center the text vertically in it height: vpx ( 45 ) verticalAlignment: Text . AlignVCenter } } } } If you refresh the theme in Pegasus, you'll now see the numbers \"0\" and \"1\" at where we'd expect the labels. I'll now add the horizontal ListView : Component { id: collectionAxisDelegate Item { width: ListView . view . width height: vpx ( 180 ) Text { id: label // ... } ListView { id: gameAxis // span from left to right, from the label's bottom to the row's bottom anchors.left: parent . left anchors.right: parent . right anchors.top: label . bottom anchors.bottom: parent . bottom // this one goes horizontal! orientation: ListView . Horizontal } } } We'll need a model and a delegate item to actually see something. Let's create some dummy items: import QtQuick 2.0 FocusScope { // ... Component { id: collectionAxisDelegate Item { // ... ListView { id: gameAxis anchors.left: parent . left anchors.right: parent . right anchors.top: label . bottom anchors.bottom: parent . bottom orientation: ListView . Horizontal model: 20 delegate: gameAxisDelegate spacing: vpx ( 10 ) // some spacing to make it look fancy } } } // this is one item of the horizontal axis, ie. a \"game box\" Component { id: gameAxisDelegate Rectangle { // as we calculated previously width: vpx ( 240 ) height: vpx ( 135 ) color: \"green\" Text { // will become a number between 0-19 text: modelData } } } } And here's how it should look so far: Not the most beautiful yet, however with this we're done with the basics of the main layout. From now on we'll just have tweak these lists and delegates, then add some simple components for the metadata.","title":"Horizontal axis"},{"location":"themes/example-flixnet-ch1/#the-code-so-far-1","text":"Here's the whole code so far (without comments to save space): The code so far #1 import QtQuick 2.0 FocusScope { ListView { id: collectionAxis anchors.left: parent . left anchors.right: parent . right anchors.top: parent . verticalCenter anchors.bottom: parent . bottom model: 10 delegate: collectionAxisDelegate } Component { id: collectionAxisDelegate Item { width: ListView . view . width height: vpx ( 180 ) Text { id: label text: modelData color: \"white\" font.pixelSize: vpx ( 18 ) font.family: globalFonts . sans height: vpx ( 45 ) verticalAlignment: Text . AlignVCenter } ListView { id: gameAxis anchors.left: parent . left anchors.right: parent . right anchors.top: label . bottom anchors.bottom: parent . bottom orientation: ListView . Horizontal model: 20 delegate: gameAxisDelegate spacing: vpx ( 10 ) } } } Component { id: gameAxisDelegate Rectangle { width: vpx ( 240 ) height: vpx ( 135 ) color: \"green\" Text { text: modelData } } } }","title":"The code so far #1"},{"location":"themes/example-flixnet-ch2/","text":"Flixnet theme, Part 2: Navigation You might have noticed that the components react already to mouse drag or scroll, but keyboard and gamepad input doesn't work yet. Let's fix this! Vertical scroll Simply add focus: true to the collection axis: ListView { id: collectionAxis // ... focus: true } You can now scroll the bars with Up and Down , but... it's kind of weird right now. It'd be better for the items to \"snap\" to their place, to scroll to the next item when we press a button. This can be fixed with the snapMode and highlightRangeMode properties: setting snapMode keeps the elements organized when scrolling the list as a whole, while highlightRangeMode will make sure the selection follows the scrolling (that is, when you press Up or Down , you actually select the next or previous element, not just view a different part of the list). ListView { id: collectionAxis // ... snapMode: ListView . SnapOneItem highlightRangeMode: ListView . StrictlyEnforceRange focus: true } There, much better now. Tip Setting up the keyboard input also makes gamepads work. Check the Controls page to see how are they related. By default, every delegate that is at least partially in the ListView's area is fully drawn. To make sure only the rows in the lower half of the screen are visible, I set clip on the ListView : ListView { id: collectionAxis // ... snapMode: ListView . SnapOneItem highlightRangeMode: ListView . StrictlyEnforceRange clip: true focus: true } Horizontal scroll We have a somewhat complex layout -- scrollable items inside a scrollable item; we can't just set focus: true here, since that'd mean we set it for each row, and end up with scrolling one we don't want. However, every ListView has select-next and select-previous function we can use ( incrementCurrentIndex() , decrementCurrentIndex() ), and the currently selected item can be accessed through currentItem . In this case, the currentItem of collectionAxis will be the Item element inside collectionAxisDelegate : Component { id: collectionAxisDelegate // this one! Item { width: ListView . view . width height: vpx ( 180 ) Text { id: label // ... } ListView { id: gameAxis // ... } } } But how can we access the ListView, gameAxis of the Item? Turns out we can't just use its id , as it's not accessible by external element (we'll get an error about gameAxis being undefined). Function definitions and property members, however, can be accessed. For now, I'll simply create an alias property for the horizontal axis: Component { id: collectionAxisDelegate Item { property alias axis: gameAxis width: ListView . view . width height: vpx ( 180 ) Text { id: label // ... } ListView { id: gameAxis // ... } } } We can now access the game axis of the current collection as currentItem.axis (see below). Note Yes, you can also write it like property alias gameAxis: gameAxis , I simply preferred the different name in this case. Combining the ListView functions, currentItem and manual keyboard handling ( Keys ), we can now make the horizontal scrolling work with: ListView { id: collectionAxis // ... focus: true Keys.onLeftPressed: currentItem . axis . decrementCurrentIndex () Keys.onRightPressed: currentItem . axis . incrementCurrentIndex () } ...which, similarly to the vertical axis, initially scrolls in a not so nice way. Fix it like previously, but in the delegate: ListView { id: gameAxis anchors.left: parent . left anchors.right: parent . right anchors.top: label . bottom anchors.bottom: parent . bottom orientation: ListView . Horizontal model: 100 delegate: gameAxisDelegate spacing: vpx ( 10 ) snapMode: ListView . SnapOneItem highlightRangeMode: ListView . StrictlyEnforceRange } And now both directions should scroll finely! Tip To see that the current item indeed changes, you could set the color of the gameAxisDelegate 's Rectangle to: color: ListView . isCurrentItem ? \"orange\" : \"green\" Left margin There's a small margin on the left that shows the game before the currently selected one. We don't want to reduce the size of the horizontal ListView s (they should fill the whole width of the screen), we just want to move the currently selected item a little bit right. For this, we can use the preferredHighlightBegin / End members of the ListView s: they can be used to define a fixed position range (in pixels) where the currently selected element should reside. I'll set a 100px offset like this: ListView { id: gameAxis // ... preferredHighlightBegin: vpx ( 100 ) preferredHighlightEnd: preferredHighlightBegin + vpx ( 240 ) // the width of one game box } Help preferredHighlightBegin and preferredHighlightEnd almost always come in pair, and End must be greater or equal than Begin to have their effect applied. We also need to move the collection label too. As it's just a regular Text element, I'll simply set its left anchor and a margin on it: Component { id: collectionAxisDelegate Item { // ... Text { id: label // ... anchors.left: parent . left anchors.leftMargin: vpx ( 100 ) } ListView { id: gameAxis // ... } } } Note The anchor margin is only applied if the anchor itself is defined. Tip You can also use the Text item's leftPadding property. This feature was added in Qt 5.6 (as mentioned in the official documentation ), so you'll need to change the import command on the top of the QML file to import QtQuick 2.6 or higher (Pegasus comes with Qt 5.9 at the moment).","title":"Part 2"},{"location":"themes/example-flixnet-ch2/#flixnet-theme-part-2-navigation","text":"You might have noticed that the components react already to mouse drag or scroll, but keyboard and gamepad input doesn't work yet. Let's fix this!","title":"Flixnet theme, Part 2: Navigation"},{"location":"themes/example-flixnet-ch2/#vertical-scroll","text":"Simply add focus: true to the collection axis: ListView { id: collectionAxis // ... focus: true } You can now scroll the bars with Up and Down , but... it's kind of weird right now. It'd be better for the items to \"snap\" to their place, to scroll to the next item when we press a button. This can be fixed with the snapMode and highlightRangeMode properties: setting snapMode keeps the elements organized when scrolling the list as a whole, while highlightRangeMode will make sure the selection follows the scrolling (that is, when you press Up or Down , you actually select the next or previous element, not just view a different part of the list). ListView { id: collectionAxis // ... snapMode: ListView . SnapOneItem highlightRangeMode: ListView . StrictlyEnforceRange focus: true } There, much better now. Tip Setting up the keyboard input also makes gamepads work. Check the Controls page to see how are they related. By default, every delegate that is at least partially in the ListView's area is fully drawn. To make sure only the rows in the lower half of the screen are visible, I set clip on the ListView : ListView { id: collectionAxis // ... snapMode: ListView . SnapOneItem highlightRangeMode: ListView . StrictlyEnforceRange clip: true focus: true }","title":"Vertical scroll"},{"location":"themes/example-flixnet-ch2/#horizontal-scroll","text":"We have a somewhat complex layout -- scrollable items inside a scrollable item; we can't just set focus: true here, since that'd mean we set it for each row, and end up with scrolling one we don't want. However, every ListView has select-next and select-previous function we can use ( incrementCurrentIndex() , decrementCurrentIndex() ), and the currently selected item can be accessed through currentItem . In this case, the currentItem of collectionAxis will be the Item element inside collectionAxisDelegate : Component { id: collectionAxisDelegate // this one! Item { width: ListView . view . width height: vpx ( 180 ) Text { id: label // ... } ListView { id: gameAxis // ... } } } But how can we access the ListView, gameAxis of the Item? Turns out we can't just use its id , as it's not accessible by external element (we'll get an error about gameAxis being undefined). Function definitions and property members, however, can be accessed. For now, I'll simply create an alias property for the horizontal axis: Component { id: collectionAxisDelegate Item { property alias axis: gameAxis width: ListView . view . width height: vpx ( 180 ) Text { id: label // ... } ListView { id: gameAxis // ... } } } We can now access the game axis of the current collection as currentItem.axis (see below). Note Yes, you can also write it like property alias gameAxis: gameAxis , I simply preferred the different name in this case. Combining the ListView functions, currentItem and manual keyboard handling ( Keys ), we can now make the horizontal scrolling work with: ListView { id: collectionAxis // ... focus: true Keys.onLeftPressed: currentItem . axis . decrementCurrentIndex () Keys.onRightPressed: currentItem . axis . incrementCurrentIndex () } ...which, similarly to the vertical axis, initially scrolls in a not so nice way. Fix it like previously, but in the delegate: ListView { id: gameAxis anchors.left: parent . left anchors.right: parent . right anchors.top: label . bottom anchors.bottom: parent . bottom orientation: ListView . Horizontal model: 100 delegate: gameAxisDelegate spacing: vpx ( 10 ) snapMode: ListView . SnapOneItem highlightRangeMode: ListView . StrictlyEnforceRange } And now both directions should scroll finely! Tip To see that the current item indeed changes, you could set the color of the gameAxisDelegate 's Rectangle to: color: ListView . isCurrentItem ? \"orange\" : \"green\"","title":"Horizontal scroll"},{"location":"themes/example-flixnet-ch2/#left-margin","text":"There's a small margin on the left that shows the game before the currently selected one. We don't want to reduce the size of the horizontal ListView s (they should fill the whole width of the screen), we just want to move the currently selected item a little bit right. For this, we can use the preferredHighlightBegin / End members of the ListView s: they can be used to define a fixed position range (in pixels) where the currently selected element should reside. I'll set a 100px offset like this: ListView { id: gameAxis // ... preferredHighlightBegin: vpx ( 100 ) preferredHighlightEnd: preferredHighlightBegin + vpx ( 240 ) // the width of one game box } Help preferredHighlightBegin and preferredHighlightEnd almost always come in pair, and End must be greater or equal than Begin to have their effect applied. We also need to move the collection label too. As it's just a regular Text element, I'll simply set its left anchor and a margin on it: Component { id: collectionAxisDelegate Item { // ... Text { id: label // ... anchors.left: parent . left anchors.leftMargin: vpx ( 100 ) } ListView { id: gameAxis // ... } } } Note The anchor margin is only applied if the anchor itself is defined. Tip You can also use the Text item's leftPadding property. This feature was added in Qt 5.6 (as mentioned in the official documentation ), so you'll need to change the import command on the top of the QML file to import QtQuick 2.6 or higher (Pegasus comes with Qt 5.9 at the moment).","title":"Left margin"},{"location":"themes/example-flixnet-ch3/","text":"Flixnet theme, Part 3: Using API data Finally, the time has come to replace the placeholder elements with actual content. Let's start by using the real collection data. According to the API reference , collections can be accessed and selected through api.collections , which we can use as the model of a ListView (or any other View). Vertical axis First, find the ListView for the collection axis and change its model property: ListView { id: collectionAxis // ... model: api . collections delegate: collectionAxisDelegate // ... } Previously the model was set to 10 , and so the modelData available in the delegates was a number between 0 and 9. With model set to api.collections , the modelData will be a Collection object . A Collection always has a name , so let's show that: Component { id: collectionAxisDelegate Item { // ... Text { id: label text: modelData . name color: \"white\" font.pixelSize: vpx ( 18 ) font.family: globalFonts . sans // ... } ListView { id: gameAxis // ... } } } Tip If the name of the modelData property you use (in this case name ) don't collide with other properties of the object, it's not required to type out modelData : you can simply write text: name . After a refresh, you should see the names of collections appearing in Pegasus. Horizontal axis Now let's show the game titles in the horizontal rectangles. Every Collection has a games member that holds list of games associated with the collection. Let's use it in the horizontal axis ( collectionAxisDelegate ): Component { id: collectionAxisDelegate Item { // ... Text { id: label // ... } ListView { id: gameAxis // ... model: modelData . games delegate: gameAxisDelegate spacing: vpx ( 10 ) // ... } } } And now the Views scroll properly, with the real data! Game items With the previous changes, gameAxisDelegate is now a visual representation for a Game element. A Game always has a title , so we can simply set it as the text: Component { id: gameAxisDelegate Rectangle { width: vpx ( 240 ) height: vpx ( 135 ) color: \"green\" Text { text: modelData . title } } } Help The model of the vertical ListView was a list of Collection s, so the modelData received by a delegate of that ListView (one whole horizontal row) is one Collection object. The model of these horizontal ListViews is a list of Game s, so a delegate of the horizontal ListViews will see a Game in its modelData . And now the game names also show up in Pegasus: Launching games Now that the game selection items are in sync with the API, we can actually launch games! To launch a game, we just have to call its launch() function. Let's make it so when Enter is pressed the current game is launched: ListView { id: collectionAxis // ... focus: true Keys.onLeftPressed: currentItem . axis . decrementCurrentIndex () Keys.onRightPressed: currentItem . axis . incrementCurrentIndex () Keys.onReturnPressed: ??? . launch () } Hm, but how do we access that game in the first place? All Views have a currentIndex property that tells us which item is currently selected, and we can use this with the get() function available in the models that come from the API. The current game is the currently selected game of the currently selected collection, which we can write like this: Keys.onReturnPressed: api . collections . get ( currentIndex ). games . get ( currentItem . currentIndex ). launch () Which, while works, is a tiny bit long to type out. To make things simpler, let's add a currentGame field to the game axis: ListView { id: gameAxis property var currentGame: modelData . games . get ( currentIndex ) // or just 'model.get(...)' // ... With that, we can reduce the line to just this: Keys.onLeftPressed: currentItem . axis . decrementCurrentIndex () Keys.onRightPressed: currentItem . axis . incrementCurrentIndex () Keys.onReturnPressed: currentItem . axis . currentGame . launch () Looks better (well, at least to me, your mileage may vary). Help Careful not to confuse the onReturnPressed and onEnterPressed calls: technically Return is the key next to the letters, while Enter is the one on the numeric keypad. And with this, technically our theme is fully functional! Gamepads and custom configurations Now you might wonder, \"how can I make it work with a gamepad?\" or \"what if I changed the keyboard layout?\". We want to launch the game when any key or button set for \"accepting things\" is pressed. For this we can add a general input check using Keys.onPressed , and test whether this key/button press event is recognized using the keys-related API functions : Keys.onLeftPressed: currentItem . axis . decrementCurrentIndex () Keys.onRightPressed: currentItem . axis . incrementCurrentIndex () Keys.onPressed: { if ( api . keys . isAccept ( event )) currentItem . axis . currentGame . launch (); } With all that, navigation should now work well in our theme. Next step, let's make it pretty! The code so far The code so far import QtQuick 2.0 FocusScope { ListView { id: collectionAxis anchors.left: parent . left anchors.right: parent . right anchors.top: parent . verticalCenter anchors.bottom: parent . bottom model: api . collections delegate: collectionAxisDelegate snapMode: ListView . SnapOneItem highlightRangeMode: ListView . StrictlyEnforceRange clip: true focus: true Keys.onLeftPressed: currentItem . axis . decrementCurrentIndex () Keys.onRightPressed: currentItem . axis . incrementCurrentIndex () Keys.onPressed: { if ( api . keys . isAccept ( event )) currentItem . axis . currentGame . launch (); } } Component { id: collectionAxisDelegate Item { width: ListView . view . width height: vpx ( 180 ) Text { id: label text: modelData . name color: \"white\" font.pixelSize: vpx ( 18 ) font.family: globalFonts . sans height: vpx ( 45 ) verticalAlignment: Text . AlignVCenter anchors.left: parent . left anchors.leftMargin: vpx ( 100 ) } ListView { id: gameAxis property var currentGame: modelData . games . get ( currentIndex ) anchors.left: parent . left anchors.right: parent . right anchors.top: label . bottom anchors.bottom: parent . bottom orientation: ListView . Horizontal model: modelData . gameList . model currentIndex: modelData . gameList . index delegate: gameAxisDelegate spacing: vpx ( 10 ) snapMode: ListView . SnapOneItem highlightRangeMode: ListView . StrictlyEnforceRange preferredHighlightBegin: vpx ( 100 ) preferredHighlightEnd: preferredHighlightBegin + vpx ( 240 ) } } } Component { id: gameAxisDelegate Rectangle { width: vpx ( 240 ) height: vpx ( 135 ) color: \"green\" Text { text: modelData . title } } } }","title":"Part 3"},{"location":"themes/example-flixnet-ch3/#flixnet-theme-part-3-using-api-data","text":"Finally, the time has come to replace the placeholder elements with actual content. Let's start by using the real collection data. According to the API reference , collections can be accessed and selected through api.collections , which we can use as the model of a ListView (or any other View).","title":"Flixnet theme, Part 3: Using API data"},{"location":"themes/example-flixnet-ch3/#vertical-axis","text":"First, find the ListView for the collection axis and change its model property: ListView { id: collectionAxis // ... model: api . collections delegate: collectionAxisDelegate // ... } Previously the model was set to 10 , and so the modelData available in the delegates was a number between 0 and 9. With model set to api.collections , the modelData will be a Collection object . A Collection always has a name , so let's show that: Component { id: collectionAxisDelegate Item { // ... Text { id: label text: modelData . name color: \"white\" font.pixelSize: vpx ( 18 ) font.family: globalFonts . sans // ... } ListView { id: gameAxis // ... } } } Tip If the name of the modelData property you use (in this case name ) don't collide with other properties of the object, it's not required to type out modelData : you can simply write text: name . After a refresh, you should see the names of collections appearing in Pegasus.","title":"Vertical axis"},{"location":"themes/example-flixnet-ch3/#horizontal-axis","text":"Now let's show the game titles in the horizontal rectangles. Every Collection has a games member that holds list of games associated with the collection. Let's use it in the horizontal axis ( collectionAxisDelegate ): Component { id: collectionAxisDelegate Item { // ... Text { id: label // ... } ListView { id: gameAxis // ... model: modelData . games delegate: gameAxisDelegate spacing: vpx ( 10 ) // ... } } } And now the Views scroll properly, with the real data!","title":"Horizontal axis"},{"location":"themes/example-flixnet-ch3/#game-items","text":"With the previous changes, gameAxisDelegate is now a visual representation for a Game element. A Game always has a title , so we can simply set it as the text: Component { id: gameAxisDelegate Rectangle { width: vpx ( 240 ) height: vpx ( 135 ) color: \"green\" Text { text: modelData . title } } } Help The model of the vertical ListView was a list of Collection s, so the modelData received by a delegate of that ListView (one whole horizontal row) is one Collection object. The model of these horizontal ListViews is a list of Game s, so a delegate of the horizontal ListViews will see a Game in its modelData . And now the game names also show up in Pegasus:","title":"Game items"},{"location":"themes/example-flixnet-ch3/#launching-games","text":"Now that the game selection items are in sync with the API, we can actually launch games! To launch a game, we just have to call its launch() function. Let's make it so when Enter is pressed the current game is launched: ListView { id: collectionAxis // ... focus: true Keys.onLeftPressed: currentItem . axis . decrementCurrentIndex () Keys.onRightPressed: currentItem . axis . incrementCurrentIndex () Keys.onReturnPressed: ??? . launch () } Hm, but how do we access that game in the first place? All Views have a currentIndex property that tells us which item is currently selected, and we can use this with the get() function available in the models that come from the API. The current game is the currently selected game of the currently selected collection, which we can write like this: Keys.onReturnPressed: api . collections . get ( currentIndex ). games . get ( currentItem . currentIndex ). launch () Which, while works, is a tiny bit long to type out. To make things simpler, let's add a currentGame field to the game axis: ListView { id: gameAxis property var currentGame: modelData . games . get ( currentIndex ) // or just 'model.get(...)' // ... With that, we can reduce the line to just this: Keys.onLeftPressed: currentItem . axis . decrementCurrentIndex () Keys.onRightPressed: currentItem . axis . incrementCurrentIndex () Keys.onReturnPressed: currentItem . axis . currentGame . launch () Looks better (well, at least to me, your mileage may vary). Help Careful not to confuse the onReturnPressed and onEnterPressed calls: technically Return is the key next to the letters, while Enter is the one on the numeric keypad. And with this, technically our theme is fully functional!","title":"Launching games"},{"location":"themes/example-flixnet-ch3/#gamepads-and-custom-configurations","text":"Now you might wonder, \"how can I make it work with a gamepad?\" or \"what if I changed the keyboard layout?\". We want to launch the game when any key or button set for \"accepting things\" is pressed. For this we can add a general input check using Keys.onPressed , and test whether this key/button press event is recognized using the keys-related API functions : Keys.onLeftPressed: currentItem . axis . decrementCurrentIndex () Keys.onRightPressed: currentItem . axis . incrementCurrentIndex () Keys.onPressed: { if ( api . keys . isAccept ( event )) currentItem . axis . currentGame . launch (); } With all that, navigation should now work well in our theme. Next step, let's make it pretty!","title":"Gamepads and custom configurations"},{"location":"themes/example-flixnet-ch3/#the-code-so-far","text":"The code so far import QtQuick 2.0 FocusScope { ListView { id: collectionAxis anchors.left: parent . left anchors.right: parent . right anchors.top: parent . verticalCenter anchors.bottom: parent . bottom model: api . collections delegate: collectionAxisDelegate snapMode: ListView . SnapOneItem highlightRangeMode: ListView . StrictlyEnforceRange clip: true focus: true Keys.onLeftPressed: currentItem . axis . decrementCurrentIndex () Keys.onRightPressed: currentItem . axis . incrementCurrentIndex () Keys.onPressed: { if ( api . keys . isAccept ( event )) currentItem . axis . currentGame . launch (); } } Component { id: collectionAxisDelegate Item { width: ListView . view . width height: vpx ( 180 ) Text { id: label text: modelData . name color: \"white\" font.pixelSize: vpx ( 18 ) font.family: globalFonts . sans height: vpx ( 45 ) verticalAlignment: Text . AlignVCenter anchors.left: parent . left anchors.leftMargin: vpx ( 100 ) } ListView { id: gameAxis property var currentGame: modelData . games . get ( currentIndex ) anchors.left: parent . left anchors.right: parent . right anchors.top: label . bottom anchors.bottom: parent . bottom orientation: ListView . Horizontal model: modelData . gameList . model currentIndex: modelData . gameList . index delegate: gameAxisDelegate spacing: vpx ( 10 ) snapMode: ListView . SnapOneItem highlightRangeMode: ListView . StrictlyEnforceRange preferredHighlightBegin: vpx ( 100 ) preferredHighlightEnd: preferredHighlightBegin + vpx ( 240 ) } } } Component { id: gameAxisDelegate Rectangle { width: vpx ( 240 ) height: vpx ( 135 ) color: \"green\" Text { text: modelData . title } } } }","title":"The code so far"},{"location":"themes/example-flixnet-ch4/","text":"Flixnet theme, Part 4: Making things pretty In this chapter, we'll try to make the game cells look better! Fancy game boxes I'll now replace the green game boxes with something better to look at. There are two main cases we have to support: if there is an available image for a game, the box should show that if there is none, or the image has not loaded yet, the box should show a gray rectangle, with the game's title in the center So gameAxisDelegate is our game box that right now contains a green rectangle. I'll turn that into an Item, and, for the two cases above, I'll add an initial gray Rectangle and Image: Component { id: gameAxisDelegate Item { width: vpx ( 240 ) height: vpx ( 135 ) Rectangle { anchors.fill: parent color: \"#333\" } Image { id: image anchors.fill: parent } } } So which image asset should we use? A game box is a rectangle with 16:9 aspect ratio, so the banner would be perfect for this. However, since every asset is potentially missing, we should consider showing other images and provide multiple fallbacks. If we don't have a banner , the next similarly sized one is the steam (\"grid icon\") asset. Because it's wider than 16:9, we'll need to crop it if we don't want black bars or squashed/stretched images (though you might prefer that). If neither image is available, I'll use boxFront as it tends to be commonly available. Let's extend the Image object created previously: Image { id: image anchors.fill: parent visible: source // fill the whole area, cropping what lies outside fillMode: Image . PreserveAspectCrop asynchronous: true source: assets . banner || assets . steam || assets . boxFront sourceSize { width: 256 ; height: 256 } } I've also made some optimizations here: I've set asynchronous: true : Loading image files takes some time depending on the device Pegasus runs on. If this property is set to false (default), the program will not react to input until the image is loaded (or noticed that it failed to load). If it's false, the image is loaded \"in the background\", and input is not blocked; hovewer depending on your theme, you might want to show something in its place for the users during this time (eg. a loading spinner or progress bar). I've set sourceSize : This sets the maximum size the image should occupy in the memory. The official documentation describes this in detail. I've set visible: source , that is, if the source is empty (neither banner , steam or boxFront is available), then ignore this whole object: no input will be ever handled here and there's nothing to see either. With these changes, here's how it looks: Starting to take shape, isn't it? Let's finish the text-only fallback too: Component { id: gameAxisDelegate Item { width: vpx ( 240 ) height: vpx ( 135 ) Rectangle { anchors.fill: parent color: \"#333\" visible: image . status !== Image . Ready Text { text: modelData . title // define the text area anchors.fill: parent anchors.margins: vpx ( 12 ) // align to the center horizontalAlignment: Text . AlignHCenter verticalAlignment: Text . AlignVCenter wrapMode: Text . Wrap // set the font color: \"white\" font.pixelSize: vpx ( 16 ) font.family: globalFonts . sans } } Image { id: image // ... } } } And we're done with the game boxes! Looping the axes It'd be nice if all of the lists would loop around. You can do two kinds of loop: make the list finite and when the last item is reached, jump back to the first one (and also in reverse direction) make the list infinite and loop around (carousel style) The first one can be done either by simply setting keyNavigationWraps: true for a ListView (and other Views) or using the API's default index increase/decrease functions. In our case though, the carousel option would look the best. I won't lie, making a carousel-like looping list is annoying and overly complex for this use case; the situation might improve later by creating some easier-to-use custom types in Pegasus. Vertically So the problem is, ListView can't do carousels: the only type that can is PathView. As such, we'll turn our ListViews into PathViews next. Again, let's start with the vertical axis; here's a before-after comparison, with some comments after the code: Before ListView { id: collectionAxis anchors.left: parent . left anchors.right: parent . right anchors.top: parent . verticalCenter anchors.bottom: parent . bottom model: api . collections delegate: collectionAxisDelegate snapMode: ListView . SnapOneItem highlightRangeMode: ListView . StrictlyEnforceRange clip: true focus: true Keys.onLeftPressed: currentItem . axis . decrementCurrentIndex () Keys.onRightPressed: currentItem . axis . incrementCurrentIndex () Keys.onPressed: { if ( api . keys . isAccept ( event )) currentItem . axis . currentGame . launch (); } } After PathView { id: collectionAxis anchors.left: parent . left anchors.right: parent . right anchors.top: parent . verticalCenter anchors.bottom: parent . bottom model: api . collections delegate: collectionAxisDelegate // changed ListView to PathView snapMode: PathView . SnapOneItem highlightRangeMode: PathView . StrictlyEnforceRange clip: true // brand new: path definitions pathItemCount: 1 + Math . ceil ( height / vpx ( 180 )) path: Path { startX: collectionAxis . width * 0.5 startY: vpx ( 180 ) * - 0.5 PathLine { x: collectionAxis . path . startX y: collectionAxis . path . startY + collectionAxis . pathItemCount * vpx ( 180 ) } } preferredHighlightBegin: 1 / pathItemCount preferredHighlightEnd: preferredHighlightBegin focus: true // added up/down navigation Keys.onUpPressed: decrementCurrentIndex () Keys.onDownPressed: incrementCurrentIndex () Keys.onLeftPressed: currentItem . axis . decrementCurrentIndex () Keys.onRightPressed: currentItem . axis . incrementCurrentIndex () Keys.onPressed: { if ( api . keys . isAccept ( event )) currentItem . axis . currentGame . launch (); } } Warning Don't forget to change ListView to PathView in the delegate ( collectionAxisDelegate 's width prop) too! Structure of the vertical PathView. The red line marks the path, with red dots at positions 0/4 (top), 1/4, 2/4, 3/4 and 4/4 (bottom). The centers of the delegates are marked with blue. Unlike ListView that goes to one direction only, PathView can be used to create arbitrary paths on which the items will travel (curves, circles, all kinds of shapes). Because of that, some properties have to be provided in percentage or need manual calculations. For PathViews, pathItemCount must be set (the default behaviour is to show all items). We should show as many rows as it fits into lower half or the screen (one row's height is 180px). The number of visible items thus will be [area height] / [row height], which I've rounded up using Math.ceil , a standard JavaScript function. However, when there's a scrolling going on, there'll be actually one more row visible on the screen: the topmost row will gradually go out on the top of the lower area, while a new line is on its way in to appear on the bottom (see the animation below). The path defines the trail the elements will follow by their center point . Because there'll be one item that slides out , and one that slides in , the path extends above and below the PathView's area. The starting point of the axis (the center point of the item that will slide out) is horizontally ( startX ) the center of the screen (as the rows fill the width), and vertically ( startY ) above the top edge of the PathView (which would be 0) by 50% of the row height (where values are in pixels). From the start point, a linear path is created with PathLine : I've set it so the end point is the same as the start except the Y coordinate, which is increased by the length ot the path, [number of max. visible items] * [item height]. The preferred highlight positions are in percentage for the PathView (as it can have any kind of shape, pixels don't always make sense). Again, the values define the range for the center point of the selected item. It defaults to 0 (start of the line), which in our case would be the center of the sliding out element, out of the visible area. I've set it to [1] / [item count], which will produce the center point of the second element on the path. Since I'm not planning to add any additional effects and such, just select one item, I've set the end of the range to the same as the beginning. Because Paths are not necessary straight, it can't be decided automatically which direction are logical to move in, so there's no built-in key navigation. In our case we're just moving vertically, so I've made the View react to the \"up\" and \"down\" keys. Horizontally The horizontal scrolling works similarly, with one important difference: there is a margin on the left of the currently selected item, where the previous one is halfway in the screen. We'll have to shift the whole path horizontally, and add 1 to the maximum number of visible items, and another one to account for scrolling, just like at the vertical axis. I've set the left margin previously to 100 px and the width of a game box to be 240x135. In addition, there's a 10px spacing between the elements, giving the full width of a box to 250. The center of the current-item would be at 100 + 250/2 = 225 on the path, but to make it align with the collection label, I'll shift it 5px (half of the spacing) to the left, making the X center to be 220px. Then counting backwards, the previous-item will be at 220 - 250, and the one before that (the leftmost position, where the new elements will appear when scrolling) at 220 - 250 * 2. All right, let's change the horizontal ListView into a PathView: Before : ListView { id: gameAxis anchors.left: parent . left anchors.right: parent . right anchors.top: label . bottom anchors.bottom: parent . bottom orientation: ListView . Horizontal model: modelData . gameList . model currentIndex: modelData . gameList . index delegate: gameAxisDelegate spacing: vpx ( 10 ) snapMode: ListView . SnapOneItem highlightRangeMode: ListView . StrictlyEnforceRange preferredHighlightBegin: vpx ( 100 ) preferredHighlightEnd: preferredHighlightBegin + vpx ( 240 ) } After : PathView { id: gameAxis anchors.left: parent . left anchors.right: parent . right anchors.top: label . bottom anchors.bottom: parent . bottom // removed orientation // removed spacing model: modelData . gameList . model currentIndex: modelData . gameList . index delegate: gameAxisDelegate // changed ListView to PathView snapMode: PathView . SnapOneItem highlightRangeMode: PathView . StrictlyEnforceRange // brand new: path definitions pathItemCount: 2 + Math . ceil ( width / vpx ( 250 )) // note the '2'! path: Path { startX: vpx ( 220 ) - vpx ( 250 ) * 2 startY: vpx ( 135 ) * 0.5 PathLine { x: gameAxis . path . startX + gameAxis . pathItemCount * vpx ( 250 ) y: gameAxis . path . startY } } // changed highlight range preferredHighlightBegin: 2 / pathItemCount preferredHighlightEnd: preferredHighlightBegin } And now both the horizontal and vertical axis loops as intended! Tip Typing out fixed values in pixels every time can be tedious and error prone. I'd recommend defining them as properties at the top of the object they're used in (eg. property real boxHeight: vpx(135) ).","title":"Part 4"},{"location":"themes/example-flixnet-ch4/#flixnet-theme-part-4-making-things-pretty","text":"In this chapter, we'll try to make the game cells look better!","title":"Flixnet theme, Part 4: Making things pretty"},{"location":"themes/example-flixnet-ch4/#fancy-game-boxes","text":"I'll now replace the green game boxes with something better to look at. There are two main cases we have to support: if there is an available image for a game, the box should show that if there is none, or the image has not loaded yet, the box should show a gray rectangle, with the game's title in the center So gameAxisDelegate is our game box that right now contains a green rectangle. I'll turn that into an Item, and, for the two cases above, I'll add an initial gray Rectangle and Image: Component { id: gameAxisDelegate Item { width: vpx ( 240 ) height: vpx ( 135 ) Rectangle { anchors.fill: parent color: \"#333\" } Image { id: image anchors.fill: parent } } } So which image asset should we use? A game box is a rectangle with 16:9 aspect ratio, so the banner would be perfect for this. However, since every asset is potentially missing, we should consider showing other images and provide multiple fallbacks. If we don't have a banner , the next similarly sized one is the steam (\"grid icon\") asset. Because it's wider than 16:9, we'll need to crop it if we don't want black bars or squashed/stretched images (though you might prefer that). If neither image is available, I'll use boxFront as it tends to be commonly available. Let's extend the Image object created previously: Image { id: image anchors.fill: parent visible: source // fill the whole area, cropping what lies outside fillMode: Image . PreserveAspectCrop asynchronous: true source: assets . banner || assets . steam || assets . boxFront sourceSize { width: 256 ; height: 256 } } I've also made some optimizations here: I've set asynchronous: true : Loading image files takes some time depending on the device Pegasus runs on. If this property is set to false (default), the program will not react to input until the image is loaded (or noticed that it failed to load). If it's false, the image is loaded \"in the background\", and input is not blocked; hovewer depending on your theme, you might want to show something in its place for the users during this time (eg. a loading spinner or progress bar). I've set sourceSize : This sets the maximum size the image should occupy in the memory. The official documentation describes this in detail. I've set visible: source , that is, if the source is empty (neither banner , steam or boxFront is available), then ignore this whole object: no input will be ever handled here and there's nothing to see either. With these changes, here's how it looks: Starting to take shape, isn't it? Let's finish the text-only fallback too: Component { id: gameAxisDelegate Item { width: vpx ( 240 ) height: vpx ( 135 ) Rectangle { anchors.fill: parent color: \"#333\" visible: image . status !== Image . Ready Text { text: modelData . title // define the text area anchors.fill: parent anchors.margins: vpx ( 12 ) // align to the center horizontalAlignment: Text . AlignHCenter verticalAlignment: Text . AlignVCenter wrapMode: Text . Wrap // set the font color: \"white\" font.pixelSize: vpx ( 16 ) font.family: globalFonts . sans } } Image { id: image // ... } } } And we're done with the game boxes!","title":"Fancy game boxes"},{"location":"themes/example-flixnet-ch4/#looping-the-axes","text":"It'd be nice if all of the lists would loop around. You can do two kinds of loop: make the list finite and when the last item is reached, jump back to the first one (and also in reverse direction) make the list infinite and loop around (carousel style) The first one can be done either by simply setting keyNavigationWraps: true for a ListView (and other Views) or using the API's default index increase/decrease functions. In our case though, the carousel option would look the best. I won't lie, making a carousel-like looping list is annoying and overly complex for this use case; the situation might improve later by creating some easier-to-use custom types in Pegasus.","title":"Looping the axes"},{"location":"themes/example-flixnet-ch4/#vertically","text":"So the problem is, ListView can't do carousels: the only type that can is PathView. As such, we'll turn our ListViews into PathViews next. Again, let's start with the vertical axis; here's a before-after comparison, with some comments after the code: Before ListView { id: collectionAxis anchors.left: parent . left anchors.right: parent . right anchors.top: parent . verticalCenter anchors.bottom: parent . bottom model: api . collections delegate: collectionAxisDelegate snapMode: ListView . SnapOneItem highlightRangeMode: ListView . StrictlyEnforceRange clip: true focus: true Keys.onLeftPressed: currentItem . axis . decrementCurrentIndex () Keys.onRightPressed: currentItem . axis . incrementCurrentIndex () Keys.onPressed: { if ( api . keys . isAccept ( event )) currentItem . axis . currentGame . launch (); } } After PathView { id: collectionAxis anchors.left: parent . left anchors.right: parent . right anchors.top: parent . verticalCenter anchors.bottom: parent . bottom model: api . collections delegate: collectionAxisDelegate // changed ListView to PathView snapMode: PathView . SnapOneItem highlightRangeMode: PathView . StrictlyEnforceRange clip: true // brand new: path definitions pathItemCount: 1 + Math . ceil ( height / vpx ( 180 )) path: Path { startX: collectionAxis . width * 0.5 startY: vpx ( 180 ) * - 0.5 PathLine { x: collectionAxis . path . startX y: collectionAxis . path . startY + collectionAxis . pathItemCount * vpx ( 180 ) } } preferredHighlightBegin: 1 / pathItemCount preferredHighlightEnd: preferredHighlightBegin focus: true // added up/down navigation Keys.onUpPressed: decrementCurrentIndex () Keys.onDownPressed: incrementCurrentIndex () Keys.onLeftPressed: currentItem . axis . decrementCurrentIndex () Keys.onRightPressed: currentItem . axis . incrementCurrentIndex () Keys.onPressed: { if ( api . keys . isAccept ( event )) currentItem . axis . currentGame . launch (); } } Warning Don't forget to change ListView to PathView in the delegate ( collectionAxisDelegate 's width prop) too! Structure of the vertical PathView. The red line marks the path, with red dots at positions 0/4 (top), 1/4, 2/4, 3/4 and 4/4 (bottom). The centers of the delegates are marked with blue. Unlike ListView that goes to one direction only, PathView can be used to create arbitrary paths on which the items will travel (curves, circles, all kinds of shapes). Because of that, some properties have to be provided in percentage or need manual calculations. For PathViews, pathItemCount must be set (the default behaviour is to show all items). We should show as many rows as it fits into lower half or the screen (one row's height is 180px). The number of visible items thus will be [area height] / [row height], which I've rounded up using Math.ceil , a standard JavaScript function. However, when there's a scrolling going on, there'll be actually one more row visible on the screen: the topmost row will gradually go out on the top of the lower area, while a new line is on its way in to appear on the bottom (see the animation below). The path defines the trail the elements will follow by their center point . Because there'll be one item that slides out , and one that slides in , the path extends above and below the PathView's area. The starting point of the axis (the center point of the item that will slide out) is horizontally ( startX ) the center of the screen (as the rows fill the width), and vertically ( startY ) above the top edge of the PathView (which would be 0) by 50% of the row height (where values are in pixels). From the start point, a linear path is created with PathLine : I've set it so the end point is the same as the start except the Y coordinate, which is increased by the length ot the path, [number of max. visible items] * [item height]. The preferred highlight positions are in percentage for the PathView (as it can have any kind of shape, pixels don't always make sense). Again, the values define the range for the center point of the selected item. It defaults to 0 (start of the line), which in our case would be the center of the sliding out element, out of the visible area. I've set it to [1] / [item count], which will produce the center point of the second element on the path. Since I'm not planning to add any additional effects and such, just select one item, I've set the end of the range to the same as the beginning. Because Paths are not necessary straight, it can't be decided automatically which direction are logical to move in, so there's no built-in key navigation. In our case we're just moving vertically, so I've made the View react to the \"up\" and \"down\" keys.","title":"Vertically"},{"location":"themes/example-flixnet-ch4/#horizontally","text":"The horizontal scrolling works similarly, with one important difference: there is a margin on the left of the currently selected item, where the previous one is halfway in the screen. We'll have to shift the whole path horizontally, and add 1 to the maximum number of visible items, and another one to account for scrolling, just like at the vertical axis. I've set the left margin previously to 100 px and the width of a game box to be 240x135. In addition, there's a 10px spacing between the elements, giving the full width of a box to 250. The center of the current-item would be at 100 + 250/2 = 225 on the path, but to make it align with the collection label, I'll shift it 5px (half of the spacing) to the left, making the X center to be 220px. Then counting backwards, the previous-item will be at 220 - 250, and the one before that (the leftmost position, where the new elements will appear when scrolling) at 220 - 250 * 2. All right, let's change the horizontal ListView into a PathView: Before : ListView { id: gameAxis anchors.left: parent . left anchors.right: parent . right anchors.top: label . bottom anchors.bottom: parent . bottom orientation: ListView . Horizontal model: modelData . gameList . model currentIndex: modelData . gameList . index delegate: gameAxisDelegate spacing: vpx ( 10 ) snapMode: ListView . SnapOneItem highlightRangeMode: ListView . StrictlyEnforceRange preferredHighlightBegin: vpx ( 100 ) preferredHighlightEnd: preferredHighlightBegin + vpx ( 240 ) } After : PathView { id: gameAxis anchors.left: parent . left anchors.right: parent . right anchors.top: label . bottom anchors.bottom: parent . bottom // removed orientation // removed spacing model: modelData . gameList . model currentIndex: modelData . gameList . index delegate: gameAxisDelegate // changed ListView to PathView snapMode: PathView . SnapOneItem highlightRangeMode: PathView . StrictlyEnforceRange // brand new: path definitions pathItemCount: 2 + Math . ceil ( width / vpx ( 250 )) // note the '2'! path: Path { startX: vpx ( 220 ) - vpx ( 250 ) * 2 startY: vpx ( 135 ) * 0.5 PathLine { x: gameAxis . path . startX + gameAxis . pathItemCount * vpx ( 250 ) y: gameAxis . path . startY } } // changed highlight range preferredHighlightBegin: 2 / pathItemCount preferredHighlightEnd: preferredHighlightBegin } And now both the horizontal and vertical axis loops as intended! Tip Typing out fixed values in pixels every time can be tedious and error prone. I'd recommend defining them as properties at the top of the object they're used in (eg. property real boxHeight: vpx(135) ).","title":"Horizontally"},{"location":"themes/example-flixnet-ch5/","text":"Flixnet theme, Part 5: Game details The upper half of the screen contains the metadata and preview image of the currently selected game. The components here will consist of simple elements, like Image and Text, which will make adding them way easier. You can place all these elements directly under the main FocusScope , or you could create a containing Item if you wish. I'll do the former to keep the guide shorter. I'll also create a property to hold the currently selected game called currentGame (see the previous part), which will be used in these new elements. The actual fields of a Game are listed in the API reference . Title A simple Text item in the upper left corner, with the left margin set to the same 100px we used at the game rows, and some additional margin at the top. Text { id: title text: currentGame . title color: \"white\" font.pixelSize: vpx ( 32 ) font.family: globalFonts . sans font.bold: true anchors.top: parent . top anchors.topMargin: vpx ( 42 ) anchors.left: parent . left anchors.leftMargin: vpx ( 100 ) } Rating The rating will be displayed as a five-star bar, with some percentage of it colored according to the actual rating. This can be done with two simple, overlapping QML Images: draw five empty stars first, then over them, draw filled ones according to the rating. Kind of like a progress bar, except we're using stars for filling. But first of all, I actually draw two images for the stars, an empty one and a filled. Both have square size and transparent background. I create a new directory (eg. assets ) in my theme folder and put them there. star_empty.svg star_filled.svg Tip I've used Inkscape for drawing the vector art; it has a built-in tool for drawing stars and other polygons. Then I create the following Item. As the star image is a square, I make its width 5 times the height to hold the five stars horizontally. I make the empty-star Image fill this whole item, and set fillMode: Image.TileHorizontally to make the star repeat horizontally. For the filled-star image, I place it over the other one, and modify its width by the rating, which is provided as a number between 0.0 and 1.0 (0% and 100%). Item { id: rating // set the item's dimensions height: vpx ( 16 ) width: height * 5 // put it under the title anchors.top: title . bottom anchors.left: title . left // the empty stars Image { anchors.fill: parent source: \"assets/star_empty.svg\" sourceSize { width: parent . height ; height: parent . height } // the most important bits! fillMode: Image . TileHorizontally horizontalAlignment: Image . AlignLeft } // the filled stars Image { anchors.top: parent . top anchors.left: parent . left width: parent . width * currentGame . rating // !!! height: parent . height source: \"assets/star_filled.svg\" sourceSize { width: parent . height ; height: parent . height } fillMode: Image . TileHorizontally horizontalAlignment: Image . AlignLeft } } Note Without horizontalAlignment the stars might not line up perfectly (the repeat will start from the center). When a game has no rating defined, game.rating is 0.0 . Showing five empty stars for an otherwise good game might be a bit misleading, so I'll make the rating bar only appear when the rating is over 0%: Item { id: rating visible: currentGame . rating > 0.0 // ... } Release year Yet another simple Text element: Text { id: year // if not defined, the release year is 0 visible: game . year > 0 text: game . year color: \"white\" font.pixelSize: vpx ( 16 ) font.family: globalFonts . sans anchors.left: rating . right anchors.top: rating . top } Row Currently the year element is manually anchored right next to the rating. Doing this for each item every time is quite annoying, let's just put them in a Row : Row { id: detailsRow // anchor the whole row anchors.top: title . bottom anchors.topMargin: vpx ( 5 ) anchors.left: title . left spacing: vpx ( 10 ) Item { id: rating // remove anchor items! // anchors.top: title.bottom // anchors.left: title.left // ... } Text { id: year // remove anchor items! // anchors.left: rating.right // anchors.top: rating.top // ... } } Player count This one will be a rounded rectangle with smiley faces in it indicating the number of players. The player count defaults to one; similarly to the rating, I'll show the component only if the player count is more than one. First I create the smiley face image (based on the Unicode \"filled smiling face\" symbol ( U+263B ). Again, it's square sized with a transparent background. Then create a background rounded Rectangle and the smiles Image in it, putting the whole thing in the Row created in the previous step: Rectangle { id: multiplayer // the Rectangle's size depends on the Image, // with some additional padding width: smileys . width + vpx ( 8 ) height: smileys . height + vpx ( 5 ) color: \"#555\" radius: vpx ( 3 ) visible: currentGame . players > 1 Image { id: smileys // 13px looked good for me width: vpx ( 13 ) * currentGame . players height: vpx ( 13 ) anchors.centerIn: parent source: \"assets/smiley.svg\" sourceSize { width: smileys . height ; height: smileys . height } fillMode: Image . TileHorizontally horizontalAlignment: Image . AlignLeft } } Developer Yet another simple Text in the Row: Text { id: developer text: currentGame . developer color: \"white\" font.pixelSize: vpx ( 16 ) font.family: globalFonts . sans } Tip A game may have multiple developers: if you just want to show them as a Text, you can use <Game>.developer , a string that simply lists them all. There's also <Game>.developerList , a JavaScript Array , if you wish to use them individually. Description A bigger text with set boundaries for alignment. If there is a short summary , I'll use that, otherwise the beginning of the full description. Text { id: description text: currentGame . description color: \"white\" font.pixelSize: vpx ( 18 ) font.family: globalFonts . sans // allow word wrapping, justify horizontally wrapMode: Text . WordWrap horizontalAlignment: Text . AlignJustify // if the text is too long, end it with an ellipsis (...) elide: Text . ElideRight anchors { left: detailsRow . left right: parent . horizontalCenter top: detailsRow . bottom ; topMargin: vpx ( 20 ) bottom: parent . verticalCenter ; bottomMargin: vpx ( 32 ) } } Screenshot This should be below everything else on the screen -- in fact, if you look at the image at the beginning of this guide, it's actually going into the bottom-half region of the screen, reaching the row of images. As it's under everything else, I'll put its implementation at the top of the theme file, even before the collection PathView. I'll anchor the top and left edges of the image to the top right corner of the screen. To make it go slightly into the bottom half, I'll anchor the bottom edge to the vertical center of the screen, then add a small amount of negative margin to the bottom (a positive margin reduces the size of the element, while a negative one increases it). Image { id: screenshot asynchronous: true fillMode: Image . PreserveAspectFit // set the first screenshot as source, or nothing source: currentGame . assets . screenshots [ 0 ] || \"\" sourceSize { width: 512 ; height: 512 } anchors.top: parent . top anchors.right: parent . right anchors.bottom: parent . verticalCenter anchors.bottomMargin: vpx ( - 45 ) // the height of the collection label } Note Using negative margins kind of feels like a hack though, so depending on the situation you might prefer to use simple width/height properties. Help The screenshots are stored under assets.screenshots , which is a regular JavaScript Array . If it's empty, screenshots[0] will be undefined , and setting an undefined value as the source of an Image will produce a warning in the log. Setting it to an empty string, however, will not, so appending || \"\" as a fallback will silence the warning. An alternative solution could be is to use screenshots as a model in eg. a ListView, and the Image as delegate. You could then further extend it to periodically change the current visible screenshot. Tip You can also use the z property of the components to set their relative \"height\". Gradients There are two linear gradients (\"fade-ins\"), one from the left and one from the bottom of the image. Such effect can be added just like regular components, can be positioned, sized, animated, etc. But first of all, to use gradients you'll need the QtGraphicalEffects QML module: import QtQuick 2.0 import QtGraphicalEffects 1.0 FocusScope { // ... } Then, create the horizontal linear gradient inside our Image component: Image { id: screenshot // ... LinearGradient { width: parent . width * 0.25 height: parent . height anchors.left: parent . left // since it goes straight horizontally from the left, // the Y of the point doesn't really matter start: Qt . point ( 0 , 0 ) end: Qt . point ( width , 0 ) // at the left side (0%), it starts with a fully visible black // at the right side (100%), it blends into transparency gradient: Gradient { GradientStop { position: 0.0 ; color: \"black\" } GradientStop { position: 1.0 ; color: \"transparent\" } } } } And another for the bottom: LinearGradient { width: parent . width height: vpx ( 50 ) anchors.bottom: parent . bottom // goes straight up, so the X of the point doesn't really matter start: Qt . point ( 0 , height ) end: Qt . point ( 0 , 0 ) gradient: Gradient { GradientStop { position: 0.0 ; color: \"black\" } GradientStop { position: 1.0 ; color: \"transparent\" } } } And we're done! Selection marker Perhaps not easy to notice on the example images, but actually there's a white rectangular border around the current item's place on the topmost horizontal axis. It's position is fixed and does not move even during scrolling. I'll create an empty, border-only Rectangle for it. Since it's over everything else in the theme, I'll put it to the bottom of the whole file, after the gameAxisDelegate 's definition. Rectangle { id: selectionMarker width: vpx ( 240 ) height: vpx ( 135 ) color: \"transparent\" border { width: 3 ; color: \"white\" } anchors.left: parent . left anchors.leftMargin: vpx ( 100 ) anchors.top: parent . verticalCenter anchors.topMargin: vpx ( 45 ) } Opacity The currently active horizontal row is fully visible, while the rest are a bit darker. I'll set the opacity of the non-active rows to 60%. In addition, I'll add a light animation, so instead of a sudden change in the visibility, the rows gradually raise their opacity during scrolling. Simply add these two lines to the collectionAxisDelegate : Component { id: collectionAxisDelegate Item { // JS functions // width, height opacity: PathView . isCurrentItem ? 1.0 : 0.6 Behavior on opacity { NumberAnimation { duration: 150 } } // ... } } Done! With all these components added, it seems we're actually done! Here's the end result:","title":"Part 5"},{"location":"themes/example-flixnet-ch5/#flixnet-theme-part-5-game-details","text":"The upper half of the screen contains the metadata and preview image of the currently selected game. The components here will consist of simple elements, like Image and Text, which will make adding them way easier. You can place all these elements directly under the main FocusScope , or you could create a containing Item if you wish. I'll do the former to keep the guide shorter. I'll also create a property to hold the currently selected game called currentGame (see the previous part), which will be used in these new elements. The actual fields of a Game are listed in the API reference .","title":"Flixnet theme, Part 5: Game details"},{"location":"themes/example-flixnet-ch5/#title","text":"A simple Text item in the upper left corner, with the left margin set to the same 100px we used at the game rows, and some additional margin at the top. Text { id: title text: currentGame . title color: \"white\" font.pixelSize: vpx ( 32 ) font.family: globalFonts . sans font.bold: true anchors.top: parent . top anchors.topMargin: vpx ( 42 ) anchors.left: parent . left anchors.leftMargin: vpx ( 100 ) }","title":"Title"},{"location":"themes/example-flixnet-ch5/#rating","text":"The rating will be displayed as a five-star bar, with some percentage of it colored according to the actual rating. This can be done with two simple, overlapping QML Images: draw five empty stars first, then over them, draw filled ones according to the rating. Kind of like a progress bar, except we're using stars for filling. But first of all, I actually draw two images for the stars, an empty one and a filled. Both have square size and transparent background. I create a new directory (eg. assets ) in my theme folder and put them there. star_empty.svg star_filled.svg Tip I've used Inkscape for drawing the vector art; it has a built-in tool for drawing stars and other polygons. Then I create the following Item. As the star image is a square, I make its width 5 times the height to hold the five stars horizontally. I make the empty-star Image fill this whole item, and set fillMode: Image.TileHorizontally to make the star repeat horizontally. For the filled-star image, I place it over the other one, and modify its width by the rating, which is provided as a number between 0.0 and 1.0 (0% and 100%). Item { id: rating // set the item's dimensions height: vpx ( 16 ) width: height * 5 // put it under the title anchors.top: title . bottom anchors.left: title . left // the empty stars Image { anchors.fill: parent source: \"assets/star_empty.svg\" sourceSize { width: parent . height ; height: parent . height } // the most important bits! fillMode: Image . TileHorizontally horizontalAlignment: Image . AlignLeft } // the filled stars Image { anchors.top: parent . top anchors.left: parent . left width: parent . width * currentGame . rating // !!! height: parent . height source: \"assets/star_filled.svg\" sourceSize { width: parent . height ; height: parent . height } fillMode: Image . TileHorizontally horizontalAlignment: Image . AlignLeft } } Note Without horizontalAlignment the stars might not line up perfectly (the repeat will start from the center). When a game has no rating defined, game.rating is 0.0 . Showing five empty stars for an otherwise good game might be a bit misleading, so I'll make the rating bar only appear when the rating is over 0%: Item { id: rating visible: currentGame . rating > 0.0 // ... }","title":"Rating"},{"location":"themes/example-flixnet-ch5/#release-year","text":"Yet another simple Text element: Text { id: year // if not defined, the release year is 0 visible: game . year > 0 text: game . year color: \"white\" font.pixelSize: vpx ( 16 ) font.family: globalFonts . sans anchors.left: rating . right anchors.top: rating . top }","title":"Release year"},{"location":"themes/example-flixnet-ch5/#row","text":"Currently the year element is manually anchored right next to the rating. Doing this for each item every time is quite annoying, let's just put them in a Row : Row { id: detailsRow // anchor the whole row anchors.top: title . bottom anchors.topMargin: vpx ( 5 ) anchors.left: title . left spacing: vpx ( 10 ) Item { id: rating // remove anchor items! // anchors.top: title.bottom // anchors.left: title.left // ... } Text { id: year // remove anchor items! // anchors.left: rating.right // anchors.top: rating.top // ... } }","title":"Row"},{"location":"themes/example-flixnet-ch5/#player-count","text":"This one will be a rounded rectangle with smiley faces in it indicating the number of players. The player count defaults to one; similarly to the rating, I'll show the component only if the player count is more than one. First I create the smiley face image (based on the Unicode \"filled smiling face\" symbol ( U+263B ). Again, it's square sized with a transparent background. Then create a background rounded Rectangle and the smiles Image in it, putting the whole thing in the Row created in the previous step: Rectangle { id: multiplayer // the Rectangle's size depends on the Image, // with some additional padding width: smileys . width + vpx ( 8 ) height: smileys . height + vpx ( 5 ) color: \"#555\" radius: vpx ( 3 ) visible: currentGame . players > 1 Image { id: smileys // 13px looked good for me width: vpx ( 13 ) * currentGame . players height: vpx ( 13 ) anchors.centerIn: parent source: \"assets/smiley.svg\" sourceSize { width: smileys . height ; height: smileys . height } fillMode: Image . TileHorizontally horizontalAlignment: Image . AlignLeft } }","title":"Player count"},{"location":"themes/example-flixnet-ch5/#developer","text":"Yet another simple Text in the Row: Text { id: developer text: currentGame . developer color: \"white\" font.pixelSize: vpx ( 16 ) font.family: globalFonts . sans } Tip A game may have multiple developers: if you just want to show them as a Text, you can use <Game>.developer , a string that simply lists them all. There's also <Game>.developerList , a JavaScript Array , if you wish to use them individually.","title":"Developer"},{"location":"themes/example-flixnet-ch5/#description","text":"A bigger text with set boundaries for alignment. If there is a short summary , I'll use that, otherwise the beginning of the full description. Text { id: description text: currentGame . description color: \"white\" font.pixelSize: vpx ( 18 ) font.family: globalFonts . sans // allow word wrapping, justify horizontally wrapMode: Text . WordWrap horizontalAlignment: Text . AlignJustify // if the text is too long, end it with an ellipsis (...) elide: Text . ElideRight anchors { left: detailsRow . left right: parent . horizontalCenter top: detailsRow . bottom ; topMargin: vpx ( 20 ) bottom: parent . verticalCenter ; bottomMargin: vpx ( 32 ) } }","title":"Description"},{"location":"themes/example-flixnet-ch5/#screenshot","text":"This should be below everything else on the screen -- in fact, if you look at the image at the beginning of this guide, it's actually going into the bottom-half region of the screen, reaching the row of images. As it's under everything else, I'll put its implementation at the top of the theme file, even before the collection PathView. I'll anchor the top and left edges of the image to the top right corner of the screen. To make it go slightly into the bottom half, I'll anchor the bottom edge to the vertical center of the screen, then add a small amount of negative margin to the bottom (a positive margin reduces the size of the element, while a negative one increases it). Image { id: screenshot asynchronous: true fillMode: Image . PreserveAspectFit // set the first screenshot as source, or nothing source: currentGame . assets . screenshots [ 0 ] || \"\" sourceSize { width: 512 ; height: 512 } anchors.top: parent . top anchors.right: parent . right anchors.bottom: parent . verticalCenter anchors.bottomMargin: vpx ( - 45 ) // the height of the collection label } Note Using negative margins kind of feels like a hack though, so depending on the situation you might prefer to use simple width/height properties. Help The screenshots are stored under assets.screenshots , which is a regular JavaScript Array . If it's empty, screenshots[0] will be undefined , and setting an undefined value as the source of an Image will produce a warning in the log. Setting it to an empty string, however, will not, so appending || \"\" as a fallback will silence the warning. An alternative solution could be is to use screenshots as a model in eg. a ListView, and the Image as delegate. You could then further extend it to periodically change the current visible screenshot. Tip You can also use the z property of the components to set their relative \"height\".","title":"Screenshot"},{"location":"themes/example-flixnet-ch5/#gradients","text":"There are two linear gradients (\"fade-ins\"), one from the left and one from the bottom of the image. Such effect can be added just like regular components, can be positioned, sized, animated, etc. But first of all, to use gradients you'll need the QtGraphicalEffects QML module: import QtQuick 2.0 import QtGraphicalEffects 1.0 FocusScope { // ... } Then, create the horizontal linear gradient inside our Image component: Image { id: screenshot // ... LinearGradient { width: parent . width * 0.25 height: parent . height anchors.left: parent . left // since it goes straight horizontally from the left, // the Y of the point doesn't really matter start: Qt . point ( 0 , 0 ) end: Qt . point ( width , 0 ) // at the left side (0%), it starts with a fully visible black // at the right side (100%), it blends into transparency gradient: Gradient { GradientStop { position: 0.0 ; color: \"black\" } GradientStop { position: 1.0 ; color: \"transparent\" } } } } And another for the bottom: LinearGradient { width: parent . width height: vpx ( 50 ) anchors.bottom: parent . bottom // goes straight up, so the X of the point doesn't really matter start: Qt . point ( 0 , height ) end: Qt . point ( 0 , 0 ) gradient: Gradient { GradientStop { position: 0.0 ; color: \"black\" } GradientStop { position: 1.0 ; color: \"transparent\" } } } And we're done!","title":"Gradients"},{"location":"themes/example-flixnet-ch5/#selection-marker","text":"Perhaps not easy to notice on the example images, but actually there's a white rectangular border around the current item's place on the topmost horizontal axis. It's position is fixed and does not move even during scrolling. I'll create an empty, border-only Rectangle for it. Since it's over everything else in the theme, I'll put it to the bottom of the whole file, after the gameAxisDelegate 's definition. Rectangle { id: selectionMarker width: vpx ( 240 ) height: vpx ( 135 ) color: \"transparent\" border { width: 3 ; color: \"white\" } anchors.left: parent . left anchors.leftMargin: vpx ( 100 ) anchors.top: parent . verticalCenter anchors.topMargin: vpx ( 45 ) }","title":"Selection marker"},{"location":"themes/example-flixnet-ch5/#opacity","text":"The currently active horizontal row is fully visible, while the rest are a bit darker. I'll set the opacity of the non-active rows to 60%. In addition, I'll add a light animation, so instead of a sudden change in the visibility, the rows gradually raise their opacity during scrolling. Simply add these two lines to the collectionAxisDelegate : Component { id: collectionAxisDelegate Item { // JS functions // width, height opacity: PathView . isCurrentItem ? 1.0 : 0.6 Behavior on opacity { NumberAnimation { duration: 150 } } // ... } }","title":"Opacity"},{"location":"themes/example-flixnet-ch5/#done","text":"With all these components added, it seems we're actually done! Here's the end result:","title":"Done!"},{"location":"themes/example-flixnet-intro/","text":"Step-by-step: Flixnet theme In this tutorial, we'll implement the theme above from scratch, inspired by the UI of a certain video streaming company. While the guide is intended to be beginner-friendly, this is a somewhat complex project, so you might want to be familiar with the QML basics and dynamic layout elements (see the QML tutorials ). Let's get started! Part 1: Base layout Part 2: Navigation Part 3: Using the API Part 4: Making things pretty Part 5: Game details Warning This tutorial was written a few years ago, and while it is regularly updated, some code blocks may not work out of the box or contain some inaccuracies. Feel free to report issues!","title":"Introduction"},{"location":"themes/example-flixnet-intro/#step-by-step-flixnet-theme","text":"In this tutorial, we'll implement the theme above from scratch, inspired by the UI of a certain video streaming company. While the guide is intended to be beginner-friendly, this is a somewhat complex project, so you might want to be familiar with the QML basics and dynamic layout elements (see the QML tutorials ). Let's get started! Part 1: Base layout Part 2: Navigation Part 3: Using the API Part 4: Making things pretty Part 5: Game details Warning This tutorial was written a few years ago, and while it is regularly updated, some code blocks may not work out of the box or contain some inaccuracies. Feel free to report issues!","title":"Step-by-step: Flixnet theme"},{"location":"themes/example-simple-ch1/","text":"Simple theme, Part 1: Base layout Initial files I'm on Linux, so my theme directory is at ~/.config/pegasus-frontend/themes . I'm creating a new directory called tutorial-simple , and in it my theme.cfg , like this: name : Simple theme author : M\u00e1ty\u00e1s Mustoha and the basic theme.qml : import QtQuick 2.0 FocusScope { } Now I open Pegasus and select this theme on the Settings screen. I'll keep Pegasus open during the development, and refresh the theme with the F5 key after changes. I also open the main log file ~/.config/pegasus-frontend/lastrun.log which will tell me if I've made any errors in the QML file. Tip You can use whatever text editor you like. Qt Creator is cross platform, has good auto-complete and syntax highlight features. For a more lightweight editor, Sublime Text with the QML package, Atom or Notepad++ could be used, among others. Note You might see .qmlc files popping up in your theme's directory. These are cache files, generated for faster loading. When copying the theme to a different machine, you don't have to bring them, they'll automatically get generated the next time you launch Pegasus. Base layout The theme consists of a left and right main panel, so I'll start by adding them first. The left menu panel will take 1/3 of the whole screen, and have a lighter gray color. The right panel will be darker and take the rest of the screen. import QtQuick 2.0 FocusScope { Rectangle { id: menu color: \"#555\" width: parent . width * 0.3 anchors.top: parent . top anchors.bottom: parent . bottom } Rectangle { id: content color: \"#222\" anchors.left: menu . right anchors.right: parent . right anchors.top: parent . top anchors.bottom: parent . bottom } } Help Using anchors you can define the position and size of elements relative to each other; see anchoring . If you now refresh Pegasus, you'll now see that the screen has been divided between the two shades of gray. You can also see the width of the left panel changing automatically when you resize the application's window.","title":"Part 1"},{"location":"themes/example-simple-ch1/#simple-theme-part-1-base-layout","text":"","title":"Simple theme, Part 1: Base layout"},{"location":"themes/example-simple-ch1/#initial-files","text":"I'm on Linux, so my theme directory is at ~/.config/pegasus-frontend/themes . I'm creating a new directory called tutorial-simple , and in it my theme.cfg , like this: name : Simple theme author : M\u00e1ty\u00e1s Mustoha and the basic theme.qml : import QtQuick 2.0 FocusScope { } Now I open Pegasus and select this theme on the Settings screen. I'll keep Pegasus open during the development, and refresh the theme with the F5 key after changes. I also open the main log file ~/.config/pegasus-frontend/lastrun.log which will tell me if I've made any errors in the QML file. Tip You can use whatever text editor you like. Qt Creator is cross platform, has good auto-complete and syntax highlight features. For a more lightweight editor, Sublime Text with the QML package, Atom or Notepad++ could be used, among others. Note You might see .qmlc files popping up in your theme's directory. These are cache files, generated for faster loading. When copying the theme to a different machine, you don't have to bring them, they'll automatically get generated the next time you launch Pegasus.","title":"Initial files"},{"location":"themes/example-simple-ch1/#base-layout","text":"The theme consists of a left and right main panel, so I'll start by adding them first. The left menu panel will take 1/3 of the whole screen, and have a lighter gray color. The right panel will be darker and take the rest of the screen. import QtQuick 2.0 FocusScope { Rectangle { id: menu color: \"#555\" width: parent . width * 0.3 anchors.top: parent . top anchors.bottom: parent . bottom } Rectangle { id: content color: \"#222\" anchors.left: menu . right anchors.right: parent . right anchors.top: parent . top anchors.bottom: parent . bottom } } Help Using anchors you can define the position and size of elements relative to each other; see anchoring . If you now refresh Pegasus, you'll now see that the screen has been divided between the two shades of gray. You can also see the width of the left panel changing automatically when you resize the application's window.","title":"Base layout"},{"location":"themes/example-simple-ch2/","text":"Simple theme, Part 2: Collections and the game list Left panel Let's continue with the menu panel, as this will be the more complex part of the theme. I'd like to add a 50px padding around the contents of the left panel. But the players have all kinds of screens and devices, with larger or smaller resolutions -- how can I define it in a resolution-independent way? You can define values using percentages, like we did with the width earlier, but for cases where more precision is desired, the vpx function might be of use. These virtual pixel values will automatically scale up or down depending on the screen resolution: a vpx(60) value will turn into 60px on a 720p screen, 90 real pixels on 1080p and 40 on 480p, while keeping the aspect ratio. Combining them with anchors and regular percentages, you can define and position elements in a quite detailed way. So, I want to add a 50px padding for the items -- and by this, I mean a padding that will be 50px on a screen with 1280x720 resolution, and scale up or down for other sizes. For later use, I'll store the amount of the remaining \"content width\" in a property: Rectangle { id: menu property real contentWidth: width - vpx ( 100 ) color: \"#555\" width: parent . width * 0.3 anchors.top: parent . top anchors.bottom: parent . bottom } The current collection Pegasus provides access to the collections using api.collections ( reference ). This is a list of items, and we can access one item in it by the item's position (\"index\") (see the get function ). Let's create a property for tracking the current collection. Just for testing, I'll set it to the very first collection item, then we'll implement collection changing later. import QtQuick 2.0 FocusScope { property var currentCollection: api . collections . get ( 0 ) // ... } Collection logo Lets add the collection's logo to the panel. First you'll need a bunch of game system logo images. I've borrowed them from EmulationStation (original: Nils Bonenberger, CC-BY-NC-SA), except the RetroPie logo (original: Florian M\u00fcller, CC-BY-NC-SA). You can get them here . The file names match the system names from EmulationStation. Simply create a new directory inside your theme's folder, eg. assets , and extract them there. After that, I add an Image element inside the menu Rectangle: Rectangle { id: menu property real contentWidth: width - vpx ( 100 ) color: \"#555\" width: parent . width * 0.3 anchors.top: parent . top anchors.bottom: parent . bottom Image { id: collectionLogo width: parent . contentWidth height: vpx ( 60 ) fillMode: Image . PreserveAspectFit source: \"assets/\" + currentCollection . shortName + \".svg\" asynchronous: true anchors.horizontalCenter: parent . horizontalCenter anchors.top: parent . top anchors.topMargin: vpx ( 50 ) } } Some interesting things here: source is the concatenation of three strings, shortName being the short name for a collection (eg. nes , gba , ...). asynchronous will load the image in the background. By default ( false ), the program will wait until the Image is fully loaded, but during this time it cannot respond to user input. Since images may take a long time to load depending on the device, asynchronous loading is preferred in most cases. Changing collections Pressing left or right feels kind of natural to use for selecting the next/previous collection. I'll add a new property to track the index of the current collection, starting with 0 initially. Then I handle of the Left and Right keys at the top of the whole FocusScope; I have to make sure the index doesn't turn negative or go over the highest index ( count - 1 ); when they would, I restart the counting from the other end, which will produce a looping effect. I can do this with some JavaScript logic: import QtQuick 2.0 FocusScope { property int currentCollectionIndex: 0 property var currentCollection: api . collections . get ( currentCollectionIndex ) // decrease (and possibly loop) the collection index Keys.onLeftPressed: { if ( currentCollectionIndex <= 0 ) currentCollectionIndex = api . collections . count - 1 ; else currentCollectionIndex -- ; } // increase (and possibly loop) the collection index Keys.onRightPressed: { if ( currentCollectionIndex >= api . collections . count - 1 ) currentCollectionIndex = 0 ; else currentCollectionIndex ++ ; } Rectangle { // ... } Rectangle { // ... } } After a refresh, pressing Left and Right should now change the logo on the screen. Yay! Note Assuming you have more than one collection, of course. Tip Handling keyboard keys also enables gamepad navigation. See the controls page about how keys and buttons are related. Tip Often there are more than one way to solve problems. Instead of manually handling the collection index, I could have used a ListView. We do that in the Flixnet tutorial , and also for the game list. Game list This is going to be actually the most complex piece of the theme. The games for the currently selected collection can be accessed through currentCollection.games , which is, similarly to the collections, a list containing games. This time we'll use a ListView that will create the menu entries and handle the index for us. Returning to the menu Rectangle, I add a ListView after the logo, first setting just the dimensions: Rectangle { id: menu // ... Image { /* ... */ } ListView { id: gameView width: parent . contentWidth anchors.horizontalCenter: parent . horizontalCenter anchors.top: collectionLogo . bottom anchors.bottom: parent . bottom anchors.margins: vpx ( 50 ) focus: true } } Now to actually see something, ListView needs a Model: a list of items, and a Delegate: the definition of how one item should look like on the screen. Our model will be the games of the currently selected collection, and for every game, the visual representation will be a text item: ListView { id: gameView model: currentCollection . games delegate: Text { text: modelData . title } // anchors, etc. } You should now see the list of games, changing with the selected collection on pressing Left / Right . Note games is a list of Game objects. modelData in the delegate will be one Game object of the Model. I'll do a quick reorganization in the code: I move the Delegate definition to a separate object to make the code cleaner Rectangle { id: menu // ... Image { /* ... */ } ListView { id: gameView model: currentCollection . games delegate: gameViewDelegate width: parent . contentWidth anchors.horizontalCenter: parent . horizontalCenter anchors.top: collectionLogo . bottom anchors.bottom: parent . bottom anchors.margins: vpx ( 50 ) focus: true } Component { id: gameViewDelegate Text { text: modelData . title } } } Tip Component is a special element that defines a QML document. Just as QML files can have only one root element, Components can have only one child. You could actually move the Text to a separate file (eg. GameListItem.qml ) and use the file's name to set the delegate (eg. delegate: GameListItem { } ). Let's continue with tweaking the menu items: Component { id: gameViewDelegate Text { text: modelData . title // white, 20px, condensed font color: \"white\" font.family: globalFonts . condensed font.pixelSize: vpx ( 20 ) // the size of the whole text box, // a bit taller than the text size for a nice padding width: ListView . view . width height: vpx ( 36 ) // align the text vertically in the middle of the text area verticalAlignment: Text . AlignVCenter // if the text is too long, end it with ellipsis (three dots) elide: Text . ElideRight } } This is how it should look like: To see which one of the menu items is the selected one, I'll change its color and make it bigger and bold: Component { id: gameViewDelegate Text { text: modelData . title // orange if this item is the currently selected one, white otherwise color: ListView . isCurrentItem ? \"orange\" : \"white\" font.family: globalFonts . condensed // bigger if selected font.pixelSize: ListView . isCurrentItem ? vpx ( 24 ) : vpx ( 20 ) // bold if selected (hint: isCurrentItem is already a true/false value) font.bold: ListView . isCurrentItem width: ListView . view . width height: vpx ( 36 ) verticalAlignment: Text . AlignVCenter elide: Text . ElideRight } } Help When setting values, the X ? A : B form is called \"inline-if\": if the condition X is true, A will be used, otherwise B . In our case, it would equal to the following JavaScript code: if ( ListView . isCurrentItem ) return \"orange\" else return \"white\" (which you can also use, if you wish). The list should now scroll around with a visible highlight for the current selection. Launching games The last feature required to make our theme functional is launching games. Game objects from the API have a launch() command you can use. Simply call it on the game list delegate, for example on Enter : Component { id: gameViewDelegate Text { // ... Keys.onReturnPressed: modelData . launch () } } Help Technically the Enter next to the letter keys is called \"Return\", and the one on the numeric pad is \"Enter\". Careful not to mix them up. And with this, we have a functional theme! Tweaks Some additional (and optional) graphical tweaks to try out for extra fancyness. Clipping While scrolling, you might have noticed that items at the top and the bottom of the list seem to go out of the bounds of the ListView's area. Delegates are fully drawn on the screen if they are at least partially visible; to make sure nothing shows up outside the ListView's area, you can use the clip property: ListView { id: gameView // ... focus: true clip: true } Now the ListView will cut the drawing at its borders. Centering the current item It'd be nice if the currently selected item would try to stay in the middle of the list: We can set this by defining the \"highlight range\"; the ListView will then try to scroll the list so the currently selected item falls into this range. The highlight range is defined by the start and end position. For our vertical ListView, these are the distances from the top edge of the item, in pixels. We can get the vertical center of the ListView simply as height / 2 , and the height of one Text item was set to 36px previously. To position it exactly in the middle, I'll set the start of the range 18px above the center, and end it 18px below. ListView { id: gameView // ... highlightRangeMode: ListView . ApplyRange preferredHighlightBegin: height * 0.5 - vpx ( 18 ) preferredHighlightEnd: height * 0.5 + vpx ( 18 ) } which should give the desired result. However, when you change the collection, there is a few seconds of scrolling to the index of the newly selected game list. To disable this, and jump to the selected item instantly, set animation duration to zero: ListView { id: gameView // ... highlightRangeMode: ListView . ApplyRange highlightMoveDuration: 0 preferredHighlightBegin: height * 0.5 - vpx ( 18 ) preferredHighlightEnd: height * 0.5 + vpx ( 18 ) }","title":"Part 2"},{"location":"themes/example-simple-ch2/#simple-theme-part-2-collections-and-the-game-list","text":"","title":"Simple theme, Part 2: Collections and the game list"},{"location":"themes/example-simple-ch2/#left-panel","text":"Let's continue with the menu panel, as this will be the more complex part of the theme. I'd like to add a 50px padding around the contents of the left panel. But the players have all kinds of screens and devices, with larger or smaller resolutions -- how can I define it in a resolution-independent way? You can define values using percentages, like we did with the width earlier, but for cases where more precision is desired, the vpx function might be of use. These virtual pixel values will automatically scale up or down depending on the screen resolution: a vpx(60) value will turn into 60px on a 720p screen, 90 real pixels on 1080p and 40 on 480p, while keeping the aspect ratio. Combining them with anchors and regular percentages, you can define and position elements in a quite detailed way. So, I want to add a 50px padding for the items -- and by this, I mean a padding that will be 50px on a screen with 1280x720 resolution, and scale up or down for other sizes. For later use, I'll store the amount of the remaining \"content width\" in a property: Rectangle { id: menu property real contentWidth: width - vpx ( 100 ) color: \"#555\" width: parent . width * 0.3 anchors.top: parent . top anchors.bottom: parent . bottom }","title":"Left panel"},{"location":"themes/example-simple-ch2/#the-current-collection","text":"Pegasus provides access to the collections using api.collections ( reference ). This is a list of items, and we can access one item in it by the item's position (\"index\") (see the get function ). Let's create a property for tracking the current collection. Just for testing, I'll set it to the very first collection item, then we'll implement collection changing later. import QtQuick 2.0 FocusScope { property var currentCollection: api . collections . get ( 0 ) // ... }","title":"The current collection"},{"location":"themes/example-simple-ch2/#collection-logo","text":"Lets add the collection's logo to the panel. First you'll need a bunch of game system logo images. I've borrowed them from EmulationStation (original: Nils Bonenberger, CC-BY-NC-SA), except the RetroPie logo (original: Florian M\u00fcller, CC-BY-NC-SA). You can get them here . The file names match the system names from EmulationStation. Simply create a new directory inside your theme's folder, eg. assets , and extract them there. After that, I add an Image element inside the menu Rectangle: Rectangle { id: menu property real contentWidth: width - vpx ( 100 ) color: \"#555\" width: parent . width * 0.3 anchors.top: parent . top anchors.bottom: parent . bottom Image { id: collectionLogo width: parent . contentWidth height: vpx ( 60 ) fillMode: Image . PreserveAspectFit source: \"assets/\" + currentCollection . shortName + \".svg\" asynchronous: true anchors.horizontalCenter: parent . horizontalCenter anchors.top: parent . top anchors.topMargin: vpx ( 50 ) } } Some interesting things here: source is the concatenation of three strings, shortName being the short name for a collection (eg. nes , gba , ...). asynchronous will load the image in the background. By default ( false ), the program will wait until the Image is fully loaded, but during this time it cannot respond to user input. Since images may take a long time to load depending on the device, asynchronous loading is preferred in most cases.","title":"Collection logo"},{"location":"themes/example-simple-ch2/#changing-collections","text":"Pressing left or right feels kind of natural to use for selecting the next/previous collection. I'll add a new property to track the index of the current collection, starting with 0 initially. Then I handle of the Left and Right keys at the top of the whole FocusScope; I have to make sure the index doesn't turn negative or go over the highest index ( count - 1 ); when they would, I restart the counting from the other end, which will produce a looping effect. I can do this with some JavaScript logic: import QtQuick 2.0 FocusScope { property int currentCollectionIndex: 0 property var currentCollection: api . collections . get ( currentCollectionIndex ) // decrease (and possibly loop) the collection index Keys.onLeftPressed: { if ( currentCollectionIndex <= 0 ) currentCollectionIndex = api . collections . count - 1 ; else currentCollectionIndex -- ; } // increase (and possibly loop) the collection index Keys.onRightPressed: { if ( currentCollectionIndex >= api . collections . count - 1 ) currentCollectionIndex = 0 ; else currentCollectionIndex ++ ; } Rectangle { // ... } Rectangle { // ... } } After a refresh, pressing Left and Right should now change the logo on the screen. Yay! Note Assuming you have more than one collection, of course. Tip Handling keyboard keys also enables gamepad navigation. See the controls page about how keys and buttons are related. Tip Often there are more than one way to solve problems. Instead of manually handling the collection index, I could have used a ListView. We do that in the Flixnet tutorial , and also for the game list.","title":"Changing collections"},{"location":"themes/example-simple-ch2/#game-list","text":"This is going to be actually the most complex piece of the theme. The games for the currently selected collection can be accessed through currentCollection.games , which is, similarly to the collections, a list containing games. This time we'll use a ListView that will create the menu entries and handle the index for us. Returning to the menu Rectangle, I add a ListView after the logo, first setting just the dimensions: Rectangle { id: menu // ... Image { /* ... */ } ListView { id: gameView width: parent . contentWidth anchors.horizontalCenter: parent . horizontalCenter anchors.top: collectionLogo . bottom anchors.bottom: parent . bottom anchors.margins: vpx ( 50 ) focus: true } } Now to actually see something, ListView needs a Model: a list of items, and a Delegate: the definition of how one item should look like on the screen. Our model will be the games of the currently selected collection, and for every game, the visual representation will be a text item: ListView { id: gameView model: currentCollection . games delegate: Text { text: modelData . title } // anchors, etc. } You should now see the list of games, changing with the selected collection on pressing Left / Right . Note games is a list of Game objects. modelData in the delegate will be one Game object of the Model. I'll do a quick reorganization in the code: I move the Delegate definition to a separate object to make the code cleaner Rectangle { id: menu // ... Image { /* ... */ } ListView { id: gameView model: currentCollection . games delegate: gameViewDelegate width: parent . contentWidth anchors.horizontalCenter: parent . horizontalCenter anchors.top: collectionLogo . bottom anchors.bottom: parent . bottom anchors.margins: vpx ( 50 ) focus: true } Component { id: gameViewDelegate Text { text: modelData . title } } } Tip Component is a special element that defines a QML document. Just as QML files can have only one root element, Components can have only one child. You could actually move the Text to a separate file (eg. GameListItem.qml ) and use the file's name to set the delegate (eg. delegate: GameListItem { } ). Let's continue with tweaking the menu items: Component { id: gameViewDelegate Text { text: modelData . title // white, 20px, condensed font color: \"white\" font.family: globalFonts . condensed font.pixelSize: vpx ( 20 ) // the size of the whole text box, // a bit taller than the text size for a nice padding width: ListView . view . width height: vpx ( 36 ) // align the text vertically in the middle of the text area verticalAlignment: Text . AlignVCenter // if the text is too long, end it with ellipsis (three dots) elide: Text . ElideRight } } This is how it should look like: To see which one of the menu items is the selected one, I'll change its color and make it bigger and bold: Component { id: gameViewDelegate Text { text: modelData . title // orange if this item is the currently selected one, white otherwise color: ListView . isCurrentItem ? \"orange\" : \"white\" font.family: globalFonts . condensed // bigger if selected font.pixelSize: ListView . isCurrentItem ? vpx ( 24 ) : vpx ( 20 ) // bold if selected (hint: isCurrentItem is already a true/false value) font.bold: ListView . isCurrentItem width: ListView . view . width height: vpx ( 36 ) verticalAlignment: Text . AlignVCenter elide: Text . ElideRight } } Help When setting values, the X ? A : B form is called \"inline-if\": if the condition X is true, A will be used, otherwise B . In our case, it would equal to the following JavaScript code: if ( ListView . isCurrentItem ) return \"orange\" else return \"white\" (which you can also use, if you wish). The list should now scroll around with a visible highlight for the current selection.","title":"Game list"},{"location":"themes/example-simple-ch2/#launching-games","text":"The last feature required to make our theme functional is launching games. Game objects from the API have a launch() command you can use. Simply call it on the game list delegate, for example on Enter : Component { id: gameViewDelegate Text { // ... Keys.onReturnPressed: modelData . launch () } } Help Technically the Enter next to the letter keys is called \"Return\", and the one on the numeric pad is \"Enter\". Careful not to mix them up. And with this, we have a functional theme!","title":"Launching games"},{"location":"themes/example-simple-ch2/#tweaks","text":"Some additional (and optional) graphical tweaks to try out for extra fancyness.","title":"Tweaks"},{"location":"themes/example-simple-ch2/#clipping","text":"While scrolling, you might have noticed that items at the top and the bottom of the list seem to go out of the bounds of the ListView's area. Delegates are fully drawn on the screen if they are at least partially visible; to make sure nothing shows up outside the ListView's area, you can use the clip property: ListView { id: gameView // ... focus: true clip: true } Now the ListView will cut the drawing at its borders.","title":"Clipping"},{"location":"themes/example-simple-ch2/#centering-the-current-item","text":"It'd be nice if the currently selected item would try to stay in the middle of the list: We can set this by defining the \"highlight range\"; the ListView will then try to scroll the list so the currently selected item falls into this range. The highlight range is defined by the start and end position. For our vertical ListView, these are the distances from the top edge of the item, in pixels. We can get the vertical center of the ListView simply as height / 2 , and the height of one Text item was set to 36px previously. To position it exactly in the middle, I'll set the start of the range 18px above the center, and end it 18px below. ListView { id: gameView // ... highlightRangeMode: ListView . ApplyRange preferredHighlightBegin: height * 0.5 - vpx ( 18 ) preferredHighlightEnd: height * 0.5 + vpx ( 18 ) } which should give the desired result. However, when you change the collection, there is a few seconds of scrolling to the index of the newly selected game list. To disable this, and jump to the selected item instantly, set animation duration to zero: ListView { id: gameView // ... highlightRangeMode: ListView . ApplyRange highlightMoveDuration: 0 preferredHighlightBegin: height * 0.5 - vpx ( 18 ) preferredHighlightEnd: height * 0.5 + vpx ( 18 ) }","title":"Centering the current item"},{"location":"themes/example-simple-ch3/","text":"Simple theme, Part 2: Game details Game information With the game selection menu done, let's continue with the right side of the theme, the game informations. Metadata and assets of the currently selected game will be shown here; unlike the dynamic menu, these will be simple Text and Image objects, with their content coming from the API. We'll show the following information, in order: box art game title developer and release year (in one row) game description The current game We can get the current game using the index provided by the game list ListView. Let's make a shortcut for it: FocusScope { property int currentCollectionIndex: 0 property var currentCollection: api . collections . get ( currentCollectionIndex ) property var currentGame: currentCollection . games . get ( gameView . currentIndex ) // ... } Help I'm placing it at the top of the theme to make it accessible in all elements. If I'd place it in, for example, content , then I'd need to write content.currentGame . Use whichever you prefer. Box art Add an Image object to the right side panel, with its source set to the current game's box art asset. The image will take the upper half of the screen, with a 50px padding around. As the box arts of different games may have different shapes (portrait, landscape, extra wide, etc.), it might be useful to define the maximum area an image may take up, and fit them in this area. Rectangle { id: content color: \"#222\" anchors.left: menu . right anchors.right: parent . right anchors.top: parent . top anchors.bottom: parent . bottom Image { id: cover anchors.top: parent . top anchors.right: parent . right anchors.left: parent . left anchors.margins: vpx ( 50 ) anchors.bottom: parent . verticalCenter anchors.bottomMargin: 0 fillMode: Image . PreserveAspectFit horizontalAlignment: Image . AlignRight source: currentGame . assets . boxFront sourceSize { width: 1024 ; height: 1024 } asynchronous: true } } Box art images might be quite big in resolution, so this time I've also set sourceSize : it limits the maximum amount of memory the image will take up. If the image is larger than this, it will be scaled down, keeping the aspect ratio. In this particular case, I've set it to scale down to 1024 \u00d7 1024 pixels (taking up about/at most 1024 \u00d7 1024 \u00d7 3 bytes = 3 MiB space in the memory). Column and Row The QML Column and Row object are great tools for aligning a fixed number of elements. In this case, the box art and the further Text items could be put into a Column that would anchors.fill its parent with a 50px anchors.margin , so I wouldn't have to define it for the Image itself and the other Texts. So why I didn't use it? Column and Row works the best when the spacing between the elements is the same, but in this theme, I'd like to set some custom spacing between the elements later. An alternative would be to put the elements into an Item. Perhaps you might want to try it as a practice? Title The rest of the game informations will be simple Text objects. The only thing that needs more attention is that the texts may be too long to fit on the screen, so we'll define a text area (similarly to the box art), and hide what doesn't fit into them. So, for the title: Rectangle { id: content // ... Image { /* ... */ } Text { id: title text: currentGame . title // white, big bold sans-serif font color: \"white\" font.family: globalFonts . sans font.pixelSize: vpx ( 42 ) font.bold: true horizontalAlignment: Text . AlignRight // if it's too long, end it with an ellipsis elide: Text . ElideRight // 40px below the box art anchors.top: cover . bottom anchors.topMargin: vpx ( 40 ) // left and right edges same as the image anchors.left: cover . left anchors.right: cover . right } } Developer and release I'll put two Text items in a Row, and move the Row under the title. I didn't bother wth a maximum text width here, as company names tend to be not too long, while the release year should be just four numbers. The code: Rectangle { id: content // ... Row { id: shortInfo anchors.top: title . bottom anchors.right: title . right spacing: vpx ( 10 ) Text { text: currentGame . developer color: \"white\" font.pixelSize: vpx ( 18 ) font.family: globalFonts . sans } Text { text: currentGame . year color: \"white\" font.pixelSize: vpx ( 18 ) font.family: globalFonts . sans visible: currentGame . year > 0 // !! } } } Note that I only show the year when it's greater than 0. If we have no information about when the game was released, <Game>.year will be 0, which looks silly on the screen. Description A multiline text area. If the game has a short summary, it'll show that, otherwise the detailed description (or stay empty if none is available). Rectangle { id: content // ... Text { id: description text: currentGame . summary || currentGame . description color: \"white\" font.pixelSize: vpx ( 18 ) font.family: globalFonts . sans wrapMode: Text . WordWrap horizontalAlignment: Text . AlignRight elide: Text . ElideRight anchors.top: shortInfo . bottom anchors.topMargin: vpx ( 40 ) anchors.bottom: parent . bottom anchors.bottomMargin: vpx ( 50 ) anchors.left: cover . left anchors.right: cover . right } } Conclusion With all these changes, our theme is now complete and should look like this: Sure, perhaps not the most attractive yet, but I hope it helped learning theme creation. Feel free to tweak it to you liking, or make a new one based on it. Have fun!","title":"Part 3"},{"location":"themes/example-simple-ch3/#simple-theme-part-2-game-details","text":"","title":"Simple theme, Part 2: Game details"},{"location":"themes/example-simple-ch3/#game-information","text":"With the game selection menu done, let's continue with the right side of the theme, the game informations. Metadata and assets of the currently selected game will be shown here; unlike the dynamic menu, these will be simple Text and Image objects, with their content coming from the API. We'll show the following information, in order: box art game title developer and release year (in one row) game description","title":"Game information"},{"location":"themes/example-simple-ch3/#the-current-game","text":"We can get the current game using the index provided by the game list ListView. Let's make a shortcut for it: FocusScope { property int currentCollectionIndex: 0 property var currentCollection: api . collections . get ( currentCollectionIndex ) property var currentGame: currentCollection . games . get ( gameView . currentIndex ) // ... } Help I'm placing it at the top of the theme to make it accessible in all elements. If I'd place it in, for example, content , then I'd need to write content.currentGame . Use whichever you prefer.","title":"The current game"},{"location":"themes/example-simple-ch3/#box-art","text":"Add an Image object to the right side panel, with its source set to the current game's box art asset. The image will take the upper half of the screen, with a 50px padding around. As the box arts of different games may have different shapes (portrait, landscape, extra wide, etc.), it might be useful to define the maximum area an image may take up, and fit them in this area. Rectangle { id: content color: \"#222\" anchors.left: menu . right anchors.right: parent . right anchors.top: parent . top anchors.bottom: parent . bottom Image { id: cover anchors.top: parent . top anchors.right: parent . right anchors.left: parent . left anchors.margins: vpx ( 50 ) anchors.bottom: parent . verticalCenter anchors.bottomMargin: 0 fillMode: Image . PreserveAspectFit horizontalAlignment: Image . AlignRight source: currentGame . assets . boxFront sourceSize { width: 1024 ; height: 1024 } asynchronous: true } } Box art images might be quite big in resolution, so this time I've also set sourceSize : it limits the maximum amount of memory the image will take up. If the image is larger than this, it will be scaled down, keeping the aspect ratio. In this particular case, I've set it to scale down to 1024 \u00d7 1024 pixels (taking up about/at most 1024 \u00d7 1024 \u00d7 3 bytes = 3 MiB space in the memory). Column and Row The QML Column and Row object are great tools for aligning a fixed number of elements. In this case, the box art and the further Text items could be put into a Column that would anchors.fill its parent with a 50px anchors.margin , so I wouldn't have to define it for the Image itself and the other Texts. So why I didn't use it? Column and Row works the best when the spacing between the elements is the same, but in this theme, I'd like to set some custom spacing between the elements later. An alternative would be to put the elements into an Item. Perhaps you might want to try it as a practice?","title":"Box art"},{"location":"themes/example-simple-ch3/#title","text":"The rest of the game informations will be simple Text objects. The only thing that needs more attention is that the texts may be too long to fit on the screen, so we'll define a text area (similarly to the box art), and hide what doesn't fit into them. So, for the title: Rectangle { id: content // ... Image { /* ... */ } Text { id: title text: currentGame . title // white, big bold sans-serif font color: \"white\" font.family: globalFonts . sans font.pixelSize: vpx ( 42 ) font.bold: true horizontalAlignment: Text . AlignRight // if it's too long, end it with an ellipsis elide: Text . ElideRight // 40px below the box art anchors.top: cover . bottom anchors.topMargin: vpx ( 40 ) // left and right edges same as the image anchors.left: cover . left anchors.right: cover . right } }","title":"Title"},{"location":"themes/example-simple-ch3/#developer-and-release","text":"I'll put two Text items in a Row, and move the Row under the title. I didn't bother wth a maximum text width here, as company names tend to be not too long, while the release year should be just four numbers. The code: Rectangle { id: content // ... Row { id: shortInfo anchors.top: title . bottom anchors.right: title . right spacing: vpx ( 10 ) Text { text: currentGame . developer color: \"white\" font.pixelSize: vpx ( 18 ) font.family: globalFonts . sans } Text { text: currentGame . year color: \"white\" font.pixelSize: vpx ( 18 ) font.family: globalFonts . sans visible: currentGame . year > 0 // !! } } } Note that I only show the year when it's greater than 0. If we have no information about when the game was released, <Game>.year will be 0, which looks silly on the screen.","title":"Developer and release"},{"location":"themes/example-simple-ch3/#description","text":"A multiline text area. If the game has a short summary, it'll show that, otherwise the detailed description (or stay empty if none is available). Rectangle { id: content // ... Text { id: description text: currentGame . summary || currentGame . description color: \"white\" font.pixelSize: vpx ( 18 ) font.family: globalFonts . sans wrapMode: Text . WordWrap horizontalAlignment: Text . AlignRight elide: Text . ElideRight anchors.top: shortInfo . bottom anchors.topMargin: vpx ( 40 ) anchors.bottom: parent . bottom anchors.bottomMargin: vpx ( 50 ) anchors.left: cover . left anchors.right: cover . right } }","title":"Description"},{"location":"themes/example-simple-ch3/#conclusion","text":"With all these changes, our theme is now complete and should look like this: Sure, perhaps not the most attractive yet, but I hope it helped learning theme creation. Feel free to tweak it to you liking, or make a new one based on it. Have fun!","title":"Conclusion"},{"location":"themes/example-simple-intro/","text":"Step by step: Simple theme In this tutorial, I'll show the theme creation in practice by implementing the theme above from scratch. Before we start, you might want to be familiar with the QML basics and dynamic layout elements (see the QML tutorials ). The theme has the list of games on the left, in a scrollable menu, with the collection's logo above it. Then some basic information is shown on the right, like title, developer, release year, description, and also a box art. Let's get started! Part 1: Base layout Part 2: Collections and game list Part 3: Game details Warning This tutorial was written a few years ago, and while it is regularly updated, some code blocks may not work out of the box or contain some inaccuracies. Feel free to report issues!","title":"Introduction"},{"location":"themes/example-simple-intro/#step-by-step-simple-theme","text":"In this tutorial, I'll show the theme creation in practice by implementing the theme above from scratch. Before we start, you might want to be familiar with the QML basics and dynamic layout elements (see the QML tutorials ). The theme has the list of games on the left, in a scrollable menu, with the collection's logo above it. Then some basic information is shown on the right, like title, developer, release year, description, and also a box art. Let's get started! Part 1: Base layout Part 2: Collections and game list Part 3: Game details Warning This tutorial was written a few years ago, and while it is regularly updated, some code blocks may not work out of the box or contain some inaccuracies. Feel free to report issues!","title":"Step by step: Simple theme"},{"location":"themes/extra/","text":"Special features This page lists some additional features Pegasus provides for themes. Blurhash Blurhash is a way to generate placeholders for images by using a short string to represent them. For more details, as well as producing BlurHash strings, visit blurha.sh . To use them in a theme, set an Image component's source field to a special format like this: Image { source: \"image://blurhash/\" + encodeURIComponent ( yourHash ) width: someWidth height: someHeight } For example: Image { source: \"image://blurhash/\" + encodeURIComponent ( \"LEHV6nWB2yk8pyoJadR*.7kCMdnj\" ) width: 300 height: 200 } encodeURIComponent Technically the source field is an URI, and certain characters that BlurHash strings use, like % signs, are not allowed there. encodeURIComponent is a standard JavaScript function that encodes this string to a safe to use format. sourceSize By default the placeholder images are generated in a small resolution (24\u00d724) then scaled to match the Image's size. If you wish to increase or decrease this internal resolution, you can use the Image's sourceSize property for that. Note that in most cases increasing this resolution does not produce better visual results. Virtual screen coordinates Deprecated While the methods described here still work, in new themes you should write your own scaling function if necessary. To get the properties of the device's screen (eg. DPI), you can use the QML Screen object. To get the size of the window, you can check the width and height properties of your theme's root element (ie. the FocusScope ), as it will be set to fill the whole window. When you load a theme, its main component (the FocusScope above) will be set to fill the whole screen. The top left corner of the screen is (0,0), with the X axis growing right and the Y axis growing downwards. While positioning elements on the screen, you should make sure that your theme works well with multiple aspect ratios and screen resolutions. Generally in QML this isn't hard because you can tell the position and size of elements compared to others using anchors (eg. align an element right above or below to another -- see the QML tutorials ). When you do have to position or size things manually, it is common to use percentages or create different themes for different aspect ratios. For better support of different screen sizes, Pegasus also provides an optional virtual coordinate system . You can treat the screen as one with the resolution of at least 1280x720 virtual pixels (16:9 aspect ratio), and use integer pixel values, which will then scale to the correct physical value according to the screen's real resolution. If the screen's aspect ratio is smaller than 16:9 (eg. 4:3 or 5:4), then the virtual screen will be taller than 720 virtual pixels, but still have 1280 as a fixed width. If the aspect ratio is wider (eg. 21:9), then the virtual height will remain to be 720, but the width will be bigger. This system can be useful when you want to express precise details as integer values, like spacing, text sizes, width/height, etc. To use virtual pixel values, simply put your number inside a function called vpx . For example, instead of width: 50 you would use width: vpx ( 50 ) which will turn into 50 real pixels on a 720p screen, scale up to 150px on a 4K TV, and scale down to 25px on a smaller 360p device. Using virtual pixel values is optional, but often more intuitive than percentages with several digits of precision. Depending on your situations, you might prefer one over the other, or use both of them. Feel free to experiment! Tip Using the virtual coordinate system does not decrease image quality.","title":"Special features"},{"location":"themes/extra/#special-features","text":"This page lists some additional features Pegasus provides for themes.","title":"Special features"},{"location":"themes/extra/#blurhash","text":"Blurhash is a way to generate placeholders for images by using a short string to represent them. For more details, as well as producing BlurHash strings, visit blurha.sh . To use them in a theme, set an Image component's source field to a special format like this: Image { source: \"image://blurhash/\" + encodeURIComponent ( yourHash ) width: someWidth height: someHeight } For example: Image { source: \"image://blurhash/\" + encodeURIComponent ( \"LEHV6nWB2yk8pyoJadR*.7kCMdnj\" ) width: 300 height: 200 } encodeURIComponent Technically the source field is an URI, and certain characters that BlurHash strings use, like % signs, are not allowed there. encodeURIComponent is a standard JavaScript function that encodes this string to a safe to use format. sourceSize By default the placeholder images are generated in a small resolution (24\u00d724) then scaled to match the Image's size. If you wish to increase or decrease this internal resolution, you can use the Image's sourceSize property for that. Note that in most cases increasing this resolution does not produce better visual results.","title":"Blurhash"},{"location":"themes/extra/#virtual-screen-coordinates","text":"Deprecated While the methods described here still work, in new themes you should write your own scaling function if necessary. To get the properties of the device's screen (eg. DPI), you can use the QML Screen object. To get the size of the window, you can check the width and height properties of your theme's root element (ie. the FocusScope ), as it will be set to fill the whole window. When you load a theme, its main component (the FocusScope above) will be set to fill the whole screen. The top left corner of the screen is (0,0), with the X axis growing right and the Y axis growing downwards. While positioning elements on the screen, you should make sure that your theme works well with multiple aspect ratios and screen resolutions. Generally in QML this isn't hard because you can tell the position and size of elements compared to others using anchors (eg. align an element right above or below to another -- see the QML tutorials ). When you do have to position or size things manually, it is common to use percentages or create different themes for different aspect ratios. For better support of different screen sizes, Pegasus also provides an optional virtual coordinate system . You can treat the screen as one with the resolution of at least 1280x720 virtual pixels (16:9 aspect ratio), and use integer pixel values, which will then scale to the correct physical value according to the screen's real resolution. If the screen's aspect ratio is smaller than 16:9 (eg. 4:3 or 5:4), then the virtual screen will be taller than 720 virtual pixels, but still have 1280 as a fixed width. If the aspect ratio is wider (eg. 21:9), then the virtual height will remain to be 720, but the width will be bigger. This system can be useful when you want to express precise details as integer values, like spacing, text sizes, width/height, etc. To use virtual pixel values, simply put your number inside a function called vpx . For example, instead of width: 50 you would use width: vpx ( 50 ) which will turn into 50 real pixels on a 720p screen, scale up to 150px on a 4K TV, and scale down to 25px on a smaller 360p device. Using virtual pixel values is optional, but often more intuitive than percentages with several digits of precision. Depending on your situations, you might prefer one over the other, or use both of them. Feel free to experiment! Tip Using the virtual coordinate system does not decrease image quality.","title":"Virtual screen coordinates"},{"location":"themes/overview/","text":"Theme development In Pegasus themes can define the whole look and feel of the interface. There are no predefined views or layouts: you start with the whole screen as your canvas, and you can add your own views or elements in the kind of arrangement you wish. Pegasus merely provides the data , like the list of games and their assets. You can then use this data to build UI elements like a list of games, a screen for choosing platforms or a search panel for filtering games. Compared to other frontends, this level of customization might produce a steeper learning curve initially, however in time it allows you to produce themes where the way games are presented and interacted with can be freely decided. QML Themes are written in the QML language, a human readable text format. Each QML file describes a hierarchy of elements and their properties, representing a piece of the user interface. These smaller elements can then be combined to form larger or more complex elements, then eventually build up the theme itself. // An example QML document // Based on: https://en.wikipedia.org/wiki/QML import QtQuick 2.0 Rectangle { id: canvas width: 250 height: 200 color: \"blue\" Image { id: logo source: \"pics/logo.png\" anchors.centerIn: parent } } JavaScript QML describes how elements look, arranged on screen and generally behave. When you want to tell what should happen, you can use JavaScript . In its simplest form this can be things like \" if I press Enter then launch the game\", but you can write any kind of complex logic if necessary. See also https://en.wikipedia.org/wiki/QML https://qmlbook.github.io/ch04-qmlstart/qmlstart.htm https://doc.qt.io/qt-5/qmlapplications.html Theme structure Pegasus is looking for themes in the configuration directories , under a themes subdirectory (eg. ~/.config/pegasus-frontend/themes/ ). This directory might not exist by default, in this case you can just create it manually. In this themes directory, each theme is located in its own folder, and the name of this folder should be unique. Two files are required for every theme: the theme.cfg is a simple text file that tells information about the theme. Things like its human friendly name, some description or the author's contact can be listed here. the theme.qml is the actual theme UI code, the top of the whole element hierarchy theme.cfg The theme.cfg is a text file in the same format as Pegasus' metadata files . Currently the following options are recognized: name : the name of your theme (required) version : a version identifier; can be a number, text, whatever you like as long as it's unique author : the author of the theme; either simply a name or in \"name <email>\" format. If there's more than one, you can list them one line per author. authors is also an accepted name for this field. summary : a short (80-100 characters) summary description : a longer description keywords : keywords used for searching, separated with ' , ' homepage : a link to you project's site assets.screenshots : a list of screenshots, one line per file, that show how your theme looks. They should be either file paths relative to the cfg file, or image URLs Every theme is required to have a theme.cfg file, with at least the name defined. Here is an example: name : Tutorial author : John Smith version : 1.0 summary : A super cool theme ! Another one: name : Tutorial 2 authors : John Smith <johnsmith@example.com> Jane Doe <janedoe@xample.com> version : beta summary : A super cool theme that should look really nice on big screens, like TVs keywords : 10 foot , retro homepage : example . com assets.screenshots : demo/screenshot_a.jpg demo/screenshot_b.jpg theme.qml The theme.qml file is the entry point of your theme's UI structure. For example the following snippet could be used to check if everything works fine: import QtQuick 2.0 FocusScope { Text { text: \"Hello World!\" color: \"white\" anchors.centerIn: parent } } Themes should have a FocusScope as their root element, which is then set up by Pegasus to always fill the whole screen. ( FocusScope itself is a special container in QML which is used for separating keyboard/gamepad input from other parts of the UI (eg. main menu).) Usage If you've created the theme.cfg and theme.qml files as described above, you should now see your entry in the list of available themes in Pegasus' settings menu. After the theme is loaded, pressing the F5 key will make Pegasus reload its files, making it easier to try out changes. Next steps QML can be a quite large topic, so this documentation is grouped into the following main areas: To get familiar with QML, a number of tutorials were collected on this page . To learn by examples, there are step-by-step tutorials of writing themes from scratch. QML code is also explained along the way. Simple theme Flixnet theme A list of commonly used QML components is available here. // TODO A reference of the accessible data structures Pegasus provides is available here .","title":"Overview"},{"location":"themes/overview/#theme-development","text":"In Pegasus themes can define the whole look and feel of the interface. There are no predefined views or layouts: you start with the whole screen as your canvas, and you can add your own views or elements in the kind of arrangement you wish. Pegasus merely provides the data , like the list of games and their assets. You can then use this data to build UI elements like a list of games, a screen for choosing platforms or a search panel for filtering games. Compared to other frontends, this level of customization might produce a steeper learning curve initially, however in time it allows you to produce themes where the way games are presented and interacted with can be freely decided.","title":"Theme development"},{"location":"themes/overview/#qml","text":"Themes are written in the QML language, a human readable text format. Each QML file describes a hierarchy of elements and their properties, representing a piece of the user interface. These smaller elements can then be combined to form larger or more complex elements, then eventually build up the theme itself. // An example QML document // Based on: https://en.wikipedia.org/wiki/QML import QtQuick 2.0 Rectangle { id: canvas width: 250 height: 200 color: \"blue\" Image { id: logo source: \"pics/logo.png\" anchors.centerIn: parent } }","title":"QML"},{"location":"themes/overview/#javascript","text":"QML describes how elements look, arranged on screen and generally behave. When you want to tell what should happen, you can use JavaScript . In its simplest form this can be things like \" if I press Enter then launch the game\", but you can write any kind of complex logic if necessary. See also https://en.wikipedia.org/wiki/QML https://qmlbook.github.io/ch04-qmlstart/qmlstart.htm https://doc.qt.io/qt-5/qmlapplications.html","title":"JavaScript"},{"location":"themes/overview/#theme-structure","text":"Pegasus is looking for themes in the configuration directories , under a themes subdirectory (eg. ~/.config/pegasus-frontend/themes/ ). This directory might not exist by default, in this case you can just create it manually. In this themes directory, each theme is located in its own folder, and the name of this folder should be unique. Two files are required for every theme: the theme.cfg is a simple text file that tells information about the theme. Things like its human friendly name, some description or the author's contact can be listed here. the theme.qml is the actual theme UI code, the top of the whole element hierarchy","title":"Theme structure"},{"location":"themes/overview/#themecfg","text":"The theme.cfg is a text file in the same format as Pegasus' metadata files . Currently the following options are recognized: name : the name of your theme (required) version : a version identifier; can be a number, text, whatever you like as long as it's unique author : the author of the theme; either simply a name or in \"name <email>\" format. If there's more than one, you can list them one line per author. authors is also an accepted name for this field. summary : a short (80-100 characters) summary description : a longer description keywords : keywords used for searching, separated with ' , ' homepage : a link to you project's site assets.screenshots : a list of screenshots, one line per file, that show how your theme looks. They should be either file paths relative to the cfg file, or image URLs Every theme is required to have a theme.cfg file, with at least the name defined. Here is an example: name : Tutorial author : John Smith version : 1.0 summary : A super cool theme ! Another one: name : Tutorial 2 authors : John Smith <johnsmith@example.com> Jane Doe <janedoe@xample.com> version : beta summary : A super cool theme that should look really nice on big screens, like TVs keywords : 10 foot , retro homepage : example . com assets.screenshots : demo/screenshot_a.jpg demo/screenshot_b.jpg","title":"theme.cfg"},{"location":"themes/overview/#themeqml","text":"The theme.qml file is the entry point of your theme's UI structure. For example the following snippet could be used to check if everything works fine: import QtQuick 2.0 FocusScope { Text { text: \"Hello World!\" color: \"white\" anchors.centerIn: parent } } Themes should have a FocusScope as their root element, which is then set up by Pegasus to always fill the whole screen. ( FocusScope itself is a special container in QML which is used for separating keyboard/gamepad input from other parts of the UI (eg. main menu).)","title":"theme.qml"},{"location":"themes/overview/#usage","text":"If you've created the theme.cfg and theme.qml files as described above, you should now see your entry in the list of available themes in Pegasus' settings menu. After the theme is loaded, pressing the F5 key will make Pegasus reload its files, making it easier to try out changes.","title":"Usage"},{"location":"themes/overview/#next-steps","text":"QML can be a quite large topic, so this documentation is grouped into the following main areas: To get familiar with QML, a number of tutorials were collected on this page . To learn by examples, there are step-by-step tutorials of writing themes from scratch. QML code is also explained along the way. Simple theme Flixnet theme A list of commonly used QML components is available here. // TODO A reference of the accessible data structures Pegasus provides is available here .","title":"Next steps"},{"location":"themes/qml-modules/","text":"Available QML modules The following modules are bundled with Pegasus, and can be safely include d in QML files: QtQuick QtQuick.Layouts QtQuick.Particles QtQuick.Window QtGraphicalEffects QtMultimedia QtQml.Models","title":"QML modules"},{"location":"themes/qml-modules/#available-qml-modules","text":"The following modules are bundled with Pegasus, and can be safely include d in QML files: QtQuick QtQuick.Layouts QtQuick.Particles QtQuick.Window QtGraphicalEffects QtMultimedia QtQml.Models","title":"Available QML modules"},{"location":"themes/qml-tutorials/","text":"QML tutorial collection This page collects tutorials and guides for learning QML. While the example theme guides are intended to be beginner friendly, I'd recommend reading at least the basics and the dynamic layout topics, which you'll most likely use in a theme. After that, just pick whatever you're interested in and/or look up things in the official documentation. Basics These provide an introduction to the language. After reading them, you should be familiar with: the basic syntax simple elements: Rectangle, Image, Text and Item positioners: Column, Row, Grid, Flow simple transformations: rotate, scale anchoring focus handling key presses with the Keys element Resources: QML ebook chapter 4 Wikipedia QML official tutorial basic types Dynamic layout A theme should be able to show the list of games and collections. An array of data objects is what QML calls \"Model\". You can fully customize how one item should look like on the screen (the \"Delegate\"), and how all these items should be aligned/laid out (the \"View\"). The standard layouts are: ListView : aligns the items on a horizontal or vertical path GridView : fills a grid with the items (either the number rows or the number of columns should be specified) PathView : aligns the items along an arbitrary path Repeater : simply creates the items but doesn't do any further alignment Resources: QML ebook chapter 6 States, transitions, animations You might want to create a theme that consists of multiple states, eg. a platform select screen and an actual game list. Or perhaps you want to simply move an object around in multiple steps or toggle some effects. A State object can be used to set properties of one or more objects at once. The transition between two states can be animated. Animations can also be created for individual properties, or played stand-alone. Resources: QML ebook chapter 5 Media playback You can write a complete media player in QML. The third-party documentation is a bit outdated, so you might want to check the official references too. The most common components are Video, Audio and Playlist. Resources: Multimedia module QML ebook chapter 11 Further resources The elements so far are what you'd commonly use in a theme, however there are still lots of features not covered here, including: touch control and sensors (eg. gyroscope) manual 2D drawing canvas particles and graphical effects (shadow, gradient, blur, ...) 3D scenes custom shader code For further learning, the unofficial QML book might come handy: https://qmlbook.github.io/index.html You can also find a bunch of official documentations here: https://doc.qt.io/qt-5/qmlapplications.html https://doc.qt.io/qt-5/qtquick-index.html https://doc.qt.io/qt-5/qtqml-index.html https://doc.qt.io/qt-5/qml-tutorial.html https://doc.qt.io/qt-5/qtquick-qmlmodule.html This one is a bit old, but might be good for learning the concepts: https://doc.qt.io/archives/qt-4.8/qtquick.html . Visual editor Qt Creator has a drag-and-drop QML editor (the Design tab). Unfortunately I couldn't use it because of crashes, but you might have better luck with it.","title":"QML tutorials"},{"location":"themes/qml-tutorials/#qml-tutorial-collection","text":"This page collects tutorials and guides for learning QML. While the example theme guides are intended to be beginner friendly, I'd recommend reading at least the basics and the dynamic layout topics, which you'll most likely use in a theme. After that, just pick whatever you're interested in and/or look up things in the official documentation.","title":"QML tutorial collection"},{"location":"themes/qml-tutorials/#basics","text":"These provide an introduction to the language. After reading them, you should be familiar with: the basic syntax simple elements: Rectangle, Image, Text and Item positioners: Column, Row, Grid, Flow simple transformations: rotate, scale anchoring focus handling key presses with the Keys element Resources: QML ebook chapter 4 Wikipedia QML official tutorial basic types","title":"Basics"},{"location":"themes/qml-tutorials/#dynamic-layout","text":"A theme should be able to show the list of games and collections. An array of data objects is what QML calls \"Model\". You can fully customize how one item should look like on the screen (the \"Delegate\"), and how all these items should be aligned/laid out (the \"View\"). The standard layouts are: ListView : aligns the items on a horizontal or vertical path GridView : fills a grid with the items (either the number rows or the number of columns should be specified) PathView : aligns the items along an arbitrary path Repeater : simply creates the items but doesn't do any further alignment Resources: QML ebook chapter 6","title":"Dynamic layout"},{"location":"themes/qml-tutorials/#states-transitions-animations","text":"You might want to create a theme that consists of multiple states, eg. a platform select screen and an actual game list. Or perhaps you want to simply move an object around in multiple steps or toggle some effects. A State object can be used to set properties of one or more objects at once. The transition between two states can be animated. Animations can also be created for individual properties, or played stand-alone. Resources: QML ebook chapter 5","title":"States, transitions, animations"},{"location":"themes/qml-tutorials/#media-playback","text":"You can write a complete media player in QML. The third-party documentation is a bit outdated, so you might want to check the official references too. The most common components are Video, Audio and Playlist. Resources: Multimedia module QML ebook chapter 11","title":"Media playback"},{"location":"themes/qml-tutorials/#further-resources","text":"The elements so far are what you'd commonly use in a theme, however there are still lots of features not covered here, including: touch control and sensors (eg. gyroscope) manual 2D drawing canvas particles and graphical effects (shadow, gradient, blur, ...) 3D scenes custom shader code For further learning, the unofficial QML book might come handy: https://qmlbook.github.io/index.html You can also find a bunch of official documentations here: https://doc.qt.io/qt-5/qmlapplications.html https://doc.qt.io/qt-5/qtquick-index.html https://doc.qt.io/qt-5/qtqml-index.html https://doc.qt.io/qt-5/qml-tutorial.html https://doc.qt.io/qt-5/qtquick-qmlmodule.html This one is a bit old, but might be good for learning the concepts: https://doc.qt.io/archives/qt-4.8/qtquick.html .","title":"Further resources"},{"location":"themes/qml-tutorials/#visual-editor","text":"Qt Creator has a drag-and-drop QML editor (the Design tab). Unfortunately I couldn't use it because of crashes, but you might have better luck with it.","title":"Visual editor"},{"location":"user-guide/adding-games/","text":"How to add games Games can come from two main sources: by listing it in a so-called metadata file, or by automatic detection from a third-party source (eg. Steam, GOG games). A) Automatic detection Pegasus has built-in support for several game sources, depending on the particular platform. You can turn these on or off from the Settings menu, under Enable/disable data sources . The automatic detection requires no configuration. However, it also does not provide a way to ignore or edit games one-by-one \u2013 it uses whatever the third-party source provides, and only that. If this turns out to be an issue, you can always extend or replace them with custom metadata files, as described below. For more information about the third-party sources, see this page. B) Metadata files Metadata files are human readable, simple text files, describing game informations and their groupings. It looks like this: collection : Game Boy Advanced launch : C :\\ GameBoy \\ myemulator . exe { file . path } game : Advance Wars file : Advance Wars ( USA ). gba developer : Intelligent Games genre : Strategy players : 4 description : This turn-based strategy game hails back to a classic Japanese strategy game titled Famicom Wars. Advance Wars pits players against very computer AI in a number of battles involving submarines, warships, infantry, tanks, helicopters, and other weapons. rating : 80% A metadata file usually starts with a collection entry, for example a gaming platform, or any other grouping. There are no predefined names, you can use whatever you prefer. In this case, the collection also defines a default launch command for all the games in it. A game entry describes the properties of a game. At the very least, it should have a file : this is what Pegasus will look for and launch. There can be more than one, eg. for games with multiple disks; in this case Pegasus will ask you which one to launch. If you look at the launch line of the collection , you can see {file.path} : this is a placeholder that will be replaced with the selected game file when you launch it. Metadata files are called metadata.pegasus.txt , and are usually placed next to your games. You can the add them from the Settings menu, Game directories . Metadata files are documented in more detail here.","title":"How to add games"},{"location":"user-guide/adding-games/#how-to-add-games","text":"Games can come from two main sources: by listing it in a so-called metadata file, or by automatic detection from a third-party source (eg. Steam, GOG games).","title":"How to add games"},{"location":"user-guide/adding-games/#a-automatic-detection","text":"Pegasus has built-in support for several game sources, depending on the particular platform. You can turn these on or off from the Settings menu, under Enable/disable data sources . The automatic detection requires no configuration. However, it also does not provide a way to ignore or edit games one-by-one \u2013 it uses whatever the third-party source provides, and only that. If this turns out to be an issue, you can always extend or replace them with custom metadata files, as described below. For more information about the third-party sources, see this page.","title":"A) Automatic detection"},{"location":"user-guide/adding-games/#b-metadata-files","text":"Metadata files are human readable, simple text files, describing game informations and their groupings. It looks like this: collection : Game Boy Advanced launch : C :\\ GameBoy \\ myemulator . exe { file . path } game : Advance Wars file : Advance Wars ( USA ). gba developer : Intelligent Games genre : Strategy players : 4 description : This turn-based strategy game hails back to a classic Japanese strategy game titled Famicom Wars. Advance Wars pits players against very computer AI in a number of battles involving submarines, warships, infantry, tanks, helicopters, and other weapons. rating : 80% A metadata file usually starts with a collection entry, for example a gaming platform, or any other grouping. There are no predefined names, you can use whatever you prefer. In this case, the collection also defines a default launch command for all the games in it. A game entry describes the properties of a game. At the very least, it should have a file : this is what Pegasus will look for and launch. There can be more than one, eg. for games with multiple disks; in this case Pegasus will ask you which one to launch. If you look at the launch line of the collection , you can see {file.path} : this is a placeholder that will be replaced with the selected game file when you launch it. Metadata files are called metadata.pegasus.txt , and are usually placed next to your games. You can the add them from the Settings menu, Game directories . Metadata files are documented in more detail here.","title":"B) Metadata files"},{"location":"user-guide/breaking-changes/","text":"Breaking changes This page list the breaking changes that happened during the development, and how to update between the releases affected. Alpha 15 Recently Pegasus was updated to support Android 10 and 11, and the way apps are launched had to be changed to work on all Android releases. Unfortunately, parameters starting with file:// no longer work, because Android itself does not allow them (you get a FileUriExposedException ). For most apps, you can fix this by just removing the leading file:// part from the launch command, eg. if you have -d \"file://{file.path}\" , replace it with -d \"{file.path}\" . Alpha 11 Alpha 10 \u2192 Alpha 11, 2019-03. There have been several breaking changes related to the metadata file format and the theme programming interface. What changed Single metadata file: Previously there have been separate files for defining Collections and Games ( collections.txt and metadata.txt ). In Alpha 11, the to files were merged, and both Collections and Games can be defined in the same file. Format changes: Alpha 11 introduced a cleaner difference between text values and item list. The text format was also slightly changed to avoid long descriptions floating unconnected to the rest of the file. Multifile games: In earlier versions of Pegasus, every single file was treated as a separate game, and in the metadata format, games were defined by a file property like this: file : Advance Wars ( USA ). gba title : Advance Wars developer : Intelligent Games genre : Strategy # ... In Alpha 11, support for multifile games was added and so the 1 file \u2192 1 game assumption didn't hold anymore. As such, the format was changed so the name of the game comes first, then the files can be listed: game : Final Fantasy VII files : ffvii_disc1.iso ffvii_disc2.iso developer : Square genre : Role - playing # ... Theme API improvements: Alpha 11 added support for theme-side sorting and filtering, custom settings (\"memory\") and access to the list of all available games. How to update Follow these steps for each of your game directories: Make backups of your collections.txt and metadata.txt files. Update the format: Open your metadata.txt in a text editor and copy its contents. Open the metadata converter page. On the left side, select Pegasus (alpha 10) -- metadata.txt and paste the contents to the text area. On the right side, select Pegasus -- metadata.txt . The results of the conversion will appear shortly. Copy the resulting text back to your metadata.txt file, overwriting everything that was in before it previously. Merge collections.txt and metadata.txt : Open both with a text editor, copy the contents of collections.txt and paste it somewhere into metadata.txt (doesn't matter where, but often it's more readable if it's on the top). You can now delete the collections.txt file. Theme developers: You can find a summary of changes here .","title":"Breaking changes"},{"location":"user-guide/breaking-changes/#breaking-changes","text":"This page list the breaking changes that happened during the development, and how to update between the releases affected.","title":"Breaking changes"},{"location":"user-guide/breaking-changes/#alpha-15","text":"Recently Pegasus was updated to support Android 10 and 11, and the way apps are launched had to be changed to work on all Android releases. Unfortunately, parameters starting with file:// no longer work, because Android itself does not allow them (you get a FileUriExposedException ). For most apps, you can fix this by just removing the leading file:// part from the launch command, eg. if you have -d \"file://{file.path}\" , replace it with -d \"{file.path}\" .","title":"Alpha 15"},{"location":"user-guide/breaking-changes/#alpha-11","text":"Alpha 10 \u2192 Alpha 11, 2019-03. There have been several breaking changes related to the metadata file format and the theme programming interface.","title":"Alpha 11"},{"location":"user-guide/breaking-changes/#what-changed","text":"Single metadata file: Previously there have been separate files for defining Collections and Games ( collections.txt and metadata.txt ). In Alpha 11, the to files were merged, and both Collections and Games can be defined in the same file. Format changes: Alpha 11 introduced a cleaner difference between text values and item list. The text format was also slightly changed to avoid long descriptions floating unconnected to the rest of the file. Multifile games: In earlier versions of Pegasus, every single file was treated as a separate game, and in the metadata format, games were defined by a file property like this: file : Advance Wars ( USA ). gba title : Advance Wars developer : Intelligent Games genre : Strategy # ... In Alpha 11, support for multifile games was added and so the 1 file \u2192 1 game assumption didn't hold anymore. As such, the format was changed so the name of the game comes first, then the files can be listed: game : Final Fantasy VII files : ffvii_disc1.iso ffvii_disc2.iso developer : Square genre : Role - playing # ... Theme API improvements: Alpha 11 added support for theme-side sorting and filtering, custom settings (\"memory\") and access to the list of all available games.","title":"What changed"},{"location":"user-guide/breaking-changes/#how-to-update","text":"Follow these steps for each of your game directories: Make backups of your collections.txt and metadata.txt files. Update the format: Open your metadata.txt in a text editor and copy its contents. Open the metadata converter page. On the left side, select Pegasus (alpha 10) -- metadata.txt and paste the contents to the text area. On the right side, select Pegasus -- metadata.txt . The results of the conversion will appear shortly. Copy the resulting text back to your metadata.txt file, overwriting everything that was in before it previously. Merge collections.txt and metadata.txt : Open both with a text editor, copy the contents of collections.txt and paste it somewhere into metadata.txt (doesn't matter where, but often it's more readable if it's on the top). You can now delete the collections.txt file. Theme developers: You can find a summary of changes here .","title":"How to update"},{"location":"user-guide/config-dirs/","text":"Configuration directories This page list the directories where Pegasus is allowed to find your configuration files, including themes. Default directories Platform Directory all platforms: <directory of the program>/config Linux: ~/.config/pegasus-frontend/ Linux (Flatpak): ~/.var/app/org.pegasus_frontend.Pegasus/config/pegasus-frontend/ Windows: C:\\Users\\[username]\\AppData\\Local\\pegasus-frontend\\ macOS: ~/Library/Preferences/pegasus-frontend/ Android: <storage>/Android/data/org.pegasus_frontend.android/files/pegasus-frontend/ If you launch Pegasus in portable mode , it will read/write settings to <directory of the program>/config/ . All possible directories Most platforms define multiple possible directories for storing user content, and so Pegasus can also detect configuration files in locations different than the default: All platforms: <directory of the program>/config <directory of the program>/ Linux: ~/.config/pegasus-frontend/ ( default ) ~/.local/share/pegasus-frontend/ /etc/xdg/pegasus-frontend/ /usr/local/share/pegasus-frontend/ /usr/share/pegasus-frontend/ (Flatpak) ~/.var/app/org.pegasus_frontend.Pegasus/config/pegasus-frontend/ Windows: C:\\Users\\[username]\\AppData\\Local\\pegasus-frontend\\ ( default ) C:\\ProgramData\\pegasus-frontend\\ (scoop) C:\\Users\\[username]\\scoop\\apps\\pegasus\\current\\config macOS: ~/Library/Preferences/pegasus-frontend/ ( default ) ~/Library/Application Support/pegasus-frontend/ /Library/Application Support/pegasus-frontend/ Android: <storage>/pegasus-frontend , where <storage> the internal storage, if you have one, otherwise the SD card","title":"Config directories"},{"location":"user-guide/config-dirs/#configuration-directories","text":"This page list the directories where Pegasus is allowed to find your configuration files, including themes.","title":"Configuration directories"},{"location":"user-guide/config-dirs/#default-directories","text":"Platform Directory all platforms: <directory of the program>/config Linux: ~/.config/pegasus-frontend/ Linux (Flatpak): ~/.var/app/org.pegasus_frontend.Pegasus/config/pegasus-frontend/ Windows: C:\\Users\\[username]\\AppData\\Local\\pegasus-frontend\\ macOS: ~/Library/Preferences/pegasus-frontend/ Android: <storage>/Android/data/org.pegasus_frontend.android/files/pegasus-frontend/ If you launch Pegasus in portable mode , it will read/write settings to <directory of the program>/config/ .","title":"Default directories"},{"location":"user-guide/config-dirs/#all-possible-directories","text":"Most platforms define multiple possible directories for storing user content, and so Pegasus can also detect configuration files in locations different than the default: All platforms: <directory of the program>/config <directory of the program>/ Linux: ~/.config/pegasus-frontend/ ( default ) ~/.local/share/pegasus-frontend/ /etc/xdg/pegasus-frontend/ /usr/local/share/pegasus-frontend/ /usr/share/pegasus-frontend/ (Flatpak) ~/.var/app/org.pegasus_frontend.Pegasus/config/pegasus-frontend/ Windows: C:\\Users\\[username]\\AppData\\Local\\pegasus-frontend\\ ( default ) C:\\ProgramData\\pegasus-frontend\\ (scoop) C:\\Users\\[username]\\scoop\\apps\\pegasus\\current\\config macOS: ~/Library/Preferences/pegasus-frontend/ ( default ) ~/Library/Application Support/pegasus-frontend/ /Library/Application Support/pegasus-frontend/ Android: <storage>/pegasus-frontend , where <storage> the internal storage, if you have one, otherwise the SD card","title":"All possible directories"},{"location":"user-guide/controls/","text":"Default controls Controls can be changed in the Settings menu. The defaults are: Keyboard Gamepad Effect Arrows or navigation / select/ok / cancel/back / game details / filter and search or L1/LB previous collection or R1/RB next collection Page Up L2/LT previous page of games Page Down R2/RT next page of games In addition, if you have a keyboard you may use + [letter] to jump to the first game starting with that letter.","title":"Default controls"},{"location":"user-guide/controls/#default-controls","text":"Controls can be changed in the Settings menu. The defaults are: Keyboard Gamepad Effect Arrows or navigation / select/ok / cancel/back / game details / filter and search or L1/LB previous collection or R1/RB next collection Page Up L2/LT previous page of games Page Down R2/RT next page of games In addition, if you have a keyboard you may use + [letter] to jump to the first game starting with that letter.","title":"Default controls"},{"location":"user-guide/faq/","text":"Frequently Asked Questions A collection of small tips and guides. Adding Android games manually Every Android app has a package name , like com.somedeveloper.MyCoolApp , and an activity where the app starts when you open it. com.somedeveloper.MyCoolApp.MainActivity is a common pattern for activity names, but it can be completely different too. Unfortunately it's not trivial to find out these about an app. This video shows an example tool for figuring it out. Once you know your app's package name and activity, the game entry in a metadata file looks like this: game : < custom app name > file : android :< packagename > launch : am start - n < packagename >/< activityname > For example: game : Spotify file : android : com . spotify . music launch : am start - n com . spotify . music / com . spotify . music . MainActivity Note that just like desktop programs, Android apps may also require additional parameters to launch correctly. The examples above can only show the general idea. Warning The package names and activity names are case sensitive! Tip When the activity name starts with the package name, the identical parts (separated by . dots) can be left out. So instead of com.spotify.music/com.spotify.music.MainActivity you can write com.spotify.music/.MainActivity . Customizing Steam games Every Steam game has an numeric ID, which you can see in the URL when you open its Steam page. For example, in https://store.steampowered.com/app/108600/Project_Zomboid/ it's 108600 , and Pegasus will refer to the game as steam:108600 . So to add custom assets to Steam games, you can refer to this ID number as the game's file entry in a metadata file : game : Project Zomboid file : steam :108600 If you want to add Steam games without the built-in Steam support, use the following launch command: launch : \" C :\\ Program Files ( x 86)\\ Steam \\ Steam . exe \" steam :// rungameid /108600 Running more than one command In a metadata file, the launch property accepts exactly one command. This command however can be a command line interpreter too, allowing you to chain executables together. For example, on Windows: launch : cmd / C \" start / b / wait someprogram . exe && start / b / wait emulator . exe { file . path }\" and on Linux: launch : sh - c \" someprogram && emulator { file . path }\" Common issues Pegasus crashes when playing a video In most cases this is a codec issue. See the Windows notes or your platform's page for more details. Pegasus doesn't play a video In most cases this is a codec issue. Some platforms simply don't support certain formats, or may need additional codecs installed to play them correctly. If in doubt, please make sure your platform's built-in default media player can play th file as well (eg. Android Gallery, Windows Movie Player). Android apps do not close By default Android remembers the launched app, and if it wasn't manually closed, the app will continue running where it was left off. The following launch command parameters seem to work well for closing the apps automatically on returning to Pegasus: --activity-clear-task --activity-clear-top --activity-no-history","title":"FAQ"},{"location":"user-guide/faq/#frequently-asked-questions","text":"A collection of small tips and guides.","title":"Frequently Asked Questions"},{"location":"user-guide/faq/#adding-android-games-manually","text":"Every Android app has a package name , like com.somedeveloper.MyCoolApp , and an activity where the app starts when you open it. com.somedeveloper.MyCoolApp.MainActivity is a common pattern for activity names, but it can be completely different too. Unfortunately it's not trivial to find out these about an app. This video shows an example tool for figuring it out. Once you know your app's package name and activity, the game entry in a metadata file looks like this: game : < custom app name > file : android :< packagename > launch : am start - n < packagename >/< activityname > For example: game : Spotify file : android : com . spotify . music launch : am start - n com . spotify . music / com . spotify . music . MainActivity Note that just like desktop programs, Android apps may also require additional parameters to launch correctly. The examples above can only show the general idea. Warning The package names and activity names are case sensitive! Tip When the activity name starts with the package name, the identical parts (separated by . dots) can be left out. So instead of com.spotify.music/com.spotify.music.MainActivity you can write com.spotify.music/.MainActivity .","title":"Adding Android games manually"},{"location":"user-guide/faq/#customizing-steam-games","text":"Every Steam game has an numeric ID, which you can see in the URL when you open its Steam page. For example, in https://store.steampowered.com/app/108600/Project_Zomboid/ it's 108600 , and Pegasus will refer to the game as steam:108600 . So to add custom assets to Steam games, you can refer to this ID number as the game's file entry in a metadata file : game : Project Zomboid file : steam :108600 If you want to add Steam games without the built-in Steam support, use the following launch command: launch : \" C :\\ Program Files ( x 86)\\ Steam \\ Steam . exe \" steam :// rungameid /108600","title":"Customizing Steam games"},{"location":"user-guide/faq/#running-more-than-one-command","text":"In a metadata file, the launch property accepts exactly one command. This command however can be a command line interpreter too, allowing you to chain executables together. For example, on Windows: launch : cmd / C \" start / b / wait someprogram . exe && start / b / wait emulator . exe { file . path }\" and on Linux: launch : sh - c \" someprogram && emulator { file . path }\"","title":"Running more than one command"},{"location":"user-guide/faq/#common-issues","text":"","title":"Common issues"},{"location":"user-guide/faq/#pegasus-crashes-when-playing-a-video","text":"In most cases this is a codec issue. See the Windows notes or your platform's page for more details.","title":"Pegasus crashes when playing a video"},{"location":"user-guide/faq/#pegasus-doesnt-play-a-video","text":"In most cases this is a codec issue. Some platforms simply don't support certain formats, or may need additional codecs installed to play them correctly. If in doubt, please make sure your platform's built-in default media player can play th file as well (eg. Android Gallery, Windows Movie Player).","title":"Pegasus doesn't play a video"},{"location":"user-guide/faq/#android-apps-do-not-close","text":"By default Android remembers the launched app, and if it wasn't manually closed, the app will continue running where it was left off. The following launch command parameters seem to work well for closing the apps automatically on returning to Pegasus: --activity-clear-task --activity-clear-top --activity-no-history","title":"Android apps do not close"},{"location":"user-guide/getting-started/","text":"Getting started! Welcome to the documentation of the Pegasus frontend! Here you can find information about how to install and configure Pegasus on your device, and further along, about the various customization possibilities. Let's get started! What is Pegasus Pegasus provides a graphical interface where you can collect games of various platforms in one common place, present them in a nice and friendly view, and launch them directly from there. You can make it display informations, play videos and show images about your favorite titles. If you like playing games with emulators, you can also set them up to launch from Pegasus as well. There are various frontend softwares with different ideas and goals. Pegasus tries to be customizable, minimal and cooperative ; it offers you the following abilities: Runs on many devices and operating systems, so you can play on desktop PCs, smartphones, arcades... and accordingly, supports navigation using gamepads, keyboard/mouse or by touch controls Supports different screen sizes, so you can use it on TVs just as well as on handhelds Works with all possible emulators, and gives complete control over how you wish to launch them Enables full customization of the user interface, so you can completely change how your collection is presented and interacted with Allows you to use it as a component in a larger gaming setup Free and open source, no ads or in-app purchases On the other hand, because Pegasus aims to be minimal, it's not a \"batteries included\" package: It does not include or download games for you \u2014 but allows you to show games from any sources It does not include or download emulators and game stores \u2014 but allows you to use any of your own It does not include or download game data or assets \u2014 but allows you to use your own preferred sources The point is, Pegasus tries to do one thing (and do it well); it does not include features for which there are various external tools, but instead tries to play nicely together with those. This allows you to use Pegasus in a larger setup: you can bundle it together with emulators, configurations or other programs, and modularly change these parts separately when needed. Still interested? Keep on reading! Installation Pegasus is available for various devices and operating systems. Currently there are official releases for the following platforms: Windows 7 or later Linux with Ubuntu 18.04/Debian Buster or later Raspberry Pi with Raspbian Buster or later Odroid C0/C1/C2 and XU3/XU4 with Ubuntu 18.04 or later Android 5 (Lollipop) or later macOS 10.13 (High Sierra) or later For each platform, there are two main release channels: the latest version contains the latest fixes and improvements, but are not well tested before release the stable version is a release that's been out for a few weeks already, and our community found no unexpected issues with it so far For more details, select your preferred platform: Windows (Recommended) Install a codec pack: Pegasus uses Windows' built-in media engine for playing video files, and some formats, for example Steam's trailers require codecs. If the codecs are not present, the videos may make Pegasus crash. K-Lite Basic is a popular choice for a codec pack Download your preferred release from pegasus-frontend.org , under the Downloads section Extract it somewhere (Optional) If you'd like to run Pegasus in portable mode (eg. you plan to place it on a USB drive), create a new file called portable.txt and place it next to Pegasus Android Enable installing APK files: in the Android Settings, under Security, turn on Unknown Sources . Pegasus is not available from the Play Store yet, and installing APK files have to be enabled manually like this Download your preferred release from pegasus-frontend.org , under the Downloads section Open the APK file with any file manager app, and press \"Install\" The first time you open Pegasus, it will ask for permission to access the storage. Make sure to enable them so that Pegasus could see your games (Optional) Android will ask if you wish to use Pegasus as the default launcher. You can also change this from Android's Settings menu, see the platform notes for more details Linux - Desktop Using the Ubuntu/Debian package manager Download the Debian package ( .deb ) of your preferred release from pegasus-frontend.org , under the Downloads section Install it by double clicking on it (or manually from the command line) (Optional) Run the commands under the \"APT repository\" section to make sure the system keeps it up to date Using the standalone package Download the standalone version of your preferred release from pegasus-frontend.org , under the Downloads section Extract it somewhere (Optional) If you'd like to run Pegasus in portable mode (eg. you plan to place it on a USB drive), create a new file called portable.txt and place it next to Pegasus Install the required dependencies \u2014 see the platform notes for more details Using Flatpak You can install the stable version from either a graphical software manager, or manually following the instructions at https://flathub.org/apps/details/org.pegasus_frontend.Pegasus Using AUR A community maintained release is available from AUR, see the platform notes for more details Linux - Raspberry/Odroid Using the standalone package Download your preferred release from pegasus-frontend.org , under the Downloads section. Make sure you download it for the correct device \u2014 they are, in most cases, not interchangeable Extract it somewhere (Optional) If you'd like to run Pegasus in portable mode (eg. you plan to place it on a USB drive), create a new file called portable.txt and place it next to Pegasus Install the required dependencies \u2014 see the platform notes for more details Using RetroPie You can find Pegasus under the experimental section \u2014 see this page for more details macOS Download your preferred release from pegasus-frontend.org , under the Downloads section Extract it somewhere Other platforms Pegasus can also run on platforms not listed above, but may need to be compiled manually from source code. If you wish to do that, the Build documentation can help you Basic navigation The first time you start Pegasus, you'll be either greeted with a message that says no games have been found, or depending on your system, there might be already games present from other sources (eg. Steam or EmulationStation). In either way, you can reach the main menu by pressing the ESC key, the \"back button\" ( / ) on a gamepad, or by dragging out the menu panel from the right edge of the screen with your mouse or finger. You can navigate in the menu (and in the whole program in general) using the arrow keys, the directional buttons, the left stick or your mouse and finger. You can select item by pressing the Enter key, the \"select button\" ( / ) or simply clicking/pressing on an item. Controls For the full list of the default navigation keys and buttons, visit the Controls page . Configuration On the Settings screen, you can set some general parameters, like the language of the interface or whether you'd like to run in full screen or windowed mode. You can also change the \"theme\", the look and feel of the whole program. Pegasus is a program that can collect your list of games from various sources. You can import your list of games from other, already installed game libraries, like Steam, for which there is built-in support. For others, especially emulators and standalone games, you can use Pegasus' own metadata files, which is documented on this page . The behaviour of the game searching can be configured in the Gaming section: The Set game directories option will open a dialog where you can edit the list of directories Pegasus will search for metadata files (see the documentation linked above). On the Enable/disable data sources panel you can enable or disable importing games from the individual data sources that might be available on your system. Outside the Settings menu, there's also the Controls screen, where you can configure your gamepad's layout, and a Help screen that shows some information about Pegasus, and contains a link to this documentation site. Customization Now that you're done with the basics, you might want to dig deeper into the customization aspect of Pegasus. Here are a few articles you could take a look, if you're interested: Metadata files Asset files Scripting Creating themes >> Back to the index","title":"Getting started"},{"location":"user-guide/getting-started/#getting-started","text":"Welcome to the documentation of the Pegasus frontend! Here you can find information about how to install and configure Pegasus on your device, and further along, about the various customization possibilities. Let's get started!","title":"Getting started!"},{"location":"user-guide/getting-started/#what-is-pegasus","text":"Pegasus provides a graphical interface where you can collect games of various platforms in one common place, present them in a nice and friendly view, and launch them directly from there. You can make it display informations, play videos and show images about your favorite titles. If you like playing games with emulators, you can also set them up to launch from Pegasus as well. There are various frontend softwares with different ideas and goals. Pegasus tries to be customizable, minimal and cooperative ; it offers you the following abilities: Runs on many devices and operating systems, so you can play on desktop PCs, smartphones, arcades... and accordingly, supports navigation using gamepads, keyboard/mouse or by touch controls Supports different screen sizes, so you can use it on TVs just as well as on handhelds Works with all possible emulators, and gives complete control over how you wish to launch them Enables full customization of the user interface, so you can completely change how your collection is presented and interacted with Allows you to use it as a component in a larger gaming setup Free and open source, no ads or in-app purchases On the other hand, because Pegasus aims to be minimal, it's not a \"batteries included\" package: It does not include or download games for you \u2014 but allows you to show games from any sources It does not include or download emulators and game stores \u2014 but allows you to use any of your own It does not include or download game data or assets \u2014 but allows you to use your own preferred sources The point is, Pegasus tries to do one thing (and do it well); it does not include features for which there are various external tools, but instead tries to play nicely together with those. This allows you to use Pegasus in a larger setup: you can bundle it together with emulators, configurations or other programs, and modularly change these parts separately when needed. Still interested? Keep on reading!","title":"What is Pegasus"},{"location":"user-guide/getting-started/#installation","text":"Pegasus is available for various devices and operating systems. Currently there are official releases for the following platforms: Windows 7 or later Linux with Ubuntu 18.04/Debian Buster or later Raspberry Pi with Raspbian Buster or later Odroid C0/C1/C2 and XU3/XU4 with Ubuntu 18.04 or later Android 5 (Lollipop) or later macOS 10.13 (High Sierra) or later For each platform, there are two main release channels: the latest version contains the latest fixes and improvements, but are not well tested before release the stable version is a release that's been out for a few weeks already, and our community found no unexpected issues with it so far For more details, select your preferred platform: Windows (Recommended) Install a codec pack: Pegasus uses Windows' built-in media engine for playing video files, and some formats, for example Steam's trailers require codecs. If the codecs are not present, the videos may make Pegasus crash. K-Lite Basic is a popular choice for a codec pack Download your preferred release from pegasus-frontend.org , under the Downloads section Extract it somewhere (Optional) If you'd like to run Pegasus in portable mode (eg. you plan to place it on a USB drive), create a new file called portable.txt and place it next to Pegasus Android Enable installing APK files: in the Android Settings, under Security, turn on Unknown Sources . Pegasus is not available from the Play Store yet, and installing APK files have to be enabled manually like this Download your preferred release from pegasus-frontend.org , under the Downloads section Open the APK file with any file manager app, and press \"Install\" The first time you open Pegasus, it will ask for permission to access the storage. Make sure to enable them so that Pegasus could see your games (Optional) Android will ask if you wish to use Pegasus as the default launcher. You can also change this from Android's Settings menu, see the platform notes for more details Linux - Desktop Using the Ubuntu/Debian package manager Download the Debian package ( .deb ) of your preferred release from pegasus-frontend.org , under the Downloads section Install it by double clicking on it (or manually from the command line) (Optional) Run the commands under the \"APT repository\" section to make sure the system keeps it up to date Using the standalone package Download the standalone version of your preferred release from pegasus-frontend.org , under the Downloads section Extract it somewhere (Optional) If you'd like to run Pegasus in portable mode (eg. you plan to place it on a USB drive), create a new file called portable.txt and place it next to Pegasus Install the required dependencies \u2014 see the platform notes for more details Using Flatpak You can install the stable version from either a graphical software manager, or manually following the instructions at https://flathub.org/apps/details/org.pegasus_frontend.Pegasus Using AUR A community maintained release is available from AUR, see the platform notes for more details Linux - Raspberry/Odroid Using the standalone package Download your preferred release from pegasus-frontend.org , under the Downloads section. Make sure you download it for the correct device \u2014 they are, in most cases, not interchangeable Extract it somewhere (Optional) If you'd like to run Pegasus in portable mode (eg. you plan to place it on a USB drive), create a new file called portable.txt and place it next to Pegasus Install the required dependencies \u2014 see the platform notes for more details Using RetroPie You can find Pegasus under the experimental section \u2014 see this page for more details macOS Download your preferred release from pegasus-frontend.org , under the Downloads section Extract it somewhere Other platforms Pegasus can also run on platforms not listed above, but may need to be compiled manually from source code. If you wish to do that, the Build documentation can help you","title":"Installation"},{"location":"user-guide/getting-started/#basic-navigation","text":"The first time you start Pegasus, you'll be either greeted with a message that says no games have been found, or depending on your system, there might be already games present from other sources (eg. Steam or EmulationStation). In either way, you can reach the main menu by pressing the ESC key, the \"back button\" ( / ) on a gamepad, or by dragging out the menu panel from the right edge of the screen with your mouse or finger. You can navigate in the menu (and in the whole program in general) using the arrow keys, the directional buttons, the left stick or your mouse and finger. You can select item by pressing the Enter key, the \"select button\" ( / ) or simply clicking/pressing on an item. Controls For the full list of the default navigation keys and buttons, visit the Controls page .","title":"Basic navigation"},{"location":"user-guide/getting-started/#configuration","text":"On the Settings screen, you can set some general parameters, like the language of the interface or whether you'd like to run in full screen or windowed mode. You can also change the \"theme\", the look and feel of the whole program. Pegasus is a program that can collect your list of games from various sources. You can import your list of games from other, already installed game libraries, like Steam, for which there is built-in support. For others, especially emulators and standalone games, you can use Pegasus' own metadata files, which is documented on this page . The behaviour of the game searching can be configured in the Gaming section: The Set game directories option will open a dialog where you can edit the list of directories Pegasus will search for metadata files (see the documentation linked above). On the Enable/disable data sources panel you can enable or disable importing games from the individual data sources that might be available on your system. Outside the Settings menu, there's also the Controls screen, where you can configure your gamepad's layout, and a Help screen that shows some information about Pegasus, and contains a link to this documentation site.","title":"Configuration"},{"location":"user-guide/getting-started/#customization","text":"Now that you're done with the basics, you might want to dig deeper into the customization aspect of Pegasus. Here are a few articles you could take a look, if you're interested: Metadata files Asset files Scripting Creating themes >> Back to the index","title":"Customization"},{"location":"user-guide/installing-themes/","text":"Installing themes Themes are stored in the themes directory. The default location of that is: Linux: ~/.config/pegasus-frontend/themes/ Linux (Flatpak): ~/.var/app/org.pegasus_frontend.Pegasus/config/pegasus-frontend/themes/ Windows: C:\\Users\\[username]\\AppData\\Local\\pegasus-frontend\\themes\\ macOS: ~/Library/Preferences/pegasus-frontend/themes/ Android: <storage>/Android/data/org.pegasus_frontend.android/files/pegasus-frontend/themes/ all platform: <directory of the program>/config/themes/ If this directory does not exists, you can create it manually. Then simply extract a theme's folder to this directory and choose the theme in the Settings menu of Pegasus. Help If you wish to place the themes somewhere else, please see this page for the list of directories Pegasus can access. Theme Gallery You can find themes HERE .","title":"Installing themes"},{"location":"user-guide/installing-themes/#installing-themes","text":"Themes are stored in the themes directory. The default location of that is: Linux: ~/.config/pegasus-frontend/themes/ Linux (Flatpak): ~/.var/app/org.pegasus_frontend.Pegasus/config/pegasus-frontend/themes/ Windows: C:\\Users\\[username]\\AppData\\Local\\pegasus-frontend\\themes\\ macOS: ~/Library/Preferences/pegasus-frontend/themes/ Android: <storage>/Android/data/org.pegasus_frontend.android/files/pegasus-frontend/themes/ all platform: <directory of the program>/config/themes/ If this directory does not exists, you can create it manually. Then simply extract a theme's folder to this directory and choose the theme in the Settings menu of Pegasus. Help If you wish to place the themes somewhere else, please see this page for the list of directories Pegasus can access. Theme Gallery You can find themes HERE .","title":"Installing themes"},{"location":"user-guide/meta-assets/","text":"Asset searching This page describes how Pegasus is searching automatically for game assets, such as logo images, backgrounds or videos. Such media files can come from these sources: A manually set file for the game in a metadata file A manually set default file for the collections in a metadata file A file with a recognized name under <directory>/media/<gamename>/ Third-party sources (eg. EmulationStation, Steam, Skraper) To download assets for all your games automatically, you might want to use a program called \"scraper\". See the bottom of this page for more details. Game assets in the Metadata file All recognized asset types can be set in the metadata.txt (and metadata.pegasus.txt ) file by adding a assets.<assetname>: <file> entry for a game. The list of possible asset names can be found HERE . <file> is the path to the asset file, which can be either relative (to the metadata file) or an absolute path. Example Let's say we have the following structure: gba/ \u251c\u2500 metadata.pegasus.txt \u251c\u2500 Alien Hominid.gba \u2514\u2500 assets/ \u251c\u2500 covers/ \u2502 \u2514\u2500 Alien_Hominid.jpg \u2514\u2500 logos/ \u2514\u2500 Alien_Hominid_logo.jpg Our metadata.pegasus.txt file could then look like this: collection : Game Boy Advance extension : gba game : Alien Hominid file : Alien Hominid . gba developer : Zoo Digital assets.box_front : assets / covers / Alien_Hominid . jpg assets.logo : assets / logos / Alien_Hominid_logo . jpg Collection assets in the Metadata file Similarly, you can also set default assets for a collection by adding a assets.<assetname>: <file> field. However , note that using these default assets depends on the theme set in Pegasus, as a theme's creator can decide to use a different artwork for such purposes as well. Example Continuing the example above, let's say we have an assets/default_cover.jpg file. In this case the collection could be defined like this: collection : Game Boy Advance extension : gba description : The Game Boy Advance ( GBA ) is a 32- bit handheld video game console developed, manufactured and marketed by Nintendo as the successor to the Game Boy Color. assets.box_front : assets / default_cover . jpg game : Alien Hominid # ... The media directory If the game's assets haven't beed defined manually, Pegasus will also look for a matching file under <dir>/media/<gamename>/ , where <dir> is the directory where the Metadata file looks for games, and <gamename> can be either the title of the game found in this directory, or the filename (without extension) of one of the game's files. Example NES/ \u251c\u2500 metadata.pegasus.txt \u251c\u2500 Contra (U).zip \u2514\u2500 media/ \u2514\u2500 Contra (U)/ \u251c\u2500 boxFront.jpg \u251c\u2500 logo.jpg \u2514\u2500 video.mp4 Recognized files For still images, PNG and JPG files are searched, for videos WEBM, MP4 and AVI, and for audio MP3, OGG and WAV. The recognized filenames are: Accepted names Purpose boxFront , box_front , boxart2D The front of the game box boxBack , box_back The back of the game box boxSpine , box_spine , boxSide , box_side The spine (side edge) of the game box boxFull , box_full , box Full box art (front + back + spine) cartridge , disc , cart Image of the game medium (cartridge, floppy, disk, etc.) logo , wheel The game's logo, usually the title art over a transparent background poster , flyer Advertisement poster, usually with 2:3 aspect ratio (in general a portrait-aligned image) Accepted names Purpose marquee A wide (often over 3:1) artwork on the top of arcade machines bezel , screenmarquee , border Decoration around a game's screen on an arcade machine or emulator panel Control panel of the arcade machine cabinetLeft , cabinet_left Left side of the arcade machine cabinetRight , cabinet_right Right side of the arcade machine Accepted names Purpose tile A square-sized image (not the desktop icon) banner An image in 16:9 aspect ratio steam , steamgrid , grid Steam grid icon, in 460x215px or 920x430px size background A background image, eg. artwork or selected screenshot music Background music screenshot An in-game screenshot titlescreen An in-game screenshot of the title screen or main menu of the game video A video about the game, eg. a trailer or gameplay presentation Third-party sources Pegasus also tries to use the assets of third-party data sources, if possible. Usually no configuration is necessary, just enable the data source in the Settings menu. Internet access might be required, depending on the source (eg. Steam). How to get assets for my games? For larger game libraries, it might be tiresome to download each and every asset manually. To automatize this process, you can use programs called scraper s. These go through all your games, check multiple online databases for available assets, and may even generate a configuration file for you. Some popular scraper programs are Universal XML Scraper, Steven Selph's Scraper, Skraper.net and Skyscraper. Try giving them a go!","title":"Asset files"},{"location":"user-guide/meta-assets/#asset-searching","text":"This page describes how Pegasus is searching automatically for game assets, such as logo images, backgrounds or videos. Such media files can come from these sources: A manually set file for the game in a metadata file A manually set default file for the collections in a metadata file A file with a recognized name under <directory>/media/<gamename>/ Third-party sources (eg. EmulationStation, Steam, Skraper) To download assets for all your games automatically, you might want to use a program called \"scraper\". See the bottom of this page for more details.","title":"Asset searching"},{"location":"user-guide/meta-assets/#game-assets-in-the-metadata-file","text":"All recognized asset types can be set in the metadata.txt (and metadata.pegasus.txt ) file by adding a assets.<assetname>: <file> entry for a game. The list of possible asset names can be found HERE . <file> is the path to the asset file, which can be either relative (to the metadata file) or an absolute path.","title":"Game assets in the Metadata file"},{"location":"user-guide/meta-assets/#example","text":"Let's say we have the following structure: gba/ \u251c\u2500 metadata.pegasus.txt \u251c\u2500 Alien Hominid.gba \u2514\u2500 assets/ \u251c\u2500 covers/ \u2502 \u2514\u2500 Alien_Hominid.jpg \u2514\u2500 logos/ \u2514\u2500 Alien_Hominid_logo.jpg Our metadata.pegasus.txt file could then look like this: collection : Game Boy Advance extension : gba game : Alien Hominid file : Alien Hominid . gba developer : Zoo Digital assets.box_front : assets / covers / Alien_Hominid . jpg assets.logo : assets / logos / Alien_Hominid_logo . jpg","title":"Example"},{"location":"user-guide/meta-assets/#collection-assets-in-the-metadata-file","text":"Similarly, you can also set default assets for a collection by adding a assets.<assetname>: <file> field. However , note that using these default assets depends on the theme set in Pegasus, as a theme's creator can decide to use a different artwork for such purposes as well.","title":"Collection assets in the Metadata file"},{"location":"user-guide/meta-assets/#example_1","text":"Continuing the example above, let's say we have an assets/default_cover.jpg file. In this case the collection could be defined like this: collection : Game Boy Advance extension : gba description : The Game Boy Advance ( GBA ) is a 32- bit handheld video game console developed, manufactured and marketed by Nintendo as the successor to the Game Boy Color. assets.box_front : assets / default_cover . jpg game : Alien Hominid # ...","title":"Example"},{"location":"user-guide/meta-assets/#the-media-directory","text":"If the game's assets haven't beed defined manually, Pegasus will also look for a matching file under <dir>/media/<gamename>/ , where <dir> is the directory where the Metadata file looks for games, and <gamename> can be either the title of the game found in this directory, or the filename (without extension) of one of the game's files.","title":"The media directory"},{"location":"user-guide/meta-assets/#example_2","text":"NES/ \u251c\u2500 metadata.pegasus.txt \u251c\u2500 Contra (U).zip \u2514\u2500 media/ \u2514\u2500 Contra (U)/ \u251c\u2500 boxFront.jpg \u251c\u2500 logo.jpg \u2514\u2500 video.mp4 Recognized files For still images, PNG and JPG files are searched, for videos WEBM, MP4 and AVI, and for audio MP3, OGG and WAV. The recognized filenames are: Accepted names Purpose boxFront , box_front , boxart2D The front of the game box boxBack , box_back The back of the game box boxSpine , box_spine , boxSide , box_side The spine (side edge) of the game box boxFull , box_full , box Full box art (front + back + spine) cartridge , disc , cart Image of the game medium (cartridge, floppy, disk, etc.) logo , wheel The game's logo, usually the title art over a transparent background poster , flyer Advertisement poster, usually with 2:3 aspect ratio (in general a portrait-aligned image) Accepted names Purpose marquee A wide (often over 3:1) artwork on the top of arcade machines bezel , screenmarquee , border Decoration around a game's screen on an arcade machine or emulator panel Control panel of the arcade machine cabinetLeft , cabinet_left Left side of the arcade machine cabinetRight , cabinet_right Right side of the arcade machine Accepted names Purpose tile A square-sized image (not the desktop icon) banner An image in 16:9 aspect ratio steam , steamgrid , grid Steam grid icon, in 460x215px or 920x430px size background A background image, eg. artwork or selected screenshot music Background music screenshot An in-game screenshot titlescreen An in-game screenshot of the title screen or main menu of the game video A video about the game, eg. a trailer or gameplay presentation","title":"Example"},{"location":"user-guide/meta-assets/#third-party-sources","text":"Pegasus also tries to use the assets of third-party data sources, if possible. Usually no configuration is necessary, just enable the data source in the Settings menu. Internet access might be required, depending on the source (eg. Steam).","title":"Third-party sources"},{"location":"user-guide/meta-assets/#how-to-get-assets-for-my-games","text":"For larger game libraries, it might be tiresome to download each and every asset manually. To automatize this process, you can use programs called scraper s. These go through all your games, check multiple online databases for available assets, and may even generate a configuration file for you. Some popular scraper programs are Universal XML Scraper, Steven Selph's Scraper, Skraper.net and Skyscraper. Try giving them a go!","title":"How to get assets for my games?"},{"location":"user-guide/meta-files/","text":"Metadata files Pegasus supports several gaming platforms out of the box, but other than those, you can also add your own custom games and emulators. These can be described using metadata files . A metadata file is a human-readable text file that stores information about the individual games (title, developers, release date, etc.), and groups the games into categories (eg. \"Playstation games\", \"Mario games\", etc.). These files can be edited either via a text editor or via the graphical metadata editor for Pegasus . Here is an example (with more details below): collection : Game Boy Advanced extension : gba launch : myemulator { file . path } game : Advance Wars file : Advance Wars ( USA ). gba developer : Intelligent Games genre : Strategy players : 4 description : This turn-based strategy game hails back to a classic Japanese strategy game titled Famicom Wars. Advance Wars pits players against very computer AI in a number of battles involving submarines, warships, infantry, tanks, helicopters, and other weapons. rating : 80% These files are named metadata.pegasus.txt , and Pegasus looks for them in the directories you've added under Settings menu \u2192 Set game directories . Alternative file names If metadata.pegasus.txt doesn't exists, Pegasus will also try to load metadata.txt . Use whichever filename you prefer. You can also place multiple files in the same directory if their extension is .metadata.pegasus.txt or .metadata.txt (for example MarioGames.metadata.pegasus.txt ) Global config files The metadata files are usually kept together with the games. If you prefer to have them separately in one place, that is also possible: Pegasus will also look for them in the <config dir>/metafiles , if this directory exists. The possible config directories are listed HERE . Third-party data sources Pegasus is compatible with various third-party sources, such as EmulationStation and Steam, and can recognize their games automatically. You can turn on/off support for these sources in the Settings menu. For more details, see the documentation HERE . File format The metadata file contains a list of name: value entries , where each entry has a name and one or more lines of values . Groups of such entries are then used to describe Collections and Games . Here is an example file: collection : PlayStation extension : iso files : specialgame1.bin specialgame2.ext ignore-file : buggygame . iso launch : myemulator \"{ file . path }\" game : Final Fantasy VII sort_title : Final Fantasy 7 files : ffvii_disc1.iso ffvii_disc2.iso developer : Square genre : Role - playing players : 1 description : Final Fantasy VII is a 1997 role - playing video game developed by Square for the PlayStation console. It is the seventh main installment in the Final Fantasy series. . The games story follows Cloud Strife, a mercenary who joins an eco-terrorist organization to stop a world-controlling megacorporation from using the planets life essence as an energy source. rating : 92% x-scrape-source : SomeScraper Lines starting with # are comments and will be ignored. Empty lines are ignored too. The name of the entries is case insensitive, so title , Title and TitLe are the same. Values can span multiple lines, but additional lines have to start with at least one space or tab. Depending on the kind of the entry, the lines will be treated as either a list of items (eg. file list) or as flowing text T (eg. descriptions and single-value entries). Line breaks In flowing text, lines that contain a single dot . will be treated as paragraph break s (\"empty lines\"), while the characters \\n can be used for manual line break s. Developers In case you're interested in writing software that would read or write such metadata files, a more detailed page about the syntax can be found HERE . Currently there are two kinds of groups in a metadata file: Collections and Games. All entries belong to the last defined collection or game entry in metadata files. The entries recognized by Pegasus are listed below. Collections Collections define which files in the directory (and its subdirectories) should be treated as games, and thus appear in Pegasus. It also stores information about how to launch them (eg. open in emulator X, or run with parameter Y). All games are grouped into collections, but one game can belong to as many collections as you wish. Basics The following fields define some basic properties : Key Description Type collection Creates a new collection with the value as name (if it was not created yet). The properties after this line will modify this collection. This is a required field. T launch A common launch command for the games in this collection. If a game has its own custom launch command, that will override this field. There are some placeholder variables you can use here, see below for more details. T command An alternate name for launch . Use whichever you prefer. T workdir The default working directory used when launching a game. Defaults to the directory of the launched program. T cwd An alternate name for workdir . Use whichever you prefer. T Multiple directories Collections can span over multiple metadata files if they have the same name . This means you can create categories such as \"Platformer games\" in multiple locations, and the games will still belong to the same collection. Include files The following fields control which files of the directory should be included in the collection: Key Description Type extension , extensions A comma-separated list of file extensions (without the . dot), or a list of such lines. All files with these extensions (including those in subdirectories) will be included. This field can appear multiple times. file , files A single file or a list of files to add to the collection. You can use either absolute paths or paths relative to the metadata file. The entries don't have to be wrapped in quotes and can contain spaces. This field can appear multiple times. regex A Perl-compatible regular expression string, without leading or trailing slashes. Relative file paths matching the regex will be included. Unicode is supported. T directory , directories A single directory or a list of directories to search for matching games (see below). This field can appear multiple times. Foreign directories By default, a metadata file is expected to be next to the games, and files are searched in the directory of the this file. If you also want to search for matching files in other directories (eg. you prefer to keep the metadata separately), you can list them under directories (similarly to the files, one directory per line). You don't have to mention the directory the metadata file is in. Exclude files The file-related fields above with the ignore- prefix control which files should be excluded : Key Description ignore-extension , ignore-extensions Similarly to extension above. ignore-file , ignore-files Similarly to file above. ignore-regex Similarly to regex above. Exclusion is stronger than inclusion If both the regular and the ignore- fields match for a file, it will be excluded. Plural forms Sometimes writing the plural forms of the fields feels more natural, so directories , files , ignore-extensions , etc. are also supported without any difference to their regular forms. Metadata The following fields can tell some additional information : Key Description Type shortname An optional short name for the collection, in lowercase. Often an abbreviation, like MAME, NES, etc. By default, matches the name of the collection. T sort-by An alternate name that should be used for sorting. Can be useful when the name contains eg. roman numerals or special symbols. T summary A short description of the collection in one paragraph. T description A possibly longer description of the collection. T Keys starting with x- can be used to extend the format with additional data. This could be used, for example, by other softwares (eg. scrapers) to store some program-specific data. Common platform names The shortname parameter is often used by themes to show assets (eg. logo, device artwork, etc.) for a particular collection. Here is a list of the most common name\u2013shortname pairs for game platforms: Name Short name 3DO 3do Amiga amiga Amiga CD32 amigacd32 Amiga CDTV amigacdtv Amstrad CPC amstradcpc Android android Apple II apple2 Arcade arcade Arcade (Daphne) daphne Arcade (Final Burn Alpha) fba Arcade (MAME) mame Atari 800 atari800 Atari 2600 atari2600 Atari 5200 atari5200 Atari 7800 atari7800 Atari Jaguar atarijaguar Atari Jaguar CD atarijaguarcd Atari Lynx atarilynx Atari ST atarist Atari XE atarixe CHIP-8 chip8 ColecoVision colecovision Commodore 64 c64 DOS dos Dragon 32 dragon32 Famicom Disk System fds Game Boy Advance gba Game Boy Color gbc Game Boy gb GOG gog Intellivision intellivision Linux linux L\u00f6ve love Macintosh macintosh MSX msx Naomi naomi Neo Geo CD neogeocd Neo Geo Pocket Color ngpc Neo Geo Pocket ngp Neo Geo neogeo Nintendo 3DS 3ds Nintendo 64 n64 Nintendo DS nds Nintendo Entertainment System nes Nintendo Game-and-Watch gameandwatch Nintendo GameCube gc Nintendo Switch switch Nintendo VirtualBoy virtualboy Nintendo Wii wii Nintendo WiiU wiiu Odyssey 2 odyssey2 PC 88 pc88 PC 98 pc98 PC Engine pcengine PC pc PC-FX pcfx PlayStation psx PlayStation 2 ps2 PlayStation 3 ps3 PlayStation Portable psp PlayStation Vita psvita RPG Maker rpgmaker SAM coupe samcoupe Scumm VM scummvm SEGA 32X sega32x SEGA CD segacd Sega Dreamcast dreamcast SEGA GameGear gamegear Sega Genesis genesis Sega Master System mastersystem Sega Megadrive megadrive Sega Saturn saturn SEGA SG-1000 sg1000 Sharp X1 x1 Sharp X6800 x68000 Steam steam Super Nintendo Entertainment System snes SuperGrafx supergrafx TIC80 tic80 TurboGrafx 16 turbografx16 Vectrex vectrex Windows windows WonderSwan wonderswan WonderSwan/Color wonderswancolor Xbox xbox Xbox 360 xbox360 ZX Spectrum zxspectrum ZX81 zx81 Launch command parameters The following variables will be replaced in the launch command value: Variable Description Example {file.path} Absolute path to the file. /home/joe/games/mygame.bin {file.uri} Absolute path to the file, in URI form. file:///home/joe/games/mygame.bin (*) {file.name} The file name part of the path mygame.bin {file.basename} The file name without extension (ie. until but not including the last dot) mygame {file.dir} The directory where the file is located. /home/joe/games {env.MYVAR} The value of the environment variable MYVAR , if defined. launch: x11app --tty={env.TTY} Note that the variables will be replaced as-is, without additional formatting. You might need to wrap them in quotes if necessary. Android URIs On Android some apps expect direct file paths, others only work with so called \"content URIs\". Depending on your use case, you can use {file.path} for raw paths, or {file.uri} for Android 30 compatible content URIs. Furhermore, on Android 30 and later, apps have a restricted access to the file system, and may require per-directory permissions. You might need to open the app first and manually give access to your game directories. Note that Pegasus cannot grant file system access to other apps, and cannot guarantee that the app understands a particular path format. If in doubt, contact the app's developer. Example Let's say you have Super Nintendo games under C:/games/snes . Then you'd create C:/games/snes/metadata.pegasus.txt with the following contents: # Selects all files with the provided extension, except two games collection : Super Nintendo Entertainment System shortname : snes extensions : 7 z , bin , smc , sfc , fig , swc , mgd , zip , bin ignore-file : buggygame . bin ignore-file : duplicategame . bin launch : snes 9 x \"{ file . path }\" # A collection of 3 games. They're also part of 'My Games'. collection : Platformer games files : mario 1. bin files : mario 2. bin files : mario 3. bin # A regex example; includes games with '[number]-in-1' in their name. collection : Multi - game carts regex : \\ d +. in .1 Then add C:/games/snes to the searched game directories in the Settings menu. The games and categories will appear the next time you start Pegasus. Games Game entries store additional information about the individual games, such as title, developer(s) or release date. If a game need a special way to get launched, it can also be set here. The following properties can be used in game entries: Key Description Type game Creates a new game with the value as title. The properties after this line will modify this game. This is a required field. T sort-by An alternate title that should be used for sorting. Can be useful when the title contains eg. roman numerals or special symbols. sort_title and sort_name are also accepted. T file , files The file or list of files (eg. disks) that belong to this game. Paths can be either absolute or relative to the metadata file. If there are multiple files, you'll be able to select which one to launch when you start the game. developer , developers The developer or list of developers. This field can appear multiple times. publisher , publishers The publisher or list of publishers. This field can appear multiple times. genre , genres The genre or list of genres (for example Action , Adventure , etc.). This field can appear multiple times. tag , tags Tag or list of tags (for example Co-op , VR , etc.). This field can appear multiple times. summary A short description of the game in one paragraph. T description A possibly longer description of the game. T players The number of players who can play the game. Either a single number (eg. 2 ) or a number range (eg. 1-4 ). T release The date when the game was released, in YYYY-MM-DD format (eg. 1985-05-22 ). Month and day can be omitted if unknown (eg. 1985-05 or 1985 alone is also accepted). T rating The rating of the game, in percentages. Either an integer percentage in the 0-100% range (eg. 70% ), or a fractional value between 0 and 1 (eg. 0.7 ). T launch If this game must be launched differently than the others in the same collection, a custom launch command can be defined for it. T command An alternate name for launch . Use whichever you prefer. T workdir The working directory in which the game is launched. Defaults to the directory of the launched program. T cwd An alternate name for workdir . Use whichever you prefer. T Like with the collections, keys starting with x- can be used to extend the format with additional data. This could be used, for example, by other softwares (eg. scrapers) to store some program-specific data. Game requirements Only games that belong to at least one collection and have at least one existing file will appear in Pegasus. Example Continuing with the collection example, the C:/games/snes/metadata.pegasus.txt file could be extended with game data like this: game : Alien Hominid file : Alien Hominid ( Europe ) ( En , Fr , De , Es , It ). gba developer : Zoo Digital genre : Shooter players : 1 summary : You ' re a little yellow alien . The FBI has shot down your ship while flying over planet Earth. And it, quite literally, lands right on their doorstep. After a series of FBI Agents swipe your ship, what option do you have other than to blow up everything in your path to get it back? description : Alien Hominid is a 2D side-scrolling shooter with heavy references to the Metal Slug series of games - from the hand-drawn graphics, huge explosions, right down to the ability to eviscerate FBI Agents when you get up close to them. The graphics are by featured artist Dan Paladin. . Your goal, is quite simply, to get to the end of the stage, and die as little as possible. Which is made difficult due to the fact that any bullet is an instant kill. To help you out, you can grab a range of power-ups, such as lasers, spread shots, shotguns and more. rating : 50% x-id : 4149 x-source : ScreenScraper Asset files You can add various assets (eg. cover art) for your games. This is documented HERE . Real-world examples You can find some more examples on the platform specific pages: Windows Android Android example setup","title":"Metadata files"},{"location":"user-guide/meta-files/#metadata-files","text":"Pegasus supports several gaming platforms out of the box, but other than those, you can also add your own custom games and emulators. These can be described using metadata files . A metadata file is a human-readable text file that stores information about the individual games (title, developers, release date, etc.), and groups the games into categories (eg. \"Playstation games\", \"Mario games\", etc.). These files can be edited either via a text editor or via the graphical metadata editor for Pegasus . Here is an example (with more details below): collection : Game Boy Advanced extension : gba launch : myemulator { file . path } game : Advance Wars file : Advance Wars ( USA ). gba developer : Intelligent Games genre : Strategy players : 4 description : This turn-based strategy game hails back to a classic Japanese strategy game titled Famicom Wars. Advance Wars pits players against very computer AI in a number of battles involving submarines, warships, infantry, tanks, helicopters, and other weapons. rating : 80% These files are named metadata.pegasus.txt , and Pegasus looks for them in the directories you've added under Settings menu \u2192 Set game directories . Alternative file names If metadata.pegasus.txt doesn't exists, Pegasus will also try to load metadata.txt . Use whichever filename you prefer. You can also place multiple files in the same directory if their extension is .metadata.pegasus.txt or .metadata.txt (for example MarioGames.metadata.pegasus.txt ) Global config files The metadata files are usually kept together with the games. If you prefer to have them separately in one place, that is also possible: Pegasus will also look for them in the <config dir>/metafiles , if this directory exists. The possible config directories are listed HERE . Third-party data sources Pegasus is compatible with various third-party sources, such as EmulationStation and Steam, and can recognize their games automatically. You can turn on/off support for these sources in the Settings menu. For more details, see the documentation HERE .","title":"Metadata files"},{"location":"user-guide/meta-files/#file-format","text":"The metadata file contains a list of name: value entries , where each entry has a name and one or more lines of values . Groups of such entries are then used to describe Collections and Games . Here is an example file: collection : PlayStation extension : iso files : specialgame1.bin specialgame2.ext ignore-file : buggygame . iso launch : myemulator \"{ file . path }\" game : Final Fantasy VII sort_title : Final Fantasy 7 files : ffvii_disc1.iso ffvii_disc2.iso developer : Square genre : Role - playing players : 1 description : Final Fantasy VII is a 1997 role - playing video game developed by Square for the PlayStation console. It is the seventh main installment in the Final Fantasy series. . The games story follows Cloud Strife, a mercenary who joins an eco-terrorist organization to stop a world-controlling megacorporation from using the planets life essence as an energy source. rating : 92% x-scrape-source : SomeScraper Lines starting with # are comments and will be ignored. Empty lines are ignored too. The name of the entries is case insensitive, so title , Title and TitLe are the same. Values can span multiple lines, but additional lines have to start with at least one space or tab. Depending on the kind of the entry, the lines will be treated as either a list of items (eg. file list) or as flowing text T (eg. descriptions and single-value entries). Line breaks In flowing text, lines that contain a single dot . will be treated as paragraph break s (\"empty lines\"), while the characters \\n can be used for manual line break s. Developers In case you're interested in writing software that would read or write such metadata files, a more detailed page about the syntax can be found HERE . Currently there are two kinds of groups in a metadata file: Collections and Games. All entries belong to the last defined collection or game entry in metadata files. The entries recognized by Pegasus are listed below.","title":"File format"},{"location":"user-guide/meta-files/#collections","text":"Collections define which files in the directory (and its subdirectories) should be treated as games, and thus appear in Pegasus. It also stores information about how to launch them (eg. open in emulator X, or run with parameter Y). All games are grouped into collections, but one game can belong to as many collections as you wish.","title":"Collections"},{"location":"user-guide/meta-files/#basics","text":"The following fields define some basic properties : Key Description Type collection Creates a new collection with the value as name (if it was not created yet). The properties after this line will modify this collection. This is a required field. T launch A common launch command for the games in this collection. If a game has its own custom launch command, that will override this field. There are some placeholder variables you can use here, see below for more details. T command An alternate name for launch . Use whichever you prefer. T workdir The default working directory used when launching a game. Defaults to the directory of the launched program. T cwd An alternate name for workdir . Use whichever you prefer. T Multiple directories Collections can span over multiple metadata files if they have the same name . This means you can create categories such as \"Platformer games\" in multiple locations, and the games will still belong to the same collection.","title":"Basics"},{"location":"user-guide/meta-files/#include-files","text":"The following fields control which files of the directory should be included in the collection: Key Description Type extension , extensions A comma-separated list of file extensions (without the . dot), or a list of such lines. All files with these extensions (including those in subdirectories) will be included. This field can appear multiple times. file , files A single file or a list of files to add to the collection. You can use either absolute paths or paths relative to the metadata file. The entries don't have to be wrapped in quotes and can contain spaces. This field can appear multiple times. regex A Perl-compatible regular expression string, without leading or trailing slashes. Relative file paths matching the regex will be included. Unicode is supported. T directory , directories A single directory or a list of directories to search for matching games (see below). This field can appear multiple times. Foreign directories By default, a metadata file is expected to be next to the games, and files are searched in the directory of the this file. If you also want to search for matching files in other directories (eg. you prefer to keep the metadata separately), you can list them under directories (similarly to the files, one directory per line). You don't have to mention the directory the metadata file is in.","title":"Include files"},{"location":"user-guide/meta-files/#exclude-files","text":"The file-related fields above with the ignore- prefix control which files should be excluded : Key Description ignore-extension , ignore-extensions Similarly to extension above. ignore-file , ignore-files Similarly to file above. ignore-regex Similarly to regex above. Exclusion is stronger than inclusion If both the regular and the ignore- fields match for a file, it will be excluded. Plural forms Sometimes writing the plural forms of the fields feels more natural, so directories , files , ignore-extensions , etc. are also supported without any difference to their regular forms.","title":"Exclude files"},{"location":"user-guide/meta-files/#metadata","text":"The following fields can tell some additional information : Key Description Type shortname An optional short name for the collection, in lowercase. Often an abbreviation, like MAME, NES, etc. By default, matches the name of the collection. T sort-by An alternate name that should be used for sorting. Can be useful when the name contains eg. roman numerals or special symbols. T summary A short description of the collection in one paragraph. T description A possibly longer description of the collection. T Keys starting with x- can be used to extend the format with additional data. This could be used, for example, by other softwares (eg. scrapers) to store some program-specific data. Common platform names The shortname parameter is often used by themes to show assets (eg. logo, device artwork, etc.) for a particular collection. Here is a list of the most common name\u2013shortname pairs for game platforms: Name Short name 3DO 3do Amiga amiga Amiga CD32 amigacd32 Amiga CDTV amigacdtv Amstrad CPC amstradcpc Android android Apple II apple2 Arcade arcade Arcade (Daphne) daphne Arcade (Final Burn Alpha) fba Arcade (MAME) mame Atari 800 atari800 Atari 2600 atari2600 Atari 5200 atari5200 Atari 7800 atari7800 Atari Jaguar atarijaguar Atari Jaguar CD atarijaguarcd Atari Lynx atarilynx Atari ST atarist Atari XE atarixe CHIP-8 chip8 ColecoVision colecovision Commodore 64 c64 DOS dos Dragon 32 dragon32 Famicom Disk System fds Game Boy Advance gba Game Boy Color gbc Game Boy gb GOG gog Intellivision intellivision Linux linux L\u00f6ve love Macintosh macintosh MSX msx Naomi naomi Neo Geo CD neogeocd Neo Geo Pocket Color ngpc Neo Geo Pocket ngp Neo Geo neogeo Nintendo 3DS 3ds Nintendo 64 n64 Nintendo DS nds Nintendo Entertainment System nes Nintendo Game-and-Watch gameandwatch Nintendo GameCube gc Nintendo Switch switch Nintendo VirtualBoy virtualboy Nintendo Wii wii Nintendo WiiU wiiu Odyssey 2 odyssey2 PC 88 pc88 PC 98 pc98 PC Engine pcengine PC pc PC-FX pcfx PlayStation psx PlayStation 2 ps2 PlayStation 3 ps3 PlayStation Portable psp PlayStation Vita psvita RPG Maker rpgmaker SAM coupe samcoupe Scumm VM scummvm SEGA 32X sega32x SEGA CD segacd Sega Dreamcast dreamcast SEGA GameGear gamegear Sega Genesis genesis Sega Master System mastersystem Sega Megadrive megadrive Sega Saturn saturn SEGA SG-1000 sg1000 Sharp X1 x1 Sharp X6800 x68000 Steam steam Super Nintendo Entertainment System snes SuperGrafx supergrafx TIC80 tic80 TurboGrafx 16 turbografx16 Vectrex vectrex Windows windows WonderSwan wonderswan WonderSwan/Color wonderswancolor Xbox xbox Xbox 360 xbox360 ZX Spectrum zxspectrum ZX81 zx81","title":"Metadata"},{"location":"user-guide/meta-files/#launch-command-parameters","text":"The following variables will be replaced in the launch command value: Variable Description Example {file.path} Absolute path to the file. /home/joe/games/mygame.bin {file.uri} Absolute path to the file, in URI form. file:///home/joe/games/mygame.bin (*) {file.name} The file name part of the path mygame.bin {file.basename} The file name without extension (ie. until but not including the last dot) mygame {file.dir} The directory where the file is located. /home/joe/games {env.MYVAR} The value of the environment variable MYVAR , if defined. launch: x11app --tty={env.TTY} Note that the variables will be replaced as-is, without additional formatting. You might need to wrap them in quotes if necessary. Android URIs On Android some apps expect direct file paths, others only work with so called \"content URIs\". Depending on your use case, you can use {file.path} for raw paths, or {file.uri} for Android 30 compatible content URIs. Furhermore, on Android 30 and later, apps have a restricted access to the file system, and may require per-directory permissions. You might need to open the app first and manually give access to your game directories. Note that Pegasus cannot grant file system access to other apps, and cannot guarantee that the app understands a particular path format. If in doubt, contact the app's developer.","title":"Launch command parameters"},{"location":"user-guide/meta-files/#example","text":"Let's say you have Super Nintendo games under C:/games/snes . Then you'd create C:/games/snes/metadata.pegasus.txt with the following contents: # Selects all files with the provided extension, except two games collection : Super Nintendo Entertainment System shortname : snes extensions : 7 z , bin , smc , sfc , fig , swc , mgd , zip , bin ignore-file : buggygame . bin ignore-file : duplicategame . bin launch : snes 9 x \"{ file . path }\" # A collection of 3 games. They're also part of 'My Games'. collection : Platformer games files : mario 1. bin files : mario 2. bin files : mario 3. bin # A regex example; includes games with '[number]-in-1' in their name. collection : Multi - game carts regex : \\ d +. in .1 Then add C:/games/snes to the searched game directories in the Settings menu. The games and categories will appear the next time you start Pegasus.","title":"Example"},{"location":"user-guide/meta-files/#games","text":"Game entries store additional information about the individual games, such as title, developer(s) or release date. If a game need a special way to get launched, it can also be set here. The following properties can be used in game entries: Key Description Type game Creates a new game with the value as title. The properties after this line will modify this game. This is a required field. T sort-by An alternate title that should be used for sorting. Can be useful when the title contains eg. roman numerals or special symbols. sort_title and sort_name are also accepted. T file , files The file or list of files (eg. disks) that belong to this game. Paths can be either absolute or relative to the metadata file. If there are multiple files, you'll be able to select which one to launch when you start the game. developer , developers The developer or list of developers. This field can appear multiple times. publisher , publishers The publisher or list of publishers. This field can appear multiple times. genre , genres The genre or list of genres (for example Action , Adventure , etc.). This field can appear multiple times. tag , tags Tag or list of tags (for example Co-op , VR , etc.). This field can appear multiple times. summary A short description of the game in one paragraph. T description A possibly longer description of the game. T players The number of players who can play the game. Either a single number (eg. 2 ) or a number range (eg. 1-4 ). T release The date when the game was released, in YYYY-MM-DD format (eg. 1985-05-22 ). Month and day can be omitted if unknown (eg. 1985-05 or 1985 alone is also accepted). T rating The rating of the game, in percentages. Either an integer percentage in the 0-100% range (eg. 70% ), or a fractional value between 0 and 1 (eg. 0.7 ). T launch If this game must be launched differently than the others in the same collection, a custom launch command can be defined for it. T command An alternate name for launch . Use whichever you prefer. T workdir The working directory in which the game is launched. Defaults to the directory of the launched program. T cwd An alternate name for workdir . Use whichever you prefer. T Like with the collections, keys starting with x- can be used to extend the format with additional data. This could be used, for example, by other softwares (eg. scrapers) to store some program-specific data. Game requirements Only games that belong to at least one collection and have at least one existing file will appear in Pegasus.","title":"Games"},{"location":"user-guide/meta-files/#example_1","text":"Continuing with the collection example, the C:/games/snes/metadata.pegasus.txt file could be extended with game data like this: game : Alien Hominid file : Alien Hominid ( Europe ) ( En , Fr , De , Es , It ). gba developer : Zoo Digital genre : Shooter players : 1 summary : You ' re a little yellow alien . The FBI has shot down your ship while flying over planet Earth. And it, quite literally, lands right on their doorstep. After a series of FBI Agents swipe your ship, what option do you have other than to blow up everything in your path to get it back? description : Alien Hominid is a 2D side-scrolling shooter with heavy references to the Metal Slug series of games - from the hand-drawn graphics, huge explosions, right down to the ability to eviscerate FBI Agents when you get up close to them. The graphics are by featured artist Dan Paladin. . Your goal, is quite simply, to get to the end of the stage, and die as little as possible. Which is made difficult due to the fact that any bullet is an instant kill. To help you out, you can grab a range of power-ups, such as lasers, spread shots, shotguns and more. rating : 50% x-id : 4149 x-source : ScreenScraper","title":"Example"},{"location":"user-guide/meta-files/#asset-files","text":"You can add various assets (eg. cover art) for your games. This is documented HERE .","title":"Asset files"},{"location":"user-guide/meta-files/#real-world-examples","text":"You can find some more examples on the platform specific pages: Windows Android Android example setup","title":"Real-world examples"},{"location":"user-guide/meta-sources/","text":"Other data sources Other than the metadata files , Pegasus is also compatible with various third-party sources, such as EmulationStation and Steam, and can recognize their games automatically, often with all the available assets as well. You can turn on/off support for these sources in the Settings menu, under Enable/disable data sources . Steam Available on: desktop Linux, Windows, macOS It just works, no additional configuration is necessary. Installed Steam games should automatically appear in Pegasus with metadata and multimedia assets. On Windows you might need to install DirectShow codecs for video playback. You can download them HERE , look for opencodecs_<version>.exe . For more details, see the Windows platform notes . Steam in background Unfortunately it is not possible to detect accurately when does a game launch or exit, because Pegasus communicates with Steam, and Steam may keep running even after leaving the game. This problem has been reported to Valve , and the Pegasus issue can be found here . GOG Available on: desktop Linux, Windows On Windows, this works out of the box, like Steam. Similarly to GOG Galaxy, games installed older than a few years ago might not be detected, due to a change in GOG's installers. In this case, try downloading the game again from GOG.com and reinstall it. On Linux, there's way less information available offline, so support is a bit hit and miss. Games installed in the default location ( <home>/GOG Games ) can be detected, but assets might me missing (for the games installed somewhere else, you can always just create symlinks). If you have games that refuse to show up, feel free to report it as an issue. Android Apps Available on: Android It just works. Installed and launchable apps will appear in Pegasus just like with any other Android launcher. If connected to the internet, metadata and assets will also be downloaded from the Google Play Store. Lutris Available on: desktop Linux Should work out of the box. Games added in Lutris will also appear in Pegasus, with the metadata and assets available locally. Experimental Support for this source is experimental, feel free to report if you run into any issues! EmulationStation Available on: desktop Linux, embedded Linux, Windows, macOS If you have EmulationStation installed and set up, Pegasus will also check the directories set in es_systems.cfg , read the gamelist.xml files in them, and use the metadata and assets defined there. Note that there are several, mutually incompatible EmulationStation variants out there; Pegasus supports only the last official ES release. A tool for converting between ES and Pegasus files can be found HERE . Compared to ES files, the metadata file is like a combination of es_systems.cfg (as it contains platform data) and gamelist.xml (as it contains game data). LaunchBox Available on: Windows LaunchBox is a portable application, so it's not possible to find it automatically in every case. By default Pegasus will look for it under C:\\Users\\[username]\\LaunchBox . Unfortunately there is no configuration screen to change that, but will be added in the future. Until then as a workaround you can add a line like this to your Pegasus config file ( C:\\Users\\[username]\\AppData\\Local\\pegasus-frontend\\settings.txt ): providers.launchbox.installdir: C:/path/to/my/LaunchBox Once LaunchBox is found, all games added there should also appear in Pegasus, with the correct assets and metadata. Skraper Assets Available on: all platforms Pegasus can recognize the assets (\"media\" directory) layout created by Skraper. Pegasus will look for assets in [game directory]/skraper and [game directory]/media , for the game directories set in the Settings menu. An example directory structure could look like this: NES/ \u251c\u2500 metadata.pegasus.txt \u251c\u2500 Contra (U).zip \u2514\u2500 media/ \u251c\u2500 box2dfront/ \u2502 \u2514\u2500 Contra (U).png \u2514\u2500 videos/ \u2514\u2500 Contra (U).mp4","title":"Other sources"},{"location":"user-guide/meta-sources/#other-data-sources","text":"Other than the metadata files , Pegasus is also compatible with various third-party sources, such as EmulationStation and Steam, and can recognize their games automatically, often with all the available assets as well. You can turn on/off support for these sources in the Settings menu, under Enable/disable data sources .","title":"Other data sources"},{"location":"user-guide/meta-sources/#steam","text":"Available on: desktop Linux, Windows, macOS It just works, no additional configuration is necessary. Installed Steam games should automatically appear in Pegasus with metadata and multimedia assets. On Windows you might need to install DirectShow codecs for video playback. You can download them HERE , look for opencodecs_<version>.exe . For more details, see the Windows platform notes . Steam in background Unfortunately it is not possible to detect accurately when does a game launch or exit, because Pegasus communicates with Steam, and Steam may keep running even after leaving the game. This problem has been reported to Valve , and the Pegasus issue can be found here .","title":"Steam"},{"location":"user-guide/meta-sources/#gog","text":"Available on: desktop Linux, Windows On Windows, this works out of the box, like Steam. Similarly to GOG Galaxy, games installed older than a few years ago might not be detected, due to a change in GOG's installers. In this case, try downloading the game again from GOG.com and reinstall it. On Linux, there's way less information available offline, so support is a bit hit and miss. Games installed in the default location ( <home>/GOG Games ) can be detected, but assets might me missing (for the games installed somewhere else, you can always just create symlinks). If you have games that refuse to show up, feel free to report it as an issue.","title":"GOG"},{"location":"user-guide/meta-sources/#android-apps","text":"Available on: Android It just works. Installed and launchable apps will appear in Pegasus just like with any other Android launcher. If connected to the internet, metadata and assets will also be downloaded from the Google Play Store.","title":"Android Apps"},{"location":"user-guide/meta-sources/#lutris","text":"Available on: desktop Linux Should work out of the box. Games added in Lutris will also appear in Pegasus, with the metadata and assets available locally. Experimental Support for this source is experimental, feel free to report if you run into any issues!","title":"Lutris"},{"location":"user-guide/meta-sources/#emulationstation","text":"Available on: desktop Linux, embedded Linux, Windows, macOS If you have EmulationStation installed and set up, Pegasus will also check the directories set in es_systems.cfg , read the gamelist.xml files in them, and use the metadata and assets defined there. Note that there are several, mutually incompatible EmulationStation variants out there; Pegasus supports only the last official ES release. A tool for converting between ES and Pegasus files can be found HERE . Compared to ES files, the metadata file is like a combination of es_systems.cfg (as it contains platform data) and gamelist.xml (as it contains game data).","title":"EmulationStation"},{"location":"user-guide/meta-sources/#launchbox","text":"Available on: Windows LaunchBox is a portable application, so it's not possible to find it automatically in every case. By default Pegasus will look for it under C:\\Users\\[username]\\LaunchBox . Unfortunately there is no configuration screen to change that, but will be added in the future. Until then as a workaround you can add a line like this to your Pegasus config file ( C:\\Users\\[username]\\AppData\\Local\\pegasus-frontend\\settings.txt ): providers.launchbox.installdir: C:/path/to/my/LaunchBox Once LaunchBox is found, all games added there should also appear in Pegasus, with the correct assets and metadata.","title":"LaunchBox"},{"location":"user-guide/meta-sources/#skraper-assets","text":"Available on: all platforms Pegasus can recognize the assets (\"media\" directory) layout created by Skraper. Pegasus will look for assets in [game directory]/skraper and [game directory]/media , for the game directories set in the Settings menu. An example directory structure could look like this: NES/ \u251c\u2500 metadata.pegasus.txt \u251c\u2500 Contra (U).zip \u2514\u2500 media/ \u251c\u2500 box2dfront/ \u2502 \u2514\u2500 Contra (U).png \u2514\u2500 videos/ \u2514\u2500 Contra (U).mp4","title":"Skraper Assets"},{"location":"user-guide/platform-android-example/","text":"Android example setup Let's say I want to play my NES and PSP games on Android. I'd like to use RetroArch with the fceumm core (installed from its menu) for emulating NES, and use the standalone PPSSPP app for PSP. After copying the roms to the SD card, my directory structure looks like this (games are examples) : [SD card] \u2514\u2500 Roms \u251c\u2500 NES \u2502 \u251c\u2500 Contra.zip \u2502 \u2514\u2500 Super Mario.zip \u2514\u2500 PSP \u251c\u2500 Patapon.iso \u2514\u2500 Lumines.cso I've also downloaded assets (like box art and video) for my games using a scraper . To make Pegasus automatically find them, I place them in a directory called media for each system: [SD card] \u2514\u2500 Roms \u251c\u2500 NES \u2502 \u251c\u2500 media \u2502 \u2502 \u251c\u2500 Contra \u2502 \u2502 \u2502 \u251c\u2500 boxFront.png \u2502 \u2502 \u2502 \u2514\u2500 video.mp4 \u2502 \u2502 \u2514\u2500 Super Mario \u2502 \u2502 \u251c\u2500 boxFront.png \u2502 \u2502 \u2514\u2500 video.mp4 \u2502 \u251c\u2500 Contra.zip \u2502 \u2514\u2500 Super Mario.zip \u2514\u2500 PSP \u251c\u2500 media \u2502 \u251c\u2500 Patapon \u2502 \u2502 \u2514\u2500 boxFront.png \u2502 \u2514\u2500 Lumines \u2502 \u251c\u2500 boxFront.png \u2502 \u2514\u2500 video.mp4 \u251c\u2500 Patapon.iso \u2514\u2500 Lumines.cso (see the documentation here ) Now I create a metadata file for each system. As mentioned in the Android platform notes , RetroArch happens to need a bunch of parameters, but PPSSPP can just open the file directly. Here are my configs: [SD card]/Roms/PSP/metadata.pegasus.txt collection : PSP extension : iso , cso launch : am start --user 0 -a android.intent.action.VIEW -d { file.path } [SD card]/Roms/NES/metadata.pegasus.txt collection : NES extensions : zip launch : am start --user 0 -n com.retroarch/.browser.retroactivity.RetroActivityFuture -e ROM { file.path } -e LIBRETRO /data/data/com.retroarch/cores/fceumm_libretro_android.so -e CONFIGFILE /storage/emulated/0/Android/data/com.retroarch/files/retroarch.cfg -e QUITFOCUS --activity-clear-top --activity-clear-task --activity-no-history SD card path In the above configurations I use /storage/emulated/0/ which is the path of the SD card on my device. This might be different for you! You can check the path in most file manager apps, look for something like \"file details\" or similar. While it's optional, I'd also like some descriptions and such for my games, so I add the following as well as well: [SD card]/Roms/PSP/metadata.pegasus.txt ... game : Patapon file : Patapon . iso description : For years the Patapon tribe has lived in the desolate frontier , driven from their home by the evil Zigoton army. Behind the Patapons cute exterior, lies a fierce warrior spirit that can only be commanded by the beat of their God\u2019s war drum. They wait for the day that the \"Almighty\" will return , to lead them against their enemies and bring them back to their homeland. Finally, their wait has come to an end as the drums of war are heard once again. game : LUMINES file : Lumines . cso description : LUMINES brings minimalism to the puzzle genre where the fusion of light and sound sets the stage for a two-color falling block experience in HD and 4K. Groove to electronic jams while strategically dropping blocks before the BPM bar sweeps combos clean after each measure. [SD card]/Roms/NES/metadata.pegasus.txt ... game : Contra file : Contra . zip developer : Konami players : 2 description : In the year 2633 , the evil Red Falcon Organization have set a base on the Galuga archipelago near New Zealand in a plot to conquer the world. Two commandos, Pfc. Bill Rizer and Pfc. Lance Bean of the Contra unit ( an elite group of soldiers specializing in guerrilla warfare ) , are sent to the island to destroy the enemy forces and uncover the true nature of Red Falcon, the alien entity controlling them. game : Super Mario Bros . file : Super Mario . zip developer : Nintendo players : 2 description : In the fantasy setting of the Mushroom Kingdom , a tribe of turtle - like creatures known as the Koopa Troopas invade the kingdom and uses the magic of its king, Bowser, to turn its inhabitants, known as the Mushroom People, into inanimate objects such as bricks, stones and horsehair plants. Bowser and his army also kidnap Princess Toadstool, the princess of the Mushroom Kingdom and the only one with the ability to reverse Bowsers spell. After hearing the news, Mario sets out to save the princess and free the kingdom from Bowser. After that, I open Pegasus, go to the Settings menu \u2192 Set game directories, and add both collection files to the list. Closing the menu, Pegasus asks if I want to reload my list of games. Pressing Yes, Pegasus starts reading the files, and after a short loading my games now appear with the assets and metadata set, and can be now launched from Pegasus.","title":"Android example"},{"location":"user-guide/platform-android-example/#android-example-setup","text":"Let's say I want to play my NES and PSP games on Android. I'd like to use RetroArch with the fceumm core (installed from its menu) for emulating NES, and use the standalone PPSSPP app for PSP. After copying the roms to the SD card, my directory structure looks like this (games are examples) : [SD card] \u2514\u2500 Roms \u251c\u2500 NES \u2502 \u251c\u2500 Contra.zip \u2502 \u2514\u2500 Super Mario.zip \u2514\u2500 PSP \u251c\u2500 Patapon.iso \u2514\u2500 Lumines.cso I've also downloaded assets (like box art and video) for my games using a scraper . To make Pegasus automatically find them, I place them in a directory called media for each system: [SD card] \u2514\u2500 Roms \u251c\u2500 NES \u2502 \u251c\u2500 media \u2502 \u2502 \u251c\u2500 Contra \u2502 \u2502 \u2502 \u251c\u2500 boxFront.png \u2502 \u2502 \u2502 \u2514\u2500 video.mp4 \u2502 \u2502 \u2514\u2500 Super Mario \u2502 \u2502 \u251c\u2500 boxFront.png \u2502 \u2502 \u2514\u2500 video.mp4 \u2502 \u251c\u2500 Contra.zip \u2502 \u2514\u2500 Super Mario.zip \u2514\u2500 PSP \u251c\u2500 media \u2502 \u251c\u2500 Patapon \u2502 \u2502 \u2514\u2500 boxFront.png \u2502 \u2514\u2500 Lumines \u2502 \u251c\u2500 boxFront.png \u2502 \u2514\u2500 video.mp4 \u251c\u2500 Patapon.iso \u2514\u2500 Lumines.cso (see the documentation here ) Now I create a metadata file for each system. As mentioned in the Android platform notes , RetroArch happens to need a bunch of parameters, but PPSSPP can just open the file directly. Here are my configs: [SD card]/Roms/PSP/metadata.pegasus.txt collection : PSP extension : iso , cso launch : am start --user 0 -a android.intent.action.VIEW -d { file.path } [SD card]/Roms/NES/metadata.pegasus.txt collection : NES extensions : zip launch : am start --user 0 -n com.retroarch/.browser.retroactivity.RetroActivityFuture -e ROM { file.path } -e LIBRETRO /data/data/com.retroarch/cores/fceumm_libretro_android.so -e CONFIGFILE /storage/emulated/0/Android/data/com.retroarch/files/retroarch.cfg -e QUITFOCUS --activity-clear-top --activity-clear-task --activity-no-history SD card path In the above configurations I use /storage/emulated/0/ which is the path of the SD card on my device. This might be different for you! You can check the path in most file manager apps, look for something like \"file details\" or similar. While it's optional, I'd also like some descriptions and such for my games, so I add the following as well as well: [SD card]/Roms/PSP/metadata.pegasus.txt ... game : Patapon file : Patapon . iso description : For years the Patapon tribe has lived in the desolate frontier , driven from their home by the evil Zigoton army. Behind the Patapons cute exterior, lies a fierce warrior spirit that can only be commanded by the beat of their God\u2019s war drum. They wait for the day that the \"Almighty\" will return , to lead them against their enemies and bring them back to their homeland. Finally, their wait has come to an end as the drums of war are heard once again. game : LUMINES file : Lumines . cso description : LUMINES brings minimalism to the puzzle genre where the fusion of light and sound sets the stage for a two-color falling block experience in HD and 4K. Groove to electronic jams while strategically dropping blocks before the BPM bar sweeps combos clean after each measure. [SD card]/Roms/NES/metadata.pegasus.txt ... game : Contra file : Contra . zip developer : Konami players : 2 description : In the year 2633 , the evil Red Falcon Organization have set a base on the Galuga archipelago near New Zealand in a plot to conquer the world. Two commandos, Pfc. Bill Rizer and Pfc. Lance Bean of the Contra unit ( an elite group of soldiers specializing in guerrilla warfare ) , are sent to the island to destroy the enemy forces and uncover the true nature of Red Falcon, the alien entity controlling them. game : Super Mario Bros . file : Super Mario . zip developer : Nintendo players : 2 description : In the fantasy setting of the Mushroom Kingdom , a tribe of turtle - like creatures known as the Koopa Troopas invade the kingdom and uses the magic of its king, Bowser, to turn its inhabitants, known as the Mushroom People, into inanimate objects such as bricks, stones and horsehair plants. Bowser and his army also kidnap Princess Toadstool, the princess of the Mushroom Kingdom and the only one with the ability to reverse Bowsers spell. After hearing the news, Mario sets out to save the princess and free the kingdom from Bowser. After that, I open Pegasus, go to the Settings menu \u2192 Set game directories, and add both collection files to the list. Closing the menu, Pegasus asks if I want to reload my list of games. Pressing Yes, Pegasus starts reading the files, and after a short loading my games now appear with the assets and metadata set, and can be now launched from Pegasus.","title":"Android example setup"},{"location":"user-guide/platform-android/","text":"Platform Notes: Android Pegasus is available for Android devices running at least Android 5.0 (Lollipop). Installation Pegasus is released as an APK package. To install it, you'll need to enable such files, which can be done under Settings \u2192 Security \u2192 Unknown Sources , turned on. Then open the APK file with any file manager app. If you have an active full screen app (eg. screen shade), Android might not allow you to press on the install button due to security reasons. In this case, just disable that app for the time of the installation. Config directory Config files are stored under <storage>/pegasus-frontend , where <storage> the internal storage, if you have one, otherwise the SD card. The directory will be created automatically when you first launch Pegasus (or you can create it yourself). Default launcher Pegasus can be set as the default launcher, which will make it start automatically when the device is turned on. After installing Pegasus, when you press the home screen button a popup message should appear, asking you which launcher you would like to run. Select Pegasus (or your previous launcher) from the list to set it as the default launcher. To restore the default launcher , open the Android Settings menu, either from Pegasus or by pulling down the notification bar at the top of the screen and clicking the cogwheel icon. Depending on your device, you should find a \"Default launcher\" option in either under Apps \u2192 Advanced settings \u2192 Default apps , Apps \u2192 Configure apps or Home . Loading games Android metadata generator This online tool can help with generating the launch commands for various emulators. Compared to desktop systems, launching other applications is slightly different on Android. Instead of directly calling a program, you'll need to ask the Activity Manager ( am ) to open a file or start an app, optionally with additional parameters. Here's how it looks in practice: Open a file with the default app The best case is when you have a file format associated with an app already. To open a file with its default app, invoke the Activity Manager like this: am start --user 0 -a android.intent.action.VIEW -d \"<path-to-file>\" Here is an example metadata.txt that will open ISO files with the default app: collection : PSP extension : iso launch : am start -- user 0 -a android.intent.action.VIEW -d { file.path } Help am is the Activity Manager program the start command sends an app launching request (\"intent\") to the Activity Manager --user 0 selects the user (by ID) that sends this request. Without this parameter I've got permission denied errors on my devices. -a stands for \"action\"; if an app supports opening files ( android.intent.action.VIEW ie. \"open with\"), it will react to this action. There are other possible actions, like \"take a photo\" or \"call a taxi\", but we probably won't need them for our use. -d is the parameter (data) of the action, and must be in a format the target app expects The full documentation of am can be found here and here . If you're not familiar with Pegasus' config files, you can find their documentation here . Note that not every app supports opening arbitrary files, or opening files at all (for example, RetroArch). In addition, there seems to be a glitch on some systems where a file may get opened with something else when there are multiple apps that can handle the file type. Which leads to... Open a file with a specific app Unfortunately opening a file with anything else than the default is a bit painful. To open the file, you have to know the exact name of the app component (\"activity\") that handles file opening requests. For example, for the Android version of the PPSSPP emulator, this is org.ppsspp.ppsspp/.PpssppActivity . I haven't found a good app yet that could tell this about the installed apps, so I guess the best bet for now is either asking the developers for a particular app or looking into its source code (tip: it's always in AndroidManifest.xml ). I've also made a small collection which you can find at the bottom of this page , and a tool that can generate metadata files for you . Anyway, once you know the Activity you want to call, the command is am start --user 0 -a android.intent.action.VIEW -n <activity-name> -d \"<path-to-file>\" Help -n stands for \"name\" Here is an example metadata.txt that will open ISO files with PPSSPP: collection : PSP extension : iso launch : am start -- user 0 -a android.intent.action.VIEW -n org.ppsspp.ppsspp/.PpssppActivity -d { file.path } Run a custom command Some apps simply don't support opening files, for example because they rely on a built-in file browser or some other reasons. The way to call these apps may differ from what's described above, or they might need additional parameters. You'll have to ask the developers or look around the source code in this case. See below for some examples. App-specific notes Android metadata generator This online tool can help with generating the launch commands for various emulators. RetroArch RetroArch has different versions available on Google Play and their site: the standard app is called RetroArch , which should work generally on all devices, and there are releases that only support 32- or 64-bit devices (eg. RetroArch64 , with the name \"RetroArch (AArch64)\" when installed). Depending on which one you'd like to use, the launch command will be slightly different. Unlike must applications, RetroArch happens to use a large number of custom parameters. It can be launched like this: RetroArch (standard): collection : NES extensions : zip launch : am start -- user 0 -n com.retroarch/.browser.retroactivity.RetroActivityFuture -e ROM { file.path } -e LIBRETRO /data/data/com.retroarch/cores/fceumm_libretro_android.so -e CONFIGFILE /storage/emulated/0/Android/data/com.retroarch/files/retroarch.cfg -e QUITFOCUS --activity-clear-top --activity-clear-task --activity-no-history RetroArch64/RetroArch Plus (AArch64): collection : NES extensions : zip launch : am start -- user 0 -n com.retroarch.aarch64/com.retroarch.browser.retroactivity.RetroActivityFuture -e ROM { file.path } -e LIBRETRO /data/data/com.retroarch.aarch64/cores/fceumm_libretro_android.so -e CONFIGFILE /storage/emulated/0/Android/data/com.retroarch.aarch64/files/retroarch.cfg -e QUITFOCUS --activity-clear-top --activity-clear-task --activity-no-history (based on the source code of their Android port at the time of writing). Android metadata generator This online tool can help with generating the launch commands for RetroArch. The important parts here are the core and the storage paths. Make sure you correct the paths of the above example to match your system and collection: /storage/emulated/0 is the absolute path to the internal storage on my phone. This can be completely different on other devices (eg. /storage/sdcard ). Most file browser apps can tell you the correct path, then you can replace all occurrences above. /data/data/com.retroarch/cores/fceumm_libretro_android.so is the libretro core I've installed using the RetroArch menu. You'll only need to change the fceumm_libretro_android.so part. You can find the available cores here . If you've created a custom configuration file inside RetroArch, you can change CONFIGFILE to point to that instead of the default. Help -e KEY VALUE defines an extra parameter, specific to the app. Note There is also a third option available on RetroArch's page, a 32-bit-only package called RetroArch_ra32.apk . To use that, replace aarch64 in the example above with ra32 . Known emulators Here's an incomplete list of emulators that can open external files using android.intent.action.VIEW . If you think some of the entries are incorrect, or you'd like to extend this list, feel free to open an Issue here . Android metadata generator This online tool can help with generating the launch commands for various emulators. App name Activity 2600.emu com.explusalpha.A2600Emu/com.imagine.BaseActivity C54.emu com.explusalpha.C64Emu/com.imagine.BaseActivity Citra no support yet, but their code is open source ClassicBoy com.portableandroid.classicboyLite/com.portableandroid.classicboy.EntryActivity Dolphin org.dolphinemu.dolphinemu/.activities.AppLinkActivity DraStic com.dsemu.drastic/.DraSticActivity Emulator for NES/SNES - Arcade Classic Games no support ePSXe no support, but has workaround -- see the metadata generator page GBA.emu com.explusalpha.GbaEmu/com.imagine.BaseActivity GBC.emu com.explusalpha.GbcEmu/com.imagine.BaseActivity John emulators no support MD.emu com.explusalpha.MdEmu/com.imagine.BaseActivity MegaN64 no support MSX.emu com.explusalpha.MsxEmu/com.imagine.BaseActivity Mupen64 Plus AE paulscode.android.mupen64plusae/.MainActivity Neo.emu com.explusalpha.NeoEmu/com.imagine.BaseActivity NES.emu com.explusalpha.NesEmu/com.imagine.BaseActivity NGP.emu com.explusalpha.NgpEmu/com.imagine.BaseActivity Nostalgia.NES no support PPSSPP org.ppsspp.ppsspp/.PpssppActivity Reicast com.reicast.emulator/.MainActivity Snes9xPlus com.explusalpha.Snes9xPlus/com.imagine.BaseActivity SuperRetro16 com.bubblezapgames.supergnes/.IntentFilterActivity SuperRetro16 Lite com.bubblezapgames.supergnes_lite/com.bubblezapgames.supergnes.IntentFilterActivity Additional notes Video playback has a high battery drain Unmounting the SD card while Pegasus is running may force close it If you're launching a memory-intensive application, the Android OS may decide to close Pegasus Shutdown and reboot are not available due to Android restrictions","title":"Android"},{"location":"user-guide/platform-android/#platform-notes-android","text":"Pegasus is available for Android devices running at least Android 5.0 (Lollipop).","title":"Platform Notes: Android"},{"location":"user-guide/platform-android/#installation","text":"Pegasus is released as an APK package. To install it, you'll need to enable such files, which can be done under Settings \u2192 Security \u2192 Unknown Sources , turned on. Then open the APK file with any file manager app. If you have an active full screen app (eg. screen shade), Android might not allow you to press on the install button due to security reasons. In this case, just disable that app for the time of the installation.","title":"Installation"},{"location":"user-guide/platform-android/#config-directory","text":"Config files are stored under <storage>/pegasus-frontend , where <storage> the internal storage, if you have one, otherwise the SD card. The directory will be created automatically when you first launch Pegasus (or you can create it yourself).","title":"Config directory"},{"location":"user-guide/platform-android/#default-launcher","text":"Pegasus can be set as the default launcher, which will make it start automatically when the device is turned on. After installing Pegasus, when you press the home screen button a popup message should appear, asking you which launcher you would like to run. Select Pegasus (or your previous launcher) from the list to set it as the default launcher. To restore the default launcher , open the Android Settings menu, either from Pegasus or by pulling down the notification bar at the top of the screen and clicking the cogwheel icon. Depending on your device, you should find a \"Default launcher\" option in either under Apps \u2192 Advanced settings \u2192 Default apps , Apps \u2192 Configure apps or Home .","title":"Default launcher"},{"location":"user-guide/platform-android/#loading-games","text":"Android metadata generator This online tool can help with generating the launch commands for various emulators. Compared to desktop systems, launching other applications is slightly different on Android. Instead of directly calling a program, you'll need to ask the Activity Manager ( am ) to open a file or start an app, optionally with additional parameters. Here's how it looks in practice:","title":"Loading games"},{"location":"user-guide/platform-android/#open-a-file-with-the-default-app","text":"The best case is when you have a file format associated with an app already. To open a file with its default app, invoke the Activity Manager like this: am start --user 0 -a android.intent.action.VIEW -d \"<path-to-file>\" Here is an example metadata.txt that will open ISO files with the default app: collection : PSP extension : iso launch : am start -- user 0 -a android.intent.action.VIEW -d { file.path } Help am is the Activity Manager program the start command sends an app launching request (\"intent\") to the Activity Manager --user 0 selects the user (by ID) that sends this request. Without this parameter I've got permission denied errors on my devices. -a stands for \"action\"; if an app supports opening files ( android.intent.action.VIEW ie. \"open with\"), it will react to this action. There are other possible actions, like \"take a photo\" or \"call a taxi\", but we probably won't need them for our use. -d is the parameter (data) of the action, and must be in a format the target app expects The full documentation of am can be found here and here . If you're not familiar with Pegasus' config files, you can find their documentation here . Note that not every app supports opening arbitrary files, or opening files at all (for example, RetroArch). In addition, there seems to be a glitch on some systems where a file may get opened with something else when there are multiple apps that can handle the file type. Which leads to...","title":"Open a file with the default app"},{"location":"user-guide/platform-android/#open-a-file-with-a-specific-app","text":"Unfortunately opening a file with anything else than the default is a bit painful. To open the file, you have to know the exact name of the app component (\"activity\") that handles file opening requests. For example, for the Android version of the PPSSPP emulator, this is org.ppsspp.ppsspp/.PpssppActivity . I haven't found a good app yet that could tell this about the installed apps, so I guess the best bet for now is either asking the developers for a particular app or looking into its source code (tip: it's always in AndroidManifest.xml ). I've also made a small collection which you can find at the bottom of this page , and a tool that can generate metadata files for you . Anyway, once you know the Activity you want to call, the command is am start --user 0 -a android.intent.action.VIEW -n <activity-name> -d \"<path-to-file>\" Help -n stands for \"name\" Here is an example metadata.txt that will open ISO files with PPSSPP: collection : PSP extension : iso launch : am start -- user 0 -a android.intent.action.VIEW -n org.ppsspp.ppsspp/.PpssppActivity -d { file.path }","title":"Open a file with a specific app"},{"location":"user-guide/platform-android/#run-a-custom-command","text":"Some apps simply don't support opening files, for example because they rely on a built-in file browser or some other reasons. The way to call these apps may differ from what's described above, or they might need additional parameters. You'll have to ask the developers or look around the source code in this case. See below for some examples.","title":"Run a custom command"},{"location":"user-guide/platform-android/#app-specific-notes","text":"Android metadata generator This online tool can help with generating the launch commands for various emulators.","title":"App-specific notes"},{"location":"user-guide/platform-android/#retroarch","text":"RetroArch has different versions available on Google Play and their site: the standard app is called RetroArch , which should work generally on all devices, and there are releases that only support 32- or 64-bit devices (eg. RetroArch64 , with the name \"RetroArch (AArch64)\" when installed). Depending on which one you'd like to use, the launch command will be slightly different. Unlike must applications, RetroArch happens to use a large number of custom parameters. It can be launched like this:","title":"RetroArch"},{"location":"user-guide/platform-android/#retroarch-standard","text":"collection : NES extensions : zip launch : am start -- user 0 -n com.retroarch/.browser.retroactivity.RetroActivityFuture -e ROM { file.path } -e LIBRETRO /data/data/com.retroarch/cores/fceumm_libretro_android.so -e CONFIGFILE /storage/emulated/0/Android/data/com.retroarch/files/retroarch.cfg -e QUITFOCUS --activity-clear-top --activity-clear-task --activity-no-history","title":"RetroArch (standard):"},{"location":"user-guide/platform-android/#retroarch64retroarch-plus-aarch64","text":"collection : NES extensions : zip launch : am start -- user 0 -n com.retroarch.aarch64/com.retroarch.browser.retroactivity.RetroActivityFuture -e ROM { file.path } -e LIBRETRO /data/data/com.retroarch.aarch64/cores/fceumm_libretro_android.so -e CONFIGFILE /storage/emulated/0/Android/data/com.retroarch.aarch64/files/retroarch.cfg -e QUITFOCUS --activity-clear-top --activity-clear-task --activity-no-history (based on the source code of their Android port at the time of writing). Android metadata generator This online tool can help with generating the launch commands for RetroArch. The important parts here are the core and the storage paths. Make sure you correct the paths of the above example to match your system and collection: /storage/emulated/0 is the absolute path to the internal storage on my phone. This can be completely different on other devices (eg. /storage/sdcard ). Most file browser apps can tell you the correct path, then you can replace all occurrences above. /data/data/com.retroarch/cores/fceumm_libretro_android.so is the libretro core I've installed using the RetroArch menu. You'll only need to change the fceumm_libretro_android.so part. You can find the available cores here . If you've created a custom configuration file inside RetroArch, you can change CONFIGFILE to point to that instead of the default. Help -e KEY VALUE defines an extra parameter, specific to the app. Note There is also a third option available on RetroArch's page, a 32-bit-only package called RetroArch_ra32.apk . To use that, replace aarch64 in the example above with ra32 .","title":"RetroArch64/RetroArch Plus (AArch64):"},{"location":"user-guide/platform-android/#known-emulators","text":"Here's an incomplete list of emulators that can open external files using android.intent.action.VIEW . If you think some of the entries are incorrect, or you'd like to extend this list, feel free to open an Issue here . Android metadata generator This online tool can help with generating the launch commands for various emulators. App name Activity 2600.emu com.explusalpha.A2600Emu/com.imagine.BaseActivity C54.emu com.explusalpha.C64Emu/com.imagine.BaseActivity Citra no support yet, but their code is open source ClassicBoy com.portableandroid.classicboyLite/com.portableandroid.classicboy.EntryActivity Dolphin org.dolphinemu.dolphinemu/.activities.AppLinkActivity DraStic com.dsemu.drastic/.DraSticActivity Emulator for NES/SNES - Arcade Classic Games no support ePSXe no support, but has workaround -- see the metadata generator page GBA.emu com.explusalpha.GbaEmu/com.imagine.BaseActivity GBC.emu com.explusalpha.GbcEmu/com.imagine.BaseActivity John emulators no support MD.emu com.explusalpha.MdEmu/com.imagine.BaseActivity MegaN64 no support MSX.emu com.explusalpha.MsxEmu/com.imagine.BaseActivity Mupen64 Plus AE paulscode.android.mupen64plusae/.MainActivity Neo.emu com.explusalpha.NeoEmu/com.imagine.BaseActivity NES.emu com.explusalpha.NesEmu/com.imagine.BaseActivity NGP.emu com.explusalpha.NgpEmu/com.imagine.BaseActivity Nostalgia.NES no support PPSSPP org.ppsspp.ppsspp/.PpssppActivity Reicast com.reicast.emulator/.MainActivity Snes9xPlus com.explusalpha.Snes9xPlus/com.imagine.BaseActivity SuperRetro16 com.bubblezapgames.supergnes/.IntentFilterActivity SuperRetro16 Lite com.bubblezapgames.supergnes_lite/com.bubblezapgames.supergnes.IntentFilterActivity","title":"Known emulators"},{"location":"user-guide/platform-android/#additional-notes","text":"Video playback has a high battery drain Unmounting the SD card while Pegasus is running may force close it If you're launching a memory-intensive application, the Android OS may decide to close Pegasus Shutdown and reboot are not available due to Android restrictions","title":"Additional notes"},{"location":"user-guide/platform-linux/","text":"Platform Notes: Linux Pegasus runs on both desktop and embedded Linux devices, and official releases are available for several platforms. On desktop, the releases are expected to run on at least the last two stable releases of Ubuntu, while on the Raspberry Pi, the last stable releases of Raspbian. Other than a few required system libraries however, Pegasus is mostly self-contained, so as long as you have a fairly up-to-date system, you may be able to run the official builds without problem. In general, the dependencies on Linux are: GStreamer 1.x (for video playback) Fontconfig (for typography) OpenSSL (for networking) X11 XCB libraries (for display) ZStd library (for data compression) PolicyKit (optional, for shutting down/restarting the device without admin rights) SDL2 (for improved gamepad support, required by the official build, optional when building from source) Warning Depending on your settings, the system may not allow running programs from USB drives or Windows file systems . This is not a bug, but something you might want to be aware of. Help Running on embedded devices? Take a look on this page too ! Ubuntu At the time of writing, the official builds require Ubuntu 22.04 or later . Most of the dependencies come preinstalled, but in case some might be missing, you can install them like this: sudo apt-get install \\ fontconfig \\ gstreamer1.0-alsa \\ gstreamer1.0-libav \\ gstreamer1.0-plugins-good \\ libsdl2-2.0-0 \\ libssl1.1 \\ libxcb-glx0 \\ libxcb-icccm4 \\ libxcb-image0 \\ libxcb-keysyms1 \\ libxcb-randr0 \\ libxcb-render-util0 \\ libxcb-shape0 \\ libxcb-shm0 \\ libxcb-sync1 \\ libxcb-xfixes0 \\ libxcb-xinerama0 \\ libxcb-xkb1 \\ libxkbcommon-x11-0 \\ libzstd1 \\ policykit-1 Odroid On Odroid, you may also have to install the Mali fbdev libraries ( mali-fbdev ), if they are missing. Green videos There have been reports of green video screens with certain Linux distros, caused by gstreamer1.0-vaapi . Removing that package seems to fix the issue. Arch A community maintained package is available from AUR. You can install it using your favorite AUR helper: yay -S pegasus-frontend-git # or trizen -S pegasus-frontend-git # or yaourt -S pegasus-frontend-git # etc. or get it manually: git clone https://aur.archlinux.org/pegasus-frontend-git.git cd pegasus-frontend-git makepkg -si Steam Deck Currently, Steam OS is missing 2 required plugins for GStreamer in order for video playback to work in the standalone version. To install them, you must temporarily disable Read Only mode, install the plugins and then re-enable Read Only mode as follows: sudo steamos-readonly disable sudo pacman --noconfirm -S gst-libav gst-plugins-good sudo steamos-readonly enable OpenSUSE Tumbleweed OpenSUSE Tumbleweed is also missing the same packages as Steam Deck, though they have different names in this repository. To install them, you can use the following single line in a terminal: sudo zypper install gstreamer-plugins-libav gstreamer-plugin-openh264 Flatpak The stable version of Pegasus is available on FlatHub . You can use any Flatpak-supporting software centers to install it, or follow the instructions on the page to do it manually. Custom builds As always, you can build Pegasus from source for your platform. You can find the instructions for that HERE .","title":"Linux"},{"location":"user-guide/platform-linux/#platform-notes-linux","text":"Pegasus runs on both desktop and embedded Linux devices, and official releases are available for several platforms. On desktop, the releases are expected to run on at least the last two stable releases of Ubuntu, while on the Raspberry Pi, the last stable releases of Raspbian. Other than a few required system libraries however, Pegasus is mostly self-contained, so as long as you have a fairly up-to-date system, you may be able to run the official builds without problem. In general, the dependencies on Linux are: GStreamer 1.x (for video playback) Fontconfig (for typography) OpenSSL (for networking) X11 XCB libraries (for display) ZStd library (for data compression) PolicyKit (optional, for shutting down/restarting the device without admin rights) SDL2 (for improved gamepad support, required by the official build, optional when building from source) Warning Depending on your settings, the system may not allow running programs from USB drives or Windows file systems . This is not a bug, but something you might want to be aware of. Help Running on embedded devices? Take a look on this page too !","title":"Platform Notes: Linux"},{"location":"user-guide/platform-linux/#ubuntu","text":"At the time of writing, the official builds require Ubuntu 22.04 or later . Most of the dependencies come preinstalled, but in case some might be missing, you can install them like this: sudo apt-get install \\ fontconfig \\ gstreamer1.0-alsa \\ gstreamer1.0-libav \\ gstreamer1.0-plugins-good \\ libsdl2-2.0-0 \\ libssl1.1 \\ libxcb-glx0 \\ libxcb-icccm4 \\ libxcb-image0 \\ libxcb-keysyms1 \\ libxcb-randr0 \\ libxcb-render-util0 \\ libxcb-shape0 \\ libxcb-shm0 \\ libxcb-sync1 \\ libxcb-xfixes0 \\ libxcb-xinerama0 \\ libxcb-xkb1 \\ libxkbcommon-x11-0 \\ libzstd1 \\ policykit-1 Odroid On Odroid, you may also have to install the Mali fbdev libraries ( mali-fbdev ), if they are missing. Green videos There have been reports of green video screens with certain Linux distros, caused by gstreamer1.0-vaapi . Removing that package seems to fix the issue.","title":"Ubuntu"},{"location":"user-guide/platform-linux/#arch","text":"A community maintained package is available from AUR. You can install it using your favorite AUR helper: yay -S pegasus-frontend-git # or trizen -S pegasus-frontend-git # or yaourt -S pegasus-frontend-git # etc. or get it manually: git clone https://aur.archlinux.org/pegasus-frontend-git.git cd pegasus-frontend-git makepkg -si","title":"Arch"},{"location":"user-guide/platform-linux/#steam-deck","text":"Currently, Steam OS is missing 2 required plugins for GStreamer in order for video playback to work in the standalone version. To install them, you must temporarily disable Read Only mode, install the plugins and then re-enable Read Only mode as follows: sudo steamos-readonly disable sudo pacman --noconfirm -S gst-libav gst-plugins-good sudo steamos-readonly enable","title":"Steam Deck"},{"location":"user-guide/platform-linux/#opensuse-tumbleweed","text":"OpenSUSE Tumbleweed is also missing the same packages as Steam Deck, though they have different names in this repository. To install them, you can use the following single line in a terminal: sudo zypper install gstreamer-plugins-libav gstreamer-plugin-openh264","title":"OpenSUSE Tumbleweed"},{"location":"user-guide/platform-linux/#flatpak","text":"The stable version of Pegasus is available on FlatHub . You can use any Flatpak-supporting software centers to install it, or follow the instructions on the page to do it manually.","title":"Flatpak"},{"location":"user-guide/platform-linux/#custom-builds","text":"As always, you can build Pegasus from source for your platform. You can find the instructions for that HERE .","title":"Custom builds"},{"location":"user-guide/platform-macos/","text":"Platform Notes: MacOS Launching RetroArch RetroArch is a popular emulator suite, but as it supports various platforms, it also requires a more explicit command: open /Applications/RetroArch.app --args -L \"path/to/core.dylib\" \"{file.path}\" where -L \"path/to/core.dylib\" tells RetroArch which core to use when running the game. For example: collection : Game Boy Advanced extension : gba launch : open / Applications / RetroArch . app -- args - L \"/ Applications / RetroArch . app / Contents / Resources / cores / mgba_libretro . dylib \" \"{ file . path }\" game : Advance Wars file : Advance Wars ( USA ). gba developer : Intelligent Games genre : Strategy players : 4 ... Note If your directory names contain spaces, don't forget to wrap the parameter in quotes, eg.: \"/my custom cores/mgba_libretro.dylib\" Tip You can also add the launch field to games too, in case some of them require a specifix emulator to work.","title":"MacOS"},{"location":"user-guide/platform-macos/#platform-notes-macos","text":"","title":"Platform Notes: MacOS"},{"location":"user-guide/platform-macos/#launching-retroarch","text":"RetroArch is a popular emulator suite, but as it supports various platforms, it also requires a more explicit command: open /Applications/RetroArch.app --args -L \"path/to/core.dylib\" \"{file.path}\" where -L \"path/to/core.dylib\" tells RetroArch which core to use when running the game. For example: collection : Game Boy Advanced extension : gba launch : open / Applications / RetroArch . app -- args - L \"/ Applications / RetroArch . app / Contents / Resources / cores / mgba_libretro . dylib \" \"{ file . path }\" game : Advance Wars file : Advance Wars ( USA ). gba developer : Intelligent Games genre : Strategy players : 4 ... Note If your directory names contain spaces, don't forget to wrap the parameter in quotes, eg.: \"/my custom cores/mgba_libretro.dylib\" Tip You can also add the launch field to games too, in case some of them require a specifix emulator to work.","title":"Launching RetroArch"},{"location":"user-guide/platform-raspberry/","text":"Platform Notes: Raspberry On the Raspberry Pi, the official builds require Raspbian Buster or later . All Raspberry boards are supported, however the releases are generally not interchangeable: trying to launch an executable made for a different device will result in Illegal instruction errors. Pegasus requires at least 64 MB of video RAM. You can change the memory split of the Raspberry Pi using raspi-config . Raspbian AS Raspbian is also a Debian-based distribution, you can follow the Linux intrustions here as well. A desktop installation (X11) is not required, so you can also use the \"Lite\" versions of Raspbian on your boards. If you don't use X11, you don't need to install any of the libxcb- packages either. RetroPie For Raspberry Pi devices Pegasus is also available from the RetroPie repositories. You can install it by two ways: a) From the RetroPie setup menu b) Using the Frontend Chooser tool Note You will need RetroPie version 4.6 (released on April 28, 2020) or later to successfully install Pegasus. From the setup menu You can start the RetroPie setup script from the terminal ( sudo ~/RetroPie-Setup/retropie_setup.sh ) or from another already installed frontend. You will be greeted with a text-based interface. To install Pegasus, select Manage Packages \u2192 Manage experimental packages \u2192 pegasus-fe \u2192 Install from binary . The latest release will then be downloaded. You can also update your existing installation here. After the installation, you can either call pegasus-fe manually, or edit /opt/retropie/configs/all/autostart.sh to launch Pegasus on boot (instead of eg. ES2). Using the Frontend Chooser There's also a graphical tool for installing various frontend and setting them up to boot automatically. It is available from HERE . GPU driver notes On the Raspberry Pi 4 you have to define the QT_QPA_EGLFS_KMS_ATOMIC environment variable before launching Pegasus: export QT_QPA_EGLFS_KMS_ATOMIC=1 (You can type it in the terminal, if you're launching Pegasus from there, or write a script for launching. If this isn't set, you'll see Could not queue DRM page flip on screen HDMI1 errors.) To improve gradient colors on all Raspberries, define the QT_QPA_EGLFS_FORCE888 environment variable: export QT_QPA_EGLFS_FORCE888=1 By default Pegasus tries to match the preferred resolution of the display (eg. TV) and use the default one if there are multiple connected outputs. To fine tune this behaviour, you can create a JSON file with a content like this: { \"outputs\" : [{ \"name\" : \"HDMI1\" , \"mode\" : \"1280x720\" }] } then tell Pegasus to use it like this: export QT_QPA_EGLFS_KMS_CONFIG=/path/to/my.json For more details, please visit this site .","title":"Raspberry Pi"},{"location":"user-guide/platform-raspberry/#platform-notes-raspberry","text":"On the Raspberry Pi, the official builds require Raspbian Buster or later . All Raspberry boards are supported, however the releases are generally not interchangeable: trying to launch an executable made for a different device will result in Illegal instruction errors. Pegasus requires at least 64 MB of video RAM. You can change the memory split of the Raspberry Pi using raspi-config .","title":"Platform Notes: Raspberry"},{"location":"user-guide/platform-raspberry/#raspbian","text":"AS Raspbian is also a Debian-based distribution, you can follow the Linux intrustions here as well. A desktop installation (X11) is not required, so you can also use the \"Lite\" versions of Raspbian on your boards. If you don't use X11, you don't need to install any of the libxcb- packages either.","title":"Raspbian"},{"location":"user-guide/platform-raspberry/#retropie","text":"For Raspberry Pi devices Pegasus is also available from the RetroPie repositories. You can install it by two ways: a) From the RetroPie setup menu b) Using the Frontend Chooser tool Note You will need RetroPie version 4.6 (released on April 28, 2020) or later to successfully install Pegasus.","title":"RetroPie"},{"location":"user-guide/platform-raspberry/#from-the-setup-menu","text":"You can start the RetroPie setup script from the terminal ( sudo ~/RetroPie-Setup/retropie_setup.sh ) or from another already installed frontend. You will be greeted with a text-based interface. To install Pegasus, select Manage Packages \u2192 Manage experimental packages \u2192 pegasus-fe \u2192 Install from binary . The latest release will then be downloaded. You can also update your existing installation here. After the installation, you can either call pegasus-fe manually, or edit /opt/retropie/configs/all/autostart.sh to launch Pegasus on boot (instead of eg. ES2).","title":"From the setup menu"},{"location":"user-guide/platform-raspberry/#using-the-frontend-chooser","text":"There's also a graphical tool for installing various frontend and setting them up to boot automatically. It is available from HERE .","title":"Using the Frontend Chooser"},{"location":"user-guide/platform-raspberry/#gpu-driver-notes","text":"On the Raspberry Pi 4 you have to define the QT_QPA_EGLFS_KMS_ATOMIC environment variable before launching Pegasus: export QT_QPA_EGLFS_KMS_ATOMIC=1 (You can type it in the terminal, if you're launching Pegasus from there, or write a script for launching. If this isn't set, you'll see Could not queue DRM page flip on screen HDMI1 errors.) To improve gradient colors on all Raspberries, define the QT_QPA_EGLFS_FORCE888 environment variable: export QT_QPA_EGLFS_FORCE888=1 By default Pegasus tries to match the preferred resolution of the display (eg. TV) and use the default one if there are multiple connected outputs. To fine tune this behaviour, you can create a JSON file with a content like this: { \"outputs\" : [{ \"name\" : \"HDMI1\" , \"mode\" : \"1280x720\" }] } then tell Pegasus to use it like this: export QT_QPA_EGLFS_KMS_CONFIG=/path/to/my.json For more details, please visit this site .","title":"GPU driver notes"},{"location":"user-guide/platform-windows/","text":"Platform Notes: Windows Pegasus is available for Windows 7 or later, and should work out of the box. Multimedia support Pegasus uses Windows' built-in video playback support ( DirectShow ). This supports many video formats without problems, but in some cases it might be necessary to install separate codecs, or a codec pack (a common case for example is Steam videos). The K-Lite Basic pack is a popular choice that should work well for most cases, you can download it here . Launching desktop games There is built-in support for Steam and GOG games, but you can also launch standalone games too if you wish. Pegasus can launch the EXE files directly, so you can use {file.path} as the launch command in the metadata files. Some games come with multiple EXE files though (uninstaller, runtimes, ...), so you might want to manually list which files should be picked up by Pegasus. For example: collection : My Windows Games launch : { file . path } files : ./Cuphead/Cuphead.exe ./FEZ/FEZ.exe ./Frostpunk/Frostpunk.exe ./GRIS/GRIS.exe ./CoD2/CoD2SP_s.exe ./CoD2/CoD2MP_s.exe game : FEZ file : ./ FEZ / FEZ . exe description : Some description assets.boxFront : path / to / some / file . png game : Call of Duty 2 files : ./CoD2/CoD2SP_s.exe ./CoD2/CoD2MP_s.exe description : Example for the case where a game has multiple launchable files. Tip On Windows both forward- ( / ) and backward ( \\ ) slashes are supported in paths. Use whichever you prefer. Launching emulators In most cases, the launch command for emulators look like this: path\\to\\myemulator.exe {file.path} For example: collection : Game Boy Advanced extension : gba launch : C :\\ Emulators \\ visualboy . exe { file . path } game : Advance Wars file : Advance Wars ( USA ). gba developer : Intelligent Games genre : Strategy players : 4 ... Many emulators also provide other command line options as well, like auto fullscreen or loading a specific configuration. Usually you can find these in the documentation of the emulators. RetroArch RetroArch is a popular choice, but as it supports various platforms, it also requires a more explicit command: path\\to\\retroarch.exe -L path\\to\\core.dll {file.path} where -L path\\to\\core.dll tells RetroArch which core to use when running the game. For example: collection : Game Boy Advanced extension : gba launch : C :\\ RetroArch \\ retroarch . exe - L C :\\ RetroArch \\ cores \\ mgba_libretro . dll { file . path } game : Advance Wars file : Advance Wars ( USA ). gba developer : Intelligent Games genre : Strategy players : 4 ... Note If your directory names contain spaces, don't forget to wrap the parameter in quotes, eg.: \"C:\\My Games\\RetroArch emulator\\cores\\mgba_libretro.dll\" Tip You can also add the launch field to games too, in case some of them require a specifix emulator to work. RocketLauncher You can launch games via RocketLauncher through its command line interface. In the simplest case, the launch command would look like this: launch: \"path/to/RocketLauncher/RocketLauncher.exe\" -s \"Some System Here\" -r \"{file.path}\" For more information, you can visit the RocketLauncher documentation page .","title":"Windows"},{"location":"user-guide/platform-windows/#platform-notes-windows","text":"Pegasus is available for Windows 7 or later, and should work out of the box.","title":"Platform Notes: Windows"},{"location":"user-guide/platform-windows/#multimedia-support","text":"Pegasus uses Windows' built-in video playback support ( DirectShow ). This supports many video formats without problems, but in some cases it might be necessary to install separate codecs, or a codec pack (a common case for example is Steam videos). The K-Lite Basic pack is a popular choice that should work well for most cases, you can download it here .","title":"Multimedia support"},{"location":"user-guide/platform-windows/#launching-desktop-games","text":"There is built-in support for Steam and GOG games, but you can also launch standalone games too if you wish. Pegasus can launch the EXE files directly, so you can use {file.path} as the launch command in the metadata files. Some games come with multiple EXE files though (uninstaller, runtimes, ...), so you might want to manually list which files should be picked up by Pegasus. For example: collection : My Windows Games launch : { file . path } files : ./Cuphead/Cuphead.exe ./FEZ/FEZ.exe ./Frostpunk/Frostpunk.exe ./GRIS/GRIS.exe ./CoD2/CoD2SP_s.exe ./CoD2/CoD2MP_s.exe game : FEZ file : ./ FEZ / FEZ . exe description : Some description assets.boxFront : path / to / some / file . png game : Call of Duty 2 files : ./CoD2/CoD2SP_s.exe ./CoD2/CoD2MP_s.exe description : Example for the case where a game has multiple launchable files. Tip On Windows both forward- ( / ) and backward ( \\ ) slashes are supported in paths. Use whichever you prefer.","title":"Launching desktop games"},{"location":"user-guide/platform-windows/#launching-emulators","text":"In most cases, the launch command for emulators look like this: path\\to\\myemulator.exe {file.path} For example: collection : Game Boy Advanced extension : gba launch : C :\\ Emulators \\ visualboy . exe { file . path } game : Advance Wars file : Advance Wars ( USA ). gba developer : Intelligent Games genre : Strategy players : 4 ... Many emulators also provide other command line options as well, like auto fullscreen or loading a specific configuration. Usually you can find these in the documentation of the emulators.","title":"Launching emulators"},{"location":"user-guide/platform-windows/#retroarch","text":"RetroArch is a popular choice, but as it supports various platforms, it also requires a more explicit command: path\\to\\retroarch.exe -L path\\to\\core.dll {file.path} where -L path\\to\\core.dll tells RetroArch which core to use when running the game. For example: collection : Game Boy Advanced extension : gba launch : C :\\ RetroArch \\ retroarch . exe - L C :\\ RetroArch \\ cores \\ mgba_libretro . dll { file . path } game : Advance Wars file : Advance Wars ( USA ). gba developer : Intelligent Games genre : Strategy players : 4 ... Note If your directory names contain spaces, don't forget to wrap the parameter in quotes, eg.: \"C:\\My Games\\RetroArch emulator\\cores\\mgba_libretro.dll\" Tip You can also add the launch field to games too, in case some of them require a specifix emulator to work.","title":"RetroArch"},{"location":"user-guide/platform-windows/#rocketlauncher","text":"You can launch games via RocketLauncher through its command line interface. In the simplest case, the launch command would look like this: launch: \"path/to/RocketLauncher/RocketLauncher.exe\" -s \"Some System Here\" -r \"{file.path}\" For more information, you can visit the RocketLauncher documentation page .","title":"RocketLauncher"},{"location":"user-guide/portable/","text":"Portable mode You can start Pegasus in portable mode by either launching it with the --portable command line option, or creating a file called portable.txt and placing it next to the Pegasus executable In this mode, Pegasus attempts to write only into the directory it is placed in, making it easier to move your setup around. On Linux note that by default the system might not allow running programs from USB drives or from NTFS file systems.","title":"Portable mode"},{"location":"user-guide/portable/#portable-mode","text":"You can start Pegasus in portable mode by either launching it with the --portable command line option, or creating a file called portable.txt and placing it next to the Pegasus executable In this mode, Pegasus attempts to write only into the directory it is placed in, making it easier to move your setup around. On Linux note that by default the system might not allow running programs from USB drives or from NTFS file systems.","title":"Portable mode"},{"location":"user-guide/scripting/","text":"Scripting Pegasus supports calling external scripts and executables on certain program events. 1. The scripts directory First, find your config directory and create a new directory there called scripts (eg. ~/.config/pegasus-frontend/scripts/ ). 2. Event directories Inside the scripts folder, create a new directory for the kind of events for which you want to react: Name When quit on program quit reboot on system reboot (also calls quit first) shutdown on system shutdown (also calls quit first) config-changed on the change of any configuration option controls-changed on change of the control settings (also calls config first) settings-changed on change of the regular (non-control) settings (also calls config first) game-start before starting a game game-end after finishing a game 3. Script calling Put your executable scripts or binaries into these new directories. They will be called in alphabetic order when the event happens.","title":"Scripting"},{"location":"user-guide/scripting/#scripting","text":"Pegasus supports calling external scripts and executables on certain program events.","title":"Scripting"},{"location":"user-guide/scripting/#1-the-scripts-directory","text":"First, find your config directory and create a new directory there called scripts (eg. ~/.config/pegasus-frontend/scripts/ ).","title":"1. The scripts directory"},{"location":"user-guide/scripting/#2-event-directories","text":"Inside the scripts folder, create a new directory for the kind of events for which you want to react: Name When quit on program quit reboot on system reboot (also calls quit first) shutdown on system shutdown (also calls quit first) config-changed on the change of any configuration option controls-changed on change of the control settings (also calls config first) settings-changed on change of the regular (non-control) settings (also calls config first) game-start before starting a game game-end after finishing a game","title":"2. Event directories"},{"location":"user-guide/scripting/#3-script-calling","text":"Put your executable scripts or binaries into these new directories. They will be called in alphabetic order when the event happens.","title":"3. Script calling"}]}